<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Demo</title>
    <url>/2023/03/15/Demo/</url>
    <content><![CDATA[<p>上传一些小Demo，基本都是实时渲染的内容，主要通过Unity和UE实现。</p>
<h1 id="屏幕空间阴影"><a href="#屏幕空间阴影" class="headerlink" title="屏幕空间阴影"></a>屏幕空间阴影</h1><ul>
<li><p>PCSS+SSAO</p>
<p><img src="/2023/03/15/Demo/Untitled_1.1.1.png" alt="Untitled_1.1.1"></p>
<p><img src="/2023/03/15/Demo/Untitled_1.5.1.png" alt="Untitled_1.5.1"></p>
</li>
<li><p>不同阴影方案的对比：</p>
<p><img src="/2023/03/15/Demo/Untitled_2.2.1.png" alt="Untitled_2.2.1"></p>
</li>
</ul>
<h1 id="PBR，屏幕空间反射，Bloom"><a href="#PBR，屏幕空间反射，Bloom" class="headerlink" title="PBR，屏幕空间反射，Bloom"></a>PBR，屏幕空间反射，Bloom</h1><ul>
<li><p>此处实现的PBR是基于实时渲染中使用较多的Cook-Torrance模型，采用Disney‘s Principled BRDF，其中法线分布项（Specular D）采用了指数更高的GTR以获得更长的高光。</p>
<ul>
<li>间接光照漫反射采用SH球谐函数</li>
<li>间接光照高光则采用IBL的Split Sum</li>
</ul>
</li>
<li><p>SSR，屏幕空间反射。算法实现倒不难，烦的在Unity左右手坐标系的问题，以及各种DX12和OpenGL之间的差异。后续会整理一篇坐标变换中，DX12和OpenGL之间的差异。</p>
</li>
<li><p>Bloom泛光</p>
<p><img src="/2023/03/15/Demo/Untitled_3.1.1-16790393917991.png" alt="Untitled_3.1.1"></p>
</li>
</ul>
<span id="more"></span>
<h1 id="皮肤渲染（预积分、屏幕空间次表面散射）"><a href="#皮肤渲染（预积分、屏幕空间次表面散射）" class="headerlink" title="皮肤渲染（预积分、屏幕空间次表面散射）"></a>皮肤渲染（预积分、屏幕空间次表面散射）</h1><ul>
<li><p>此处采用的是使用SSSS实现SSS的SSSSS（:D，好绕），后续会专门写一个这个的文章，写一下各种Diffusion Profile，顺便把Burley Normalized中的PDF、CDF给写一下。</p>
</li>
<li><p>通过模板测试制作出皮肤的Mask，再通过MRT，使用两张RT存储高光和漫反射的Irradiance。对漫反射的Irradiance使用Diffusion Profile（此处使用的Diffusion Profile是Separable Sum-of-Gaussians）做卷积去近似次表面散射。最后叠上高光就好啦，下面是效果图：</p>
<p><img src="/2023/03/15/Demo/Untitled_1.21.1.png" alt="Untitled_1.21.1"></p>
</li>
</ul>
<h1 id="曲面细分，几何着色器-DOF景深"><a href="#曲面细分，几何着色器-DOF景深" class="headerlink" title="曲面细分，几何着色器 + DOF景深"></a>曲面细分，几何着色器 + DOF景深</h1><p><img src="/2023/03/15/Demo/Untitled_1.10.2.png" alt="Untitled_1.10.2"></p>
<h1 id="多层Pass短毛渲染"><a href="#多层Pass短毛渲染" class="headerlink" title="多层Pass短毛渲染"></a>多层Pass短毛渲染</h1><ul>
<li>这里采用了30层Pass</li>
</ul>
<p><img src="/2023/03/15/Demo/Untitled_1.11.1.png" alt="Untitled_1.11.1"></p>
<h1 id="基于UE5的动捕短片"><a href="#基于UE5的动捕短片" class="headerlink" title="基于UE5的动捕短片"></a>基于UE5的动捕短片</h1><ul>
<li>动捕设备：诺亦腾</li>
<li>后期动作修改：MotionBuilder、Maya</li>
</ul>
<p><img src="/2023/03/15/Demo/Untitled_1.15.1.png" alt="Untitled_1.15.1"></p>
<h1 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h1><ul>
<li><p>是用于建筑Mapping的短片，因此是竖屏的</p>
<p><img src="/2023/03/15/Demo/Untitled_1.5.1-16790397550912.png" alt="Untitled_1.5.1" style="zoom:50%;"></p>
<p><img src="/2023/03/15/Demo/Untitled_1.6.1.png" alt="Untitled_1.6.1" style="zoom:50%;"></p>
</li>
</ul>
<p>  <img src="/2023/03/15/Demo/Untitled_1.3.1.png" alt="Untitled_1.3.1" style="zoom:50%;"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>还在慢慢完善</p>
]]></content>
      <categories>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>目录</title>
    <url>/2023/03/15/%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="目前已有"><a href="#目前已有" class="headerlink" title="目前已有"></a>目前已有</h1><p><a href="https://whitetail-o.github.io/categories/Demo/">分类: Demo概述 | WhiteTail’s Blog (whitetail-o.github.io)</a></p>
<p><a href="https://whitetail-o.github.io/categories/Games101/">分类: Games101 | WhiteTail’s Blog (whitetail-o.github.io)</a></p>
<p><a href="https://whitetail-o.github.io/categories/Games202/">分类: Games202 | WhiteTail’s Blog (whitetail-o.github.io)</a></p>
<p><a href="https://whitetail-o.github.io/categories/百人计划/">分类: 百人计划 | WhiteTail’s Blog (whitetail-o.github.io)</a></p>
<p><a href="https://whitetail-o.github.io/categories/相机/">分类: 相机概述 | WhiteTail’s Blog (whitetail-o.github.io)</a></p>
<h1 id="已完成未上传"><a href="#已完成未上传" class="headerlink" title="已完成未上传"></a>已完成未上传</h1><ul>
<li>通过Maya实现将平滑法线写入顶点色；</li>
<li>使用SSSS(Separable SSS)实现SSS的SSSSS(Screen Space SSS)            :D</li>
<li>战双帕弥什的角色渲染分析；</li>
</ul>
<h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1><ul>
<li>DX12龙书学习笔记；</li>
<li>SRP整理；</li>
</ul>
]]></content>
      <categories>
        <category>目录</category>
      </categories>
  </entry>
  <entry>
    <title>【转载】为不同的图形 API 编写着色器（Unity）</title>
    <url>/2023/03/18/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E5%BD%A2%20API%20%E7%BC%96%E5%86%99%E7%9D%80%E8%89%B2%E5%99%A8/</url>
    <content><![CDATA[<p>之前刚想写一篇DX12和OpenGL在Unity Shader中的差异，没想到官网就写了……</p>
<p>附上链接：<a href="https://docs.unity3d.com/cn/current/Manual/SL-PlatformDifferences.html">为不同的图形 API 编写着色器 - Unity 手册 (unity3d.com)</a> </p>
<p>以下正文</p>
<hr>
<p>在某些情况下，不同图形 API 之间的图形渲染行为方式存在差异。大多数情况下，Unity 编辑器会隐藏这些差异，但在某些情况下，编辑器无法为您执行此操作。下面列出了这些情况以及发生这些情况时需要采取的操作。</p>
<h2 id="渲染纹理坐标"><a href="#渲染纹理坐标" class="headerlink" title="渲染纹理坐标"></a>渲染纹理坐标</h2><p>垂直纹理坐标约定在两种类型的平台之间有所不同，分别是 Direct3D 类和 OpenGL 类平台。</p>
<ul>
<li><strong>Direct3D 类</strong>：顶部坐标为 0 并向下增加。此类型适用于 Direct3D、Metal 和游戏主机。</li>
<li><strong>OpenGL 类</strong>：底部坐标为 0 并向上增加。此类适用于 OpenGL 和 OpenGL ES。</li>
</ul>
<p>除了渲染到<a href="https://docs.unity3d.com/cn/current/Manual/class-RenderTexture.html">渲染纹理</a>的情况下，这种差异不会对您的项目产生任何影响。在 Direct3D 类平台上渲染到纹理时，Unity 会在内部上下翻转渲染。这样就会使坐标约定在平台之间匹配，并以 OpenGL 类平台约定作为标准。</p>
<p>在着色器中，有两种常见情况需要您采取操作确保不同的坐标约定不会在项目中产生问题，这两种情况就是图像效果和 UV 空间中的渲染。</p>
<span id="more"></span>
<h3 id="图像效果"><a href="#图像效果" class="headerlink" title="图像效果"></a>图像效果</h3><p>使用<a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@latest">图像效果</a>和抗锯齿时，系统不会翻转为图像效果生成的源纹理来匹配 OpenGL 类平台约定。在这种情况下，Unity 渲染到屏幕以获得抗锯齿效果，然后将渲染解析为渲染纹理，以便通过图像效果进行进一步处理。</p>
<p>如果您的图像效果是一次处理一个渲染纹理的简单图像效果，则 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.Blit.html">Graphics.Blit</a> 会处理不一致的坐标。但是，如果您在<a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@latest">图像效果</a>中一起处理多个<a href="https://docs.unity3d.com/cn/current/Manual/class-RenderTexture.html">渲染纹理</a>，则在 Direct3D 类平台中以及在您使用抗锯齿时，渲染纹理很可能以不同的垂直方向出现。要标准化坐标，必须在顶点着色器中手动上下“翻转”屏幕纹理，使其与 OpenGL 类坐标标准匹配。</p>
<p>以下代码示例演示了如何执行此操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 翻转纹理的采样：</span><br><span class="line">// 主纹理的</span><br><span class="line">// 纹理像素大小将具有负 Y。</span><br><span class="line"></span><br><span class="line"># if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">if (_MainTex_TexelSize.y &lt; 0)</span><br><span class="line">        uv.y = 1-uv.y;</span><br><span class="line"># endif</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.unity3d.com/cn/current/Manual/SL-GrabPass.html">GrabPass</a> 也出现了类似的情况。生成的渲染纹理实际上可能不会在 Direct3D 类（非 OpenGL 类）平台上进行上下翻转。如果着色器代码对 GrabPass 纹理进行采样，请使用 <a href="https://docs.unity3d.com/cn/current/Manual/SL-BuiltinFunctions.html">UnityCG include</a> 文件中的 <code>ComputeGrabScreenPos</code> 函数。</p>
<h3 id="在-UV-空间中渲染"><a href="#在-UV-空间中渲染" class="headerlink" title="在 UV 空间中渲染"></a>在 UV 空间中渲染</h3><p>在纹理坐标 (UV) 空间中渲染特殊效果或工具时，您可能需要调整着色器，以便在 Direct3D 类和 OpenGL 类系统之间进行一致渲染。您还可能需要在渲染到屏幕和渲染到纹理之间进行渲染调整。为进行此类调整，应上下翻转 Direct3D 类投影，使其坐标与 OpenGL 类投影坐标相匹配。</p>
<p><a href="https://docs.unity3d.com/cn/current/Manual/SL-UnityShaderVariables.html">内置变量</a> <code>ProjectionParams.x</code> 包含值 <code>+1</code> 或 <code>–1</code>。<code>-1</code> 表示投影已上下翻转以匹配 OpenGL 类投影坐标，而 <code>+1</code> 表示尚未翻转。 您可以在着色器中检查此值，然后执行不同的操作。下面的示例将检查是否已翻转投影，如果已翻转，则再次进行翻转，然后返回 UV 坐标以便匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float4 vert(float2 uv : TEXCOORD0) : SV_POSITION</span><br><span class="line">&#123;</span><br><span class="line">    float4 pos;</span><br><span class="line">    pos.xy = uv;</span><br><span class="line">    // 此示例使用上下翻转的投影进行渲染，</span><br><span class="line">    // 因此也翻转垂直 UV 坐标</span><br><span class="line">    if (_ProjectionParams.x &lt; 0)</span><br><span class="line">        pos.y = 1 - pos.y;</span><br><span class="line">    pos.z = 0;</span><br><span class="line">    pos.w = 1;</span><br><span class="line">    return pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="裁剪空间坐标"><a href="#裁剪空间坐标" class="headerlink" title="裁剪空间坐标"></a>裁剪空间坐标</h2><p>与纹理坐标类似，裁剪空间坐标（也称为投影后空间坐标）在 Direct3D 类和 OpenGL 类平台之间有所不同：</p>
<ul>
<li><strong>Direct3D 类</strong>：裁剪空间深度从近平面的 +1.0 到远平面的 0.0。此类型适用于 Direct3D、Metal 和游戏主机。</li>
<li><strong>OpenGL 类</strong>：裁剪空间深度从近平面的 –1.0 到远平面的 +1.0。此类适用于 OpenGL 和 OpenGL ES。</li>
</ul>
<p>在着色器代码内，可使用<a href="https://docs.unity3d.com/cn/current/Manual/SL-BuiltinMacros.html">内置宏</a> <code>UNITY_NEAR_CLIP_VALUE</code> 来获取基于平台的近平面值。</p>
<p>在脚本代码内，使用 <a href="https://docs.unity3d.com/cn/current/ScriptReference/GL.GetGPUProjectionMatrix.html">GL.GetGPUProjectionMatrix</a> 将 Unity 的坐标系（遵循 OpenGL 类约定）转换为 Direct3D 类坐标（如果这是平台所期望的）。</p>
<h2 id="着色器计算的精度"><a href="#着色器计算的精度" class="headerlink" title="着色器计算的精度"></a>着色器计算的精度</h2><p>要避免精度问题，请确保在目标平台上测试着色器。移动设备和 PC 中的 GPU 在处理浮点类型方面有所不同。PC GPU 将所有浮点类型（浮点精度、半精度和固定精度）视为相同；PC GPU 使用完整 32 位精度进行所有计算，而许多移动设备 GPU 并不是这样做。</p>
<p>有关详细信息，请参阅<a href="https://docs.unity3d.com/cn/current/Manual/SL-DataTypesAndPrecision.html">数据类型和精度</a>的文档。</p>
<h2 id="着色器中的-const-声明"><a href="#着色器中的-const-声明" class="headerlink" title="着色器中的 const 声明"></a>着色器中的 const 声明</h2><p><code>const</code> 的使用在 Microsoft HSL（请参阅 <a href="http://msdn.microsoft.com/">msdn.microsoft.com</a>）和 OpenGL 的 GLSL（请参阅 <a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language">Wikipedia</a>）着色器语言之间有所不同。</p>
<ul>
<li>Microsoft 的 HLSL <code>const</code> 与 C# 和 C++ 中的含义大致相同：声明的变量在其作用域内是只读的，但可按任何方式初始化。</li>
<li>OpenGL 的 GLSL <code>const</code> 表示变量实际上是编译时常量，因此必须使用编译时约束（文字值或其他对于 <code>const</code> 的计算）进行初始化。</li>
</ul>
<p>最好是遵循 OpenGL 的 GLSL 语义，并且只有当变量真正不变时才将变量声明为 <code>const</code>。避免使用其他一些可变值初始化 <code>const</code> 变量（例如，作为函数中的局部变量）。这一原则也适用于 Microsoft 的 HLSL，因此以这种方式使用 <code>const</code> 可以避免在某些平台上混淆错误。</p>
<h2 id="着色器使用的语义"><a href="#着色器使用的语义" class="headerlink" title="着色器使用的语义"></a>着色器使用的语义</h2><p>要让着色器在所有平台上运行，一些着色器值应该使用以下语义：</p>
<ul>
<li><strong>顶点着色器输出（裁剪空间）位置</strong>：<code>SV_POSITION</code>。有时，着色器使用 POSITION 语义来使着色器在所有平台上运行。请注意，这不适用于 Sony PS4 或有曲面细分的情况。</li>
<li><strong>片元着色器输出颜色</strong>：<code>SV_Target</code>。有时，着色器使用 <code>COLOR</code> 或 <code>COLOR0</code> 来使着色器在所有平台上运行。请注意，这不适用于 Sony PS4。</li>
</ul>
<p>将网格渲染为点时，从顶点着色器输出 <code>PSIZE</code> 语义（例如，将其设置为 1）。某些平台（如 OpenGL ES 或 Metal）在未从着色器写入点大小时会将点大小视为“未定义”。</p>
<p>有关更多详细信息，请参阅有关<a href="https://docs.unity3d.com/cn/current/Manual/SL-ShaderSemantics.html">着色器语义</a>的文档。</p>
<h2 id="Direct3D-着色器编译器语法"><a href="#Direct3D-着色器编译器语法" class="headerlink" title="Direct3D 着色器编译器语法"></a>Direct3D 着色器编译器语法</h2><p>Direct3D 平台使用 Microsoft 的 <a href="https://docs.unity3d.com/cn/current/Manual/shader-compilation.html">HLSL 着色器编译器</a>。对于各种细微的着色器错误，HLSL 编译器比其他编译器更严格。例如，它不接受未正确初始化的函数输出值。</p>
<p>使用此编译器时，您可能遇到的最常见情况是：</p>
<ul>
<li>具有 <code>out</code> 参数的<a href="https://docs.unity3d.com/cn/current/Manual/SL-SurfaceShaders.html">表面着色器</a>顶点修改器。按如下方式初始化输出：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void vert (inout appdata_full v, out Input o) </span><br><span class="line">    &#123;</span><br><span class="line">      **UNITY_INITIALIZE_OUTPUT(Input,o);**</span><br><span class="line">      // ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>部分初始化的值。例如，函数返回 <code>float4</code>，但代码只设置它的 <code>.xyz</code> 值。如果只需要三个值，请设置所有值或更改为 <code>float3</code>。</li>
<li>在顶点着色器中使用 <code>tex2D</code>。这是无效的，因为顶点着色器中不存在 UV 导数。这种情况下，您需要采样显式 Mip 级别；例如，使用 <code>tex2Dlod</code> (<code>tex, float4(uv,0,0)</code>)。此外，还需要添加 <code>#pragma target 3.0</code>，因为 <code>tex2Dlod</code> 是着色器模型 3.0 的功能。</li>
</ul>
<h2 id="着色器中的-DirectX-11-DX11-HLSL-语法"><a href="#着色器中的-DirectX-11-DX11-HLSL-语法" class="headerlink" title="着色器中的 DirectX 11 (DX11) HLSL 语法"></a>着色器中的 DirectX 11 (DX11) HLSL 语法</h2><p><a href="https://docs.unity3d.com/cn/current/Manual/SL-SurfaceShaders.html">表面着色器</a>编译管线的某些部分不能理解特定于 DirectX 11 的 HLSL（Microsoft 的着色器语言）语法。</p>
<p>如果您正在使用 HLSL 功能（比如 <code>StructuredBuffers</code>、<code>RWTextures</code> 和其他非 DirectX 9 语法），请将它们包裹在 DirectX X11 专用的预处理器宏中，如下例所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ifdef SHADER_API_D3D11</span><br><span class="line">// DirectX11 专用代码，例如</span><br><span class="line">StructuredBuffer&lt;float4&gt; myColors;</span><br><span class="line">RWTexture2D&lt;float4&gt; myRandomWriteTexture;</span><br><span class="line"># endif</span><br></pre></td></tr></table></figure>
<h2 id="使用着色器帧缓冲提取"><a href="#使用着色器帧缓冲提取" class="headerlink" title="使用着色器帧缓冲提取"></a>使用着色器帧缓冲提取</h2><p>一些 GPU（最明显的是 iOS 上基于 PowerVR 的 GPU）允许您通过提供当前片元颜色作为片元着色器的输入来进行某种可编程混合（请参阅 <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_shader_framebuffer_fetch.txt">khronos.org</a> 上的 <code>EXT_shader_framebuffer_fetch</code>）。</p>
<p>可在 Unity 中编写使用帧缓冲提取功能的着色器。要执行此操作，请在使用 HLSL（Microsoft 的着色语言，请参阅 <a href="http://msdn.microsoft.com/">msdn.microsoft.com</a>）或 Cg（Nvidia 的着色语言，请参阅 <a href="http://www.nvidia.co.uk/">nvidia.co.uk</a>）编写片元着色器时使用 <code>inout</code> 颜色参数。</p>
<p>以下示例采用的是 Cg 语言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPROGRAM</span><br><span class="line">// 只为可能支持该功能的平台（目前是 gles、gles3 和 metal）</span><br><span class="line">// 编译着色器</span><br><span class="line"># pragma only_renderers framebufferfetch</span><br><span class="line"></span><br><span class="line">void frag (v2f i, inout half4 ocol : SV_Target)</span><br><span class="line">&#123;</span><br><span class="line">    // ocol 可以被读取（当前帧缓冲区颜色）</span><br><span class="line">    // 并且可以被写入（将颜色更改为该颜色）</span><br><span class="line">    // ...</span><br><span class="line">&#125;   </span><br><span class="line">ENDCG</span><br></pre></td></tr></table></figure>
<h2 id="着色器中的深度-Z-方向"><a href="#着色器中的深度-Z-方向" class="headerlink" title="着色器中的深度 (Z) 方向"></a>着色器中的深度 (Z) 方向</h2><p>深度 (Z) 方向在不同的着色器平台上不同。</p>
<p><strong>DirectX 11, DirectX 12, Metal: Reversed direction</strong></p>
<ul>
<li>深度 (Z) 缓冲区在近平面处为 1.0，在远平面处减小到 0.0。</li>
<li>裁剪空间范围是 [near,0]（表示近平面处的近平面距离，在远平面处减小到 0.0）。</li>
</ul>
<p><strong>其他平台：传统方向</strong></p>
<ul>
<li>深度 (Z) 缓冲区值在近平面处为 0.0，在远平面处为 1.0。</li>
<li>裁剪空间取决于具体平台：<ul>
<li>在 Direct3D 类平台上，范围是 [0,far]（表示在近平面处为 0.0，在远平面处增加到远平面距离）。</li>
<li>在 OpenGL 类平台上，范围是 [-near,far]（表示在近平面处为负的近平面距离，在远平面处增加到远平面距离）。</li>
</ul>
</li>
</ul>
<p>请注意，使反转方向深度 (Z) 与浮点深度缓冲区相结合，可显著提高相对于传统方向的深度缓冲区精度。这样做的优点是降低 Z 坐标的冲突并改善阴影，特别是在使用小的近平面和大的远平面时。</p>
<p>因此，在使用深度 (Z) 发生反转的平台上的着色器时：</p>
<ul>
<li>定义了 UNITY_REVERSED_Z。</li>
<li><code>_CameraDepth</code> 纹理的纹理范围是 1（近平面）到 0（远平面）。</li>
<li>裁剪空间范围是“near”（近平面）到 0（远平面）。</li>
</ul>
<p>但是，以下宏和函数会自动计算出深度 (Z) 方向的任何差异：</p>
<ul>
<li><code>Linear01Depth(float z)</code></li>
<li><code>LinearEyeDepth(float z)</code></li>
<li>UNITY_CALC_FOG_FACTOR(coord)</li>
</ul>
<h3 id="提取深度缓冲区"><a href="#提取深度缓冲区" class="headerlink" title="提取深度缓冲区"></a>提取深度缓冲区</h3><p>如果要手动提取深度 (Z) 缓冲区值，则可能需要检查缓冲区方向。以下是执行此操作的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float z = tex2D(_CameraDepthTexture, uv);</span><br><span class="line"># if defined(UNITY_REVERSED_Z)</span><br><span class="line">    z = 1.0f - z;</span><br><span class="line"># endif</span><br></pre></td></tr></table></figure>
<h3 id="使用裁剪空间"><a href="#使用裁剪空间" class="headerlink" title="使用裁剪空间"></a>使用裁剪空间</h3><p>如果要手动使用裁剪空间 (Z) 深度，则可能还需要使用以下宏来抽象化平台差异：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float clipSpaceRange01 = UNITY_Z_0_FAR_FROM_CLIPSPACE(rawClipSpace);</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：此宏不会改变 OpenGL 或 OpenGL ES 平台上的裁剪空间，因此在这些平台上，此宏返回“-near”1（近平面）到 far（远平面）之间的值。</p>
<h3 id="投影矩阵"><a href="#投影矩阵" class="headerlink" title="投影矩阵"></a>投影矩阵</h3><p>如果处于深度 (Z) 发生反转的平台上，则 <a href="https://docs.unity3d.com/cn/current/ScriptReference/GL.GetGPUProjectionMatrix.html">GL.GetGPUProjectionMatrix()</a> 返回一个还原了 z 的矩阵。 但是，如果要手动从投影矩阵中进行合成（例如，对于自定义阴影或深度渲染），您需要通过脚本按需自行还原深度 (Z) 方向。</p>
<p>以下是执行此操作的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var shadowProjection = Matrix4x4.Ortho(...); //阴影摄像机投影矩阵</span><br><span class="line">var shadowViewMat = ...     //阴影摄像机视图矩阵</span><br><span class="line">var shadowSpaceMatrix = ... //从裁剪空间到阴影贴图纹理空间</span><br><span class="line">    </span><br><span class="line">//当引擎通过摄像机投影计算设备投影矩阵时，</span><br><span class="line">//&quot;m_shadowCamera.projectionMatrix&quot;被隐式反转</span><br><span class="line">m_shadowCamera.projectionMatrix = shadowProjection; </span><br><span class="line"></span><br><span class="line">//&quot;shadowProjection&quot;在连接到&quot;m_shadowMatrix&quot;之前被手动翻转，</span><br><span class="line">//因为它被视为着色器的其他矩阵。</span><br><span class="line">if(SystemInfo.usesReversedZBuffer) </span><br><span class="line">&#123;</span><br><span class="line">    shadowProjection[2, 0] = -shadowProjection[2, 0];</span><br><span class="line">    shadowProjection[2, 1] = -shadowProjection[2, 1];</span><br><span class="line">    shadowProjection[2, 2] = -shadowProjection[2, 2];</span><br><span class="line">    shadowProjection[2, 3] = -shadowProjection[2, 3];</span><br><span class="line">&#125;</span><br><span class="line">    m_shadowMatrix = shadowSpaceMatrix * shadowProjection * shadowViewMat;</span><br></pre></td></tr></table></figure>
<h3 id="深度-Z-偏差"><a href="#深度-Z-偏差" class="headerlink" title="深度 (Z) 偏差"></a>深度 (Z) 偏差</h3><p>Unity 自动处理深度 (Z) 偏差，以确保其与 Unity 的深度 (Z) 方向匹配。但是，如果要使用本机代码渲染插件，则需要在 C 或 C++ 代码中消除（反转）深度 (Z) 偏差。</p>
<h4 id="深度-Z-方向检查工具"><a href="#深度-Z-方向检查工具" class="headerlink" title="深度 (Z) 方向检查工具"></a>深度 (Z) 方向检查工具</h4><ul>
<li>使用 <a href="https://docs.unity3d.com/cn/current/ScriptReference/SystemInfo-usesReversedZBuffer.html">SystemInfo.usesReversedZBuffer</a> 可确认所在平台是否使用反转深度 (Z)。</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>图形 API</tag>
        <tag>Unity</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202 作业汇总</title>
    <url>/2023/02/20/Games202HW/</url>
    <content><![CDATA[<h1 id="阴影PCSS"><a href="#阴影PCSS" class="headerlink" title="阴影PCSS"></a>阴影PCSS</h1><p><img src="/2023/02/20/Games202HW/PCSS.png" alt="PCSS"></p>
<h1 id="Precomputed-Radiance-Transfer，PRT"><a href="#Precomputed-Radiance-Transfer，PRT" class="headerlink" title="Precomputed Radiance Transfer，PRT"></a>Precomputed Radiance Transfer，PRT</h1><p><img src="/2023/02/20/Games202HW/prt.png" alt="prt"></p>
<p><img src="/2023/02/20/Games202HW/prt2.png" alt="prt2"></p>
<h1 id="屏幕空间反射"><a href="#屏幕空间反射" class="headerlink" title="屏幕空间反射"></a>屏幕空间反射</h1><p><img src="/2023/02/20/Games202HW/SSR.png" alt="SSR"></p>
<h1 id="Kulla-Conty-Approximation"><a href="#Kulla-Conty-Approximation" class="headerlink" title="Kulla-Conty Approximation"></a>Kulla-Conty Approximation</h1><p><img src="/2023/02/20/Games202HW/Kulla.png" alt="Kulla"></p>
<h1 id="TAA"><a href="#TAA" class="headerlink" title="TAA"></a>TAA</h1><p><img src="/2023/02/20/Games202HW/un.png" alt="un"></p>
<p><img src="/2023/02/20/Games202HW/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-7 A Glimpse of Industrial Solution</title>
    <url>/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/</url>
    <content><![CDATA[<h1 id="a-Anti-Aliasing"><a href="#a-Anti-Aliasing" class="headerlink" title="a). Anti-Aliasing"></a>a). Anti-Aliasing</h1><h2 id="a-1-Temporal-Anti-Aliasing-TAA"><a href="#a-1-Temporal-Anti-Aliasing-TAA" class="headerlink" title="a.1). Temporal Anti-Aliasing (TAA)"></a>a.1). Temporal Anti-Aliasing (TAA)</h2><ul>
<li><strong>复用先前帧的样本</strong>，假设画面不动，就可在单个像素内随时间规律移动感知点，进行（加权）平均；<ul>
<li><strong>为何规律移动感知点：</strong> 随机采样会引入高频噪声；</li>
</ul>
</li>
<li>如画面移动，则和频域降噪相同，使用Motion vector找到对应像素，再规律移动感知点。同时也可引入Clamp和Detection的操作；</li>
</ul>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/TAA01.png" alt="TAA01"></p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/TAA02.png" alt="TAA02" style="zoom: 33%;"></p>
<h2 id="a-2-MSAA-vs-SSAA"><a href="#a-2-MSAA-vs-SSAA" class="headerlink" title="a.2). MSAA vs. SSAA"></a>a.2). MSAA vs. SSAA</h2><p><strong>SSAA：</strong></p>
<ul>
<li>相当于用更大分辨率渲染后降采样，做2倍的SSAA，相当于一个像素做4次shading；</li>
<li>质量最好，但是性能开销大；</li>
</ul>
<p><strong>MSAA：</strong></p>
<ul>
<li><p>在一个像素内，<strong>同一个图元只着色一次</strong>；(如图，0、2、3为图元A，着色一次(左边的绿点)；1为图元B，着色一次；)</p>
<ul>
<li>因此，MSAA会维护一张表，表中记录当前感知点记录的color(albedo?) 和 深度</li>
</ul>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/MSAA01.png" alt="MSAA01" style="zoom:50%;"></p>
</li>
<li><p>在像素间复用样本；</p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/MSAA02.png" alt="MSAA02" style="zoom:50%;"></p>
</li>
</ul>
<h2 id="a-3-Image-Based-Anti-Aliasing-Solution"><a href="#a-3-Image-Based-Anti-Aliasing-Solution" class="headerlink" title="a.3). Image Based Anti-Aliasing Solution"></a>a.3). Image Based Anti-Aliasing Solution</h2><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/ImageBasedAA.png" alt="ImageBasedAA"></p>
<h2 id="a-4-Note"><a href="#a-4-Note" class="headerlink" title="a.4). Note"></a>a.4). Note</h2><ul>
<li><strong><font color="red">G-buffers一定不能做抗锯齿</font></strong></li>
</ul>
<span id="more"></span>
<h1 id="b-Temporal-Super-Resolution"><a href="#b-Temporal-Super-Resolution" class="headerlink" title="b). Temporal Super Resolution"></a>b). Temporal Super Resolution</h1><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/DLSS01.png" alt="DLSS01"></p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/DLSS02.png" alt="DLSS02"></p>
<ul>
<li>通过深度学习告诉管线，<strong>如何使用历史帧的信息</strong>；</li>
</ul>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/DLSS03.png" alt="DLSS03" style="zoom:50%;"></p>
<h1 id="c-Deferred-Shading-详见百人计划图形3-4-延迟渲染管线"><a href="#c-Deferred-Shading-详见百人计划图形3-4-延迟渲染管线" class="headerlink" title="c). Deferred Shading(详见百人计划图形3.4 延迟渲染管线)"></a>c). Deferred Shading(详见百人计划图形3.4 延迟渲染管线)</h1><p>主要解决<strong>大量光照渲染</strong>和<strong>overdraw</strong>（传统渲染如果从后往前渲染，那所有fragment都会被shaded一次）的方案。</p>
<p>可以将延迟渲染(Deferred Rendering)理解为先将所有物体都先绘制到屏幕空间的缓冲（即<strong>G-buffer</strong>，Geometric Buffer，几何缓冲区）中，再逐光源对该缓冲进行着色的过程，从而避免了因计算被深度测试丢弃的片元的着色而产生的不必要的开销。也就是说延迟渲染<strong>基本思想</strong>是，<strong>先执行深度测试（应该也包括其他测试），再进行着色计算</strong>，将本来在物空间（三维空间）进行光照计算放到了<strong>像空间</strong>（二维空间）进行处理。</p>
<p>对应于正向渲染O(m*n)的 复杂度，经典的延迟渲染复杂度为O(n+m)。</p>
<h2 id="c-1-流程"><a href="#c-1-流程" class="headerlink" title="c.1). 流程"></a>c.1). 流程</h2><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/Deffer_Workflow.png" alt="Deffer_Workflow" style="zoom:33%;"></p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/Deffer_Workflow2.jpg" alt="Deffer_Workflow2"></p>
<p>可以将延迟渲染理解为两个Pass的过程：</p>
<ol>
<li><p><strong>几何处理阶段(Geometry Pass)。</strong>这个阶段中，我们获取对象的各种<strong>几何信息</strong>（Position、Normal、Albedo、Specular等），并将第二步所需的各种数据储存（也就是渲染）到多个<strong>G-buffer</strong>中；</p>
<ul>
<li>由于有深度测试，所以最终写入G-buffer中的，都是离摄像机最近的片元的集合属性，这就意味着，在G-buffer中的片元必定要进行光照计算。</li>
</ul>
</li>
<li><p><strong>光照处理阶段(Lighting Pass)。</strong>在这个pass中，我们只需渲染出一个屏幕大小的二维矩形，使用第一步在G-buffer中存储的数据对此矩阵的每一个片段<strong>计算场景的光照</strong>；光照计算的过程还是和正向渲染以前一样，只是现在<strong>我们需要从对应的G-buffer而不是顶点着色器(和一些uniform变量)那里获取输入变量了</strong>。</p>
</li>
</ol>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/Deffer_Workflow3.jpg" alt="Deffer_Workflow3"></p>
<h2 id="c-2-延迟渲染的优缺点"><a href="#c-2-延迟渲染的优缺点" class="headerlink" title="c.2). 延迟渲染的优缺点"></a>c.2). 延迟渲染的优缺点</h2><ul>
<li><p><strong>优点：</strong></p>
<ol>
<li>Complexity: O(#fragment <em> #light) -&gt; O(#vis. frag. </em> #light)</li>
<li>只渲染可见的像素，节省计算量</li>
<li>用更少的shader</li>
<li>对后处理支持良好（例如深度信息：直接拿G-buffer中的就行。而前向渲染需要单独Pass再渲染一张深度图）</li>
<li>在大量光源的场景优势尤其明显；</li>
</ol>
</li>
<li><p><strong>缺点：</strong></p>
<ol>
<li>内存开销较大，且占用了大量的显存带宽；<ul>
<li>需要传递G-Buffer；</li>
<li>有时需要用到G-Buffer的信息，如深度图做后处理，那将不会进行Clear；</li>
</ul>
</li>
<li>只能用同一套Lighting Pass；</li>
<li>对透明物体的渲染存在问题。在这点上需要结合正向渲染进行渲染；</li>
<li>对多重采样抗锯齿（MultiSampling Anti-Aliasing, MSAA）等硬件抗锯齿的支持不友好，主要因为需开启MRT；<ul>
<li>MSAA是依赖于子像素，而Deffered shading<strong>处在光栅化之后（单个像素内值相等）</strong>，传输数据是通过G-Buffer；</li>
<li>但可使用TAA</li>
</ul>
</li>
</ol>
<p><a href="https://www.zhihu.com/question/20236638/answer/44821615">问FXAA、FSAA与MSAA有什么区别？效果和性能上哪个好？ - 文刀秋二的回答 - 知乎</a></p>
<p><a href="https://catlikecoding.com/unity/tutorials/rendering/part-13/">https://catlikecoding.com/unity/tutorials/rendering/part-13/</a></p>
</li>
</ul>
<h1 id="d-Tiled-Shading"><a href="#d-Tiled-Shading" class="headerlink" title="d). Tiled Shading"></a>d). Tiled Shading</h1><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/Tiled Shading.png" alt="Tiled Shading"></p>
<ul>
<li>基于Deferred Shading</li>
<li>并不是所有光源都会对Tile有贡献</li>
<li>Complexity: O(#vis. frag. <em> #light) -&gt; O(#vis. frag. </em> avg #light per tile)</li>
</ul>
<h1 id="e-Clustered-Shading-群组渲染"><a href="#e-Clustered-Shading-群组渲染" class="headerlink" title="e). Clustered Shading(群组渲染)"></a>e). Clustered Shading(群组渲染)</h1><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/ClusteredShading.png" alt="ClusteredShading"></p>
<ul>
<li>在Tiled Shading的基础上再对Depth分段；</li>
<li>Complexity: O(#vis. frag. <em> avg #light per tile) -&gt; O(#vis. frag. </em> avg #light per cluster)</li>
</ul>
<h1 id="f-Level-of-Detail-Solutions"><a href="#f-Level-of-Detail-Solutions" class="headerlink" title="f). Level of Detail Solutions"></a>f). Level of Detail Solutions</h1><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/LoD01.png" alt="LoD01"></p>
<ul>
<li>cascaded: 级联</li>
</ul>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/LoD02.png" alt="LoD02"></p>
<ul>
<li>生成时，不同Level之间有一定重叠，用于过渡时Lerp</li>
</ul>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/LoD03.png" alt="LoD03"></p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/LoD04.png" alt="LoD04"></p>
<h1 id="g-Global-Illumination-Solutions"><a href="#g-Global-Illumination-Solutions" class="headerlink" title="g). Global Illumination Solutions"></a>g). Global Illumination Solutions</h1><p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/GI01.png" alt="GI01"></p>
<p><img src="/2023/02/20/Games202_07_A%20Glimpse%20of%20Industrial%20Solution/GI02.png" alt="GI02"></p>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-6 Real-time Ray-Tracing</title>
    <url>/2023/02/19/Games202_06_Real-time%20Ray-Tracing/</url>
    <content><![CDATA[<h1 id="a-Introduction"><a href="#a-Introduction" class="headerlink" title="a). Introduction"></a>a). Introduction</h1><p><strong>Real-time Ray-Tracing vs. Ray-Tracing:</strong></p>
<ul>
<li><p>Real-time Ray-Tracing == <strong>1/few sample per pixel(SPP)</strong></p>
</li>
<li><p><strong>Key technology:</strong> Denoising(降噪)</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/RTRT00.png" alt="RTRT00" style="zoom: 50%;"></p>
</li>
</ul>
<p><strong>一个光路样本（1 SPP path tracing）：</strong></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/RTRT01.png" alt="RTRT01" style="zoom:50%;"></p>
<ul>
<li><p><strong>第一步是Rasterization，而不是Ray的原因：</strong> 从摄影机发出经过各个像素的光线，即等同于进行一次光栅化，找到Primary hitpoint</p>
<ul>
<li><p>第一步如做光线求交，则为<strong>光线投射（Ray Casting）</strong>。而<strong>光线投射和光栅化没有本质区别</strong>（都是渲染一点的DI，只不过相当于深度测试被光线求交替代了）</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/光线投射.png" alt="光线投射" style="zoom: 50%;"></p>
<blockquote id="fn_Ray Casting">
<sup>Ray Casting</sup>. 注意和光线追踪的区别，Ray Casting基本只求交一次，而不迭代追踪<a href="#reffn_Ray Casting" title="Jump back to footnote [Ray Casting] in the text."> &#8617;</a>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/RTRT02.png" alt="RTRT02" style="zoom:50%;"></p>
<ul>
<li>传统的降噪方式不是效果不好，就是太慢或不靠谱</li>
</ul>
<h1 id="b-Temporal-denoising-时域降噪"><a href="#b-Temporal-denoising-时域降噪" class="headerlink" title="b). Temporal denoising(时域降噪)"></a>b). Temporal denoising(时域降噪)</h1><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Denoising01.png" alt="Denoising01" style="zoom:50%;"></p>
<p><strong>Key idea:</strong></p>
<ul>
<li>复用<strong>前面已经降噪过的一帧</strong>；</li>
<li>使用<strong>motion vector</strong>来找到先前的位置；</li>
<li>本质上是提高采样率；</li>
</ul>
<h2 id="b-1-G-Buffer"><a href="#b-1-G-Buffer" class="headerlink" title="b.1). G-Buffer"></a>b.1). G-Buffer</h2><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/G-Buffer01.png" alt="G-Buffer01"></p>
<h2 id="b-2-Back-Projection"><a href="#b-2-Back-Projection" class="headerlink" title="b.2). Back Projection"></a>b.2). Back Projection</h2><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/BackProj01.png" alt="BackProj01" style="zoom:50%;"></p>
<ul>
<li><strong>Key idea：</strong>不同帧之间相同的点，意味着有着<strong>相同的世界位置（如不移动）或模型空间位置</strong>；</li>
</ul>
<p><strong>How：</strong></p>
<ul>
<li>如果世界坐标 $s$ 存在于G-Buffer中，即可直接使用；</li>
<li>否则，$s = M^{-1}V^{-1}P^{-1}E^{-1}x$ （$E$ 为视口变换，即NDF到Viewport/Screen）</li>
<li>运动（Motion）情况已知，$s’ = T^{-1} s$，$s’$ 为运动前的位置，$T$ 为运动的矩阵</li>
<li>在 $i-1$ 帧，$s$ 对应的屏幕空间位置为 $x’=P’V’M’s’$</li>
</ul>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/BackProj03.png" alt="BackProj03" style="zoom:50%;"></p>
<span id="more"></span>
<h2 id="b-3-issues"><a href="#b-3-issues" class="headerlink" title="b.3). issues"></a>b.3). issues</h2><ul>
<li><p>Failure case 1: 切换场景</p>
<ul>
<li><strong>burn-in period</strong>(即需要一定时间积累降噪质量足够好的帧，如UE中的burn-in)</li>
</ul>
</li>
<li><p>Failure case 2: walking backwards in a hallway</p>
<ul>
<li><strong>screen space issue</strong>（当前帧出现上一帧屏幕外的信息）</li>
</ul>
</li>
<li><p>Failure case 3: suddenly appearing background</p>
<ul>
<li><p><strong>disocclusion</strong>（上一帧被遮挡的物体，当前帧未被遮挡）</p>
</li>
<li><p>可能造成<strong>拖尾（lagging）</strong></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/TemporalFailure01.png" alt="TemporalFailure01" style="zoom: 67%;"></p>
</li>
</ul>
</li>
</ul>
<h2 id="b-4-Adjustments-to-Temp-Failure"><a href="#b-4-Adjustments-to-Temp-Failure" class="headerlink" title="b.4). Adjustments to Temp. Failure"></a>b.4). Adjustments to Temp. Failure</h2><script type="math/tex; mode=display">
\bar{C}^{(i)}=\alpha \bar{C}^{(i)}+(1-\alpha) C^{(i-1)}</script><ul>
<li><p>Clamping</p>
<ul>
<li>Clamp上一帧的信息，使其接近当前帧。即Clamp $C^{(i-1)}$ </li>
</ul>
</li>
<li><p>Detection(即不符合要求时，不使用Temp. denoising)</p>
<ul>
<li>Use e.g. object ID to detect temporal failure（ID通道）</li>
<li>调整$\alpha$，上一帧不可靠时，调高$\alpha$<ul>
<li>Problem：重新引入更多噪声；</li>
</ul>
</li>
<li>可能需要增强空域降噪；</li>
</ul>
</li>
</ul>
<h2 id="b-5-More-Temporal-Failure"><a href="#b-5-More-Temporal-Failure" class="headerlink" title="b.5). More Temporal Failure"></a>b.5). More Temporal Failure</h2><ul>
<li><p>Detaching/lagging shadows(阴影拖尾)</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Failure01.png" alt="Failure01"></p>
</li>
<li><p>Temporal failure can also happen in shading</p>
<ul>
<li><p>如反射滞后；</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Failure02.png" alt="Failure02" style="zoom:67%;"></p>
</li>
</ul>
</li>
</ul>
<h1 id="c-Implementation-实现"><a href="#c-Implementation-实现" class="headerlink" title="c). Implementation(实现)"></a>c). Implementation(实现)</h1><p>eg. Gaussian filter</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Implementation01.png" alt="Implementation01"></p>
<ul>
<li>滤波核可以不归一化，但对于结果需要归一化；</li>
</ul>
<h2 id="c-1-Bilateral-filtering-双边滤波"><a href="#c-1-Bilateral-filtering-双边滤波" class="headerlink" title="c.1). Bilateral filtering(双边滤波)"></a>c.1). Bilateral filtering(双边滤波)</h2><p><strong>观察：</strong></p>
<ul>
<li>高斯模糊会将边界模糊，但我们需要保留边界；</li>
<li>边界 = 颜色差异大</li>
</ul>
<p><strong>目的：</strong></p>
<ul>
<li><p>模糊同时保留边界；</p>
</li>
<li><p>当像素$j$ 和像素$i$ 颜色差异大时，$j$贡献变少（权重变小）</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/BilateralFiltering01.png" alt="BilateralFiltering01"></p>
<ul>
<li>像素$a$ 位置为$(i,j)$，像素$b$ 位置为$(k,l)$；</li>
<li>$I(i,j)$ 表示$(i,j)$位置的像素值；</li>
<li>$\sigma$ 控制对应项的作用范围，其值越大，对应项的局部影响<strong>范围</strong>就越大，分子变化影响越小</li>
<li>类似于两个不同形式的高斯核<strong>相乘</strong>（指数相加），即两个标准（距离，颜色），2 metrics</li>
<li>可以根据需求调整，如较为看重color dist. 对weight的影响，就可以将第二项的2 调为 1；</li>
</ul>
</li>
</ul>
<h2 id="c-2-Joint-Bilateral-filtering-联合双边滤波"><a href="#c-2-Joint-Bilateral-filtering-联合双边滤波" class="headerlink" title="c.2). Joint Bilateral filtering(联合双边滤波)"></a>c.2). Joint Bilateral filtering(联合双边滤波)</h2><p><strong>观察：</strong></p>
<ul>
<li>Gaussian filtering: 1 metric (distance)</li>
<li>Bilateral filtering: 2 metrics (position dist. &amp; color dist.)</li>
<li>因此，我们可以<strong>考虑更多的标准（metric），丰富滤波核，进行滤波（Key idea）</strong></li>
</ul>
<p><strong>定义：</strong>Joint Bilateral filtering是一系列考虑更多标准的滤波方法。</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/JointBilateralFiltering01.png" alt="JointBilateralFiltering01"></p>
<p><strong>Note:</strong></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/JointBilateralFiltering02.png" alt="JointBilateralFiltering02"></p>
<hr>
<h3 id="c-2-1-Example"><a href="#c-2-1-Example" class="headerlink" title="c.2.1). Example"></a>c.2.1). Example</h3><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/JointBilateralFiltering_Example01.png" alt="JointBilateralFiltering_Example01"></p>
<h2 id="c-2-Large-Filters"><a href="#c-2-Large-Filters" class="headerlink" title="c.2). Large Filters"></a>c.2). Large Filters</h2><p>对于大的滤波核，性能开销会非常大(e.g. 64x64)</p>
<h3 id="Solution-1-Separate-Passes"><a href="#Solution-1-Separate-Passes" class="headerlink" title="Solution 1: Separate Passes"></a>Solution 1: Separate Passes</h3><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Large_Solution01.png" alt="Large_Solution01"></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Large_Solution02.png" alt="Large_Solution02"></p>
<ul>
<li>将NxN大小的2D高斯核，拆分为 1xN 和 Nx1 的1D高斯核。通过两个Pass进行滤波；（<strong>注意：</strong> 并不是所有滤波核都可拆分）</li>
</ul>
<hr>
<p><strong>原因：</strong></p>
<script type="math/tex; mode=display">
w(i, j, k, l)=\exp \left(-\frac{(i-k)^{2}+(j-l)^{2}}{2 \sigma_{d}^{2}}\right)</script><p>2D高斯核的形式是可拆分的，如下：</p>
<script type="math/tex; mode=display">
G_{2D}(x, y) = G_{1D}(x) \cdot G_{1D}(y)</script><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Large_Solution03.png" alt="Large_Solution03"></p>
<ul>
<li><strong><font color="red">理论上</font>，双边滤波/联合双边滤波是不可拆分的</strong>（实现上，只要滤波核不特别大，如超过32x32，就可采用拆分方法）</li>
</ul>
<hr>
<h3 id="Solution-2-Progressively-Growing-Sizes-逐步增加尺寸"><a href="#Solution-2-Progressively-Growing-Sizes-逐步增加尺寸" class="headerlink" title="Solution 2: Progressively Growing Sizes(逐步增加尺寸)"></a>Solution 2: Progressively Growing Sizes(逐步增加尺寸)</h3><p><strong>介绍：</strong> 逐Pass增加filter (间隙的)size，类似空洞卷积。第一次间隙为0，第二次间隙为1……</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/ATW01.png" alt="ATW01"></p>
<hr>
<p><strong>原因：</strong></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/ATW02.png" alt="ATW02"></p>
<ul>
<li><p><strong>逐步增加尺寸：</strong> 逐步减小信号的最高频率；</p>
</li>
<li><p><strong>增加采样间隙：</strong> 降低采样频率，频谱搬移距离逐渐减小；</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/频谱搬移.png" alt="频谱搬移" style="zoom: 67%;"></p>
</li>
</ul>
<ul>
<li><strong>逻辑：</strong> 减少信号高频部分，并增大采样间隙（频谱搬移，将信号左边界搬移到有边界），使得不会产生信号混叠；</li>
</ul>
<hr>
<h1 id="d-Outlier-Removal-and-temporal-clamping"><a href="#d-Outlier-Removal-and-temporal-clamping" class="headerlink" title="d). Outlier Removal(and temporal clamping)"></a>d). Outlier Removal(and temporal clamping)</h1><h2 id="d-1-Introduction"><a href="#d-1-Introduction" class="headerlink" title="d.1). Introduction"></a>d.1). Introduction</h2><p><strong>Outlier:</strong> 场景中一些特别亮的噪声，即萤火虫噪声；</p>
<ul>
<li><strong>出现原因：</strong> 蒙特卡洛积分时，由于采样率不足，会出现特别亮和特别暗的点；</li>
<li><p>无法用滤波解决，滤波后仍会存在，甚至从一点变为亮的色块（<strong>blocky</strong>）</p>
</li>
<li><p><strong>解决方法：</strong> Outlier removal(clamp)</p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/OutlierRemoval01.png" alt="OutlierRemoval01"></p>
</li>
</ul>
<p><strong>Outlier removal:</strong></p>
<ul>
<li><strong>应用时间：</strong> 滤波<strong>之前</strong>（但会打破能量守恒，如不想打破就得提高采样率）</li>
</ul>
<h2 id="d-2-实现"><a href="#d-2-实现" class="headerlink" title="d.2). 实现"></a>d.2). 实现</h2><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/OutlierRemoval02.png" alt="OutlierRemoval02"></p>
<ul>
<li>$\mu$: 均值</li>
<li>$\sigma$: 标准差</li>
<li>即将各个点Clamp到一定范围内（如担心光源被clamp掉，可以先不Render光源。Outlier removal之后再加上光源）</li>
</ul>
<p><strong>之前提到的Temporal Clamping同理：</strong></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/OutlierRemoval03.png" alt="OutlierRemoval03"></p>
<ul>
<li>将上一帧Clamp向（经过空域降噪）这一帧</li>
</ul>
<h1 id="e-SVGF-Spatiotemporal-Variance-Guided-Filtering"><a href="#e-SVGF-Spatiotemporal-Variance-Guided-Filtering" class="headerlink" title="e). SVGF(Spatiotemporal Variance-Guided Filtering)"></a>e). SVGF(Spatiotemporal Variance-Guided Filtering)</h1><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/SVGF01.png" alt="SVGF01"></p>
<ul>
<li>降噪效果好，但仍然有拖影、反射滞后等问题；</li>
<li>在Overblue和更多的noise之间，选择了Overblur</li>
</ul>
<h2 id="e-1-SVGF-—-Joint-Bilateral-Filtering"><a href="#e-1-SVGF-—-Joint-Bilateral-Filtering" class="headerlink" title="e.1). SVGF — Joint Bilateral Filtering"></a>e.1). SVGF — Joint Bilateral Filtering</h2><h3 id="e-1-1-Depth"><a href="#e-1-1-Depth" class="headerlink" title="e.1.1). Depth"></a>e.1.1). Depth</h3><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/SVGF_Depth.png" alt="SVGF_Depth"></p>
<ul>
<li>A、B在同平面深度却差异很大，使得互相之间贡献少。因此，在分母中引入梯度$\nabla z(p)$ ，该梯度为<strong>深度在对应点法线方向的变化率</strong>（注意：梯度为向量，其方向为法线方向；）。<ul>
<li>当平面几乎垂直于屏幕时，$\nabla z(p)$ 变大，使得深度差异对权重的影响变小；</li>
</ul>
</li>
</ul>
<h3 id="e-1-2-Normal"><a href="#e-1-2-Normal" class="headerlink" title="e.1.2). Normal"></a>e.1.2). Normal</h3><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/SVGF_Normal.png" alt="SVGF_Normal"></p>
<ul>
<li>应使用几何法线，而不使用经过法线扰动的Normal</li>
</ul>
<h3 id="e-1-3-Luminance-grayscale-color-value"><a href="#e-1-3-Luminance-grayscale-color-value" class="headerlink" title="e.1.3). Luminance(grayscale color value)"></a>e.1.3). Luminance(grayscale color value)</h3><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/SVGF_Color.png" alt="SVGF_Color"></p>
<ul>
<li><p>使用亮度值；</p>
</li>
<li><p><strong>Variance:</strong></p>
<ul>
<li><p><strong>Step1:</strong> 计算<strong>空域</strong>中<strong>7x7的方差</strong>；</p>
</li>
<li><p><strong>Step2:</strong> 通过<strong>motion vectors</strong>在<strong>时域</strong>上<strong>平均</strong>（类似时域降噪）；</p>
</li>
<li><strong>Step3:</strong> 对平均后的结果再在<strong>空域</strong>上<strong>3x3的范围内平均</strong>；</li>
<li>即，<strong>spatial filter —&gt; temporal filter —&gt; spatial filter</strong></li>
</ul>
</li>
</ul>
<h1 id="f-RAE-Recurrent-AutoEncoder"><a href="#f-RAE-Recurrent-AutoEncoder" class="headerlink" title="f). RAE(Recurrent AutoEncoder)"></a>f). RAE(Recurrent AutoEncoder)</h1><ul>
<li>一种结构，对Monte carlo路径追踪得到的结果进行reconstruction-对RTRT做滤波。</li>
<li>后期处理，把noise的图变clean。</li>
<li>使用G-buffers</li>
<li>神经网络会自动将temporal的结果累积起来</li>
</ul>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/RAE.png" alt="RAE"></p>
<p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/RAE02.png" alt="RAE02"></p>
<h1 id="g-Comparison"><a href="#g-Comparison" class="headerlink" title="g). Comparison"></a>g). Comparison</h1><p><img src="/2023/02/19/Games202_06_Real-time%20Ray-Tracing/Comparison.png" alt="Comparison"></p>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Ray-Tracing</tag>
        <tag>Games202</tag>
        <tag>Denoise</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-5 Real-time Physically-based Materials</title>
    <url>/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/</url>
    <content><![CDATA[<p>Q1：在金属或高光工作流中，对于非导体材质（电介质）默认其零度菲涅尔值$R_0$ 为4%，那么按PBR来，他怎么会有颜色呢；还是说非导体的albedo就是$R_0$ ? 按作业中来好像albedo就是 $R_0$ ，后续还得深挖一下；</p>
<p>Q2：Jacobian 项，方向导数需要去了解更多</p>
<h1 id="a-Introduction"><a href="#a-Introduction" class="headerlink" title="a). Introduction"></a>a). Introduction</h1><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/PBR_Intro00.png" alt="PBR_Intro00"></p>
<ul>
<li>尽管实时渲染中的PBR，不一定完全基于物理。如Disney principled BRDFs (artist friendly but still not PBR)</li>
</ul>
<h1 id="b-Microfacet-BRDF"><a href="#b-Microfacet-BRDF" class="headerlink" title="b). Microfacet BRDF"></a>b). Microfacet BRDF</h1><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/MicrofacetBRDF.png" alt="MicrofacetBRDF"></p>
<ul>
<li>菲涅尔项；</li>
<li>Shadowing-masking term<ul>
<li>考虑微表面之间的遮挡和阴影；</li>
<li>当光线几乎平行与表面入射时(Grazing angle)，微表面之间遮挡变多</li>
</ul>
</li>
<li>Disterbution of normals(法线分布)</li>
</ul>
<span id="more"></span>
<h2 id="b-1-The-Fresnel-Term"><a href="#b-1-The-Fresnel-Term" class="headerlink" title="b.1). The Fresnel Term"></a>b.1). The Fresnel Term</h2><ul>
<li><strong>本质上是考虑能量的吸收和反射</strong>（即考虑BRDF就会有因为颜色的合理的能量损失）</li>
</ul>
<table frame="void">
    <tr>
    <td><center><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/绝缘体_Fresnel.png" alt="绝缘体_Fresnel" height="250"></center></td>
    <td><center><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/导体(金属)_Fresnel.png" alt="导体(金属)_Fresnel" height="250"></center></td>
    </tr>
</table>

<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/FresnelTerm.png" alt="FresnelTerm"></p>
<hr>
<h2 id="b-2-Normal-Distribution-Function-NDF"><a href="#b-2-Normal-Distribution-Function-NDF" class="headerlink" title="b.2). Normal Distribution Function(NDF)"></a>b.2). Normal Distribution Function(NDF)</h2><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NormalDistribution.png" alt="NormalDistribution"></p>
<ul>
<li>NDF从简单（如Gloosy）变为复杂（如Diffuse），就类似于把微表面高度场拉大；</li>
</ul>
<ul>
<li><p><strong>类型：</strong></p>
<ul>
<li>Beckmann, GGX, etc.</li>
<li>Detailed models [Yan 2014, 2016, 2018, …]</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NDF01.png" alt="NDF01"></p>
</li>
</ul>
<h3 id="b-2-1-Beckmann-NDF"><a href="#b-2-1-Beckmann-NDF" class="headerlink" title="b.2.1). Beckmann NDF"></a>b.2.1). Beckmann NDF</h3><p><strong>Beckmann NDF:</strong></p>
<ul>
<li><p>和高斯函数相似</p>
</li>
<li><p>Project Solid angel上积分为1</p>
</li>
<li><p>定义在Slope space（坡度空间）</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NDF_Beckmann_01.png" alt="NDF_Beckmann_01" style="zoom:50%;"></p>
<ul>
<li><strong>原因：</strong> 在Slope space（法线交点处切线平面）中Support无限大，任意位置对应的夹角不会超过90°，<strong>保证微表面不会朝下</strong></li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">
D(h)=\frac{e^{-\frac{\tan ^{2} \theta_{h}}{\alpha^{2}}}}{\pi \alpha^{2} \cos ^{4} \theta_{h}}</script><ul>
<li><strong>$\alpha$ ：Roughness的平方</strong></li>
<li><strong>$\theta_{h}$ ：半角向量和（宏观）法线的夹角</strong></li>
</ul>
<h3 id="b-2-2-GGX-or-Trowbridge-Reitz-TR"><a href="#b-2-2-GGX-or-Trowbridge-Reitz-TR" class="headerlink" title="b.2.2). GGX (or Trowbridge-Reitz, TR)"></a>b.2.2). GGX (or Trowbridge-Reitz, TR)</h3><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NDF_GGX01.png" alt="NDF_GGX01"></p>
<ul>
<li><p><strong>Long tail:</strong> 使得光线过度更为自然，如高光过渡柔和</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NDF_GGX02.png" alt="NDF_GGX02"></p>
</li>
</ul>
<h3 id="b-2-3-GGGX-GTR"><a href="#b-2-3-GGGX-GTR" class="headerlink" title="b.2.3). GGGX(GTR)"></a>b.2.3). GGGX(GTR)</h3><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/NDF_GTR.png" alt="NDF_GTR"></p>
<hr>
<h2 id="b-3-Shadowing-Masking-Term"><a href="#b-3-Shadowing-Masking-Term" class="headerlink" title="b.3). Shadowing-Masking Term"></a>b.3). Shadowing-Masking Term</h2><p> <strong>Why is it important?</strong></p>
<ul>
<li><p>如没$G$ 项，在grazing angle时，物体表面会发亮；</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/MicrofacetBRDF_G01.png" alt="MicrofacetBRDF_G01"></p>
</li>
</ul>
<h3 id="b-3-1-The-Smith-shadowing-masking-term"><a href="#b-3-1-The-Smith-shadowing-masking-term" class="headerlink" title="b.3.1). The Smith shadowing-masking term"></a>b.3.1). The Smith shadowing-masking term</h3><ul>
<li><p><strong>假设：</strong> Shadow和Masking无关，即</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Smith_01.png" alt="Smith_01"></p>
</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Smith_02.png" alt="Smith_02"></p>
<h3 id="b-3-2-Issues-Missing-energy"><a href="#b-3-2-Issues-Missing-energy" class="headerlink" title="b.3.2). Issues(Missing energy)"></a>b.3.2). Issues(Missing energy)</h3><ul>
<li><p><strong>原因：</strong>由于Shadowing-masking只考虑了一次弹射，对于<strong>多次弹射</strong>的能量直接舍去，造成能量损失；</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/WhiteFurnaceTest.png" alt="WhiteFurnaceTest"></p>
</li>
</ul>
<p>  <img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/ShadowMasking01.png" alt="ShadowMasking01"></p>
<ul>
<li><strong>做法：</strong><ul>
<li>Accurate methods exist [Heitz et al. 2016]<ul>
<li>主要用于离线渲染，对于RTR过慢；</li>
</ul>
</li>
<li><strong>The Kulla-Conty Approximation</strong><ul>
<li>Being occluded == next bounce happening</li>
<li>构造函数去补偿损失的能量；</li>
<li>求得的BRDF+原BRDF，即可；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b-3-3-Kulla-Conty-Approximation"><a href="#b-3-3-Kulla-Conty-Approximation" class="headerlink" title="b.3.3). Kulla-Conty Approximation"></a>b.3.3). Kulla-Conty Approximation</h3><script type="math/tex; mode=display">
{L}_{o}(\omega_{o})=\int_{\Omega^{+}}{L}_{i}(\omega_{i})f_{r}(\omega_{i},\omega_{o})cos\theta_i\,\mathrm{d}\omega_{i}</script><ul>
<li><p>通过对$\mathrm{d}\omega_{i}$ 换元（即立体角）</p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/SolidAngle_D02.png" alt="SolidAngle_D02" style="zoom: 25%;"></p>
<p><strong>得到：</strong></p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty.png" alt="Kulla-Conty"></p>
<ul>
<li>此处假设各处<strong>入射Radiance（$L_i$） 均匀为1</strong>，因此出射的Radiance也应均匀为1；</li>
<li>此处假设BRDF的菲涅尔项为1，即无颜色，能量不损失。后续再考虑颜色（<em>？待验证</em>）</li>
<li>该函数是关于出射角的俯仰角$\theta_o$ 的函数（和方位角无关是因为假设为各项同性）</li>
</ul>
</li>
</ul>
<h4 id="Key-idea"><a href="#Key-idea" class="headerlink" title="Key idea:"></a>Key idea:</h4><ul>
<li><p>通过积分可得<strong>需要补偿的能量为 $1 - E(\mu_{o})$；</strong></p>
</li>
<li><blockquote>
<p>该函数是关于出射角的俯仰角$\theta_o$ 的函数（和方位角无关是因为假设为各项同性）</p>
</blockquote>
</li>
<li><p>考虑到对称性质（reciprocity），即入射方向和出射方向互换，Radiance不变，<strong>补偿项的BRDF</strong>形式为$c(1 - E(\mu_{i}))(1 - E(\mu_{o}))$，其中 $c$ 为常数；</p>
</li>
</ul>
<h4 id="补偿项的BRDF（带cos）-c-1-E-mu-i-1-E-mu-o"><a href="#补偿项的BRDF（带cos）-c-1-E-mu-i-1-E-mu-o" class="headerlink" title="补偿项的BRDF（带cos） - $c(1 - E(\mu_{i}))(1 - E(\mu_{o}))$"></a>补偿项的BRDF（带cos） - $c(1 - E(\mu_{i}))(1 - E(\mu_{o}))$</h4><ul>
<li><p>常数 $c = \frac{1}{\pi(1-E_{avg})}, E_{avg}=2\int_0^1E(\mu)\mu\, \mathrm{d}\mu$ </p>
</li>
<li><p><strong>补偿项即为：</strong>  </p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty02.png" alt="Kulla-Conty02"></p>
<ul>
<li>$c$ 推导：即让补偿项的BRDF$f_{ms}(\mu_{o},\mu_{i})$ 的积分结果为 $1 - E(\mu_{o})$</li>
</ul>
</li>
</ul>
<h4 id="预计算"><a href="#预计算" class="headerlink" title="预计算"></a>预计算</h4><p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty03.png" alt="Kulla-Conty03"></p>
<ul>
<li>对于$E_{avg}=2\int_0^1E(\mu)\mu\, \mathrm{d}\mu$ ，只需要得知其Roughness就可求出对应的结果，储存在1D table中；<ul>
<li>NDF等使用的模型已知；</li>
</ul>
</li>
<li>对于$E(\mu)$ 得知其roughness(确定函数) 和 $\mu$ (确定函数自变量)，即可求出对应结果，储存在2D table中；</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty_Result.png" alt="Kulla-Conty_Result"></p>
<blockquote id="fn_Result">
<sup>Result</sup>. 原BRDF+(uncolored)补偿项BRDF<a href="#reffn_Result" title="Jump back to footnote [Result] in the text."> &#8617;</a>
</blockquote>
<h4 id="Color-energy-loss"><a href="#Color-energy-loss" class="headerlink" title="Color(energy loss)"></a>Color(energy loss)</h4><ul>
<li>有颜色( vec3的$R_0$项 )，意味着能量被吸收，也是能量合理的损失；</li>
<li>之前我们做了，不损失能量，无颜色的情况。之后，我们需要计算由于颜色的能量损失；</li>
</ul>
<hr>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty04.png" alt="Kulla-Conty04"></p>
<ul>
<li>定义平均菲涅尔 $F_{avg}$ ，表示<strong>能量参与弹射后，平均反射出多少</strong>；（剩下的被吸收）</li>
<li>之前定义了 $E_{avg}$ ，表示每次弹射后，<strong>平均有多少能量被看见（即<font color="red">不参与</font>之后的弹射）</strong></li>
<li>$F_{avg}$ 、$E_{avg}$ 都是三维的向量；</li>
</ul>
<ul>
<li><p><strong>由此可得，</strong></p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty05.png" alt="Kulla-Conty05"></p>
<ul>
<li>$(1-E_{avg})$ 表示上一次弹射后，被遮挡未出射的能量；</li>
<li>等比数列求和；</li>
<li>求得的color term直接乘上uncolored additional BRDF即可；</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Kulla-Conty_Result02.png" alt="Kulla-Conty_Result02"></p>
<blockquote id="fn_Result with color">
<sup>Result with color</sup>. 原BRDF + colored补偿项BRDF(color term * uncolor补偿项BRDF)<a href="#reffn_Result with color" title="Jump back to footnote [Result with color] in the text."> &#8617;</a>
</blockquote>
</li>
</ul>
<h1 id="c-Linearly-Transformed-Cosines-LTC-线性变换余弦"><a href="#c-Linearly-Transformed-Cosines-LTC-线性变换余弦" class="headerlink" title="c). Linearly Transformed Cosines(LTC, 线性变换余弦)"></a>c). Linearly Transformed Cosines(LTC, 线性变换余弦)</h1><h2 id="c-1-Introduction"><a href="#c-1-Introduction" class="headerlink" title="c.1). Introduction"></a>c.1). Introduction</h2><p><strong>作用：</strong> Solves the <strong>shading</strong> of <strong>microfacet models</strong> </p>
<ul>
<li>主要用于GGX，当然其他NDF也适用；</li>
<li>No shadows</li>
<li><strong>Under polygon shaped lighting</strong>(多边形光源)，解决多边形光源的光照积分问题；</li>
</ul>
<p><strong>Key idea:</strong></p>
<ul>
<li><p>对于<strong>任意一个球面分布函数</strong>，一定可以通过<strong>一个线性变换矩阵</strong>将其变化到<strong>另外一个球面分布函数</strong>(对于任意2D(二维，出射方位角和俯仰角) BRDF lobe can be transformed to a cosine)</p>
</li>
<li><p>光源的形状也可以被变换，且积分结果相同；</p>
</li>
<li>变换后的积分有<strong>解析解</strong>；</li>
</ul>
<p><strong>Ref:</strong></p>
<p>[1] <a href="pic\LTC.pdf">Real-Time Polygonal-Light Shading with Linearly Transformed Cosines</a> </p>
<p>[2] <a href="https://zhuanlan.zhihu.com/p/84714602">Real-Time Polygonal-Light with LTC-zhihu</a></p>
<p>[3] <a href="https://blog.csdn.net/JMXIN422/article/details/124586534?ops_request_misc=%7B%22request%5Fid%22%3A%22167578550616800192233591%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167578550616800192233591&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124586534-null-null.142">物理光源：Linearly Transformed Cosines</a></p>
<p>[4] <a href="https://eheitzresearch.wordpress.com/415-2/">Eric Heitz’s Research Page</a></p>
<p>[5] <a href="https://blog.csdn.net/qq_35312463/article/details/122514827?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-122514827-blog-77370524.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">Global Illumination_Linearly Transformed Cosines (LTC)</a></p>
<p>[6] <a href="https://blog.csdn.net/qjh5606/article/details/119682254?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119682254-blog-77370524.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-119682254-blog-77370524.pc_relevant_default&amp;utm_relevant_index=5">图形学基础|基于LTC的面光源渲染</a></p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/LTC01.png" alt="LTC01"></p>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/LTC00.png" alt="LTC00"></p>
<ul>
<li>$J$ 是雅可比行列式，更进一步的可见Ref，后续论文复现后再进一步补充此处笔记；</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/LTC03.png" alt="LTC03"></p>
<blockquote id="fn_LTC介绍">
<sup>LTC介绍</sup>. 来源Ref[3]<a href="#reffn_LTC介绍" title="Jump back to footnote [LTC介绍] in the text."> &#8617;</a>
</blockquote>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/LTC04.png" alt="LTC04"></p>
<blockquote id="fn_LTC拟合BRDF">
<sup>LTC拟合BRDF</sup>. 来源Ref[6]<a href="#reffn_LTC拟合BRDF" title="Jump back to footnote [LTC拟合BRDF] in the text."> &#8617;</a>
</blockquote>
<h1 id="d-Disney’s-Principled-BRDF"><a href="#d-Disney’s-Principled-BRDF" class="headerlink" title="d). Disney’s Principled BRDF"></a>d). Disney’s Principled BRDF</h1><h2 id="d-1-Introduction"><a href="#d-1-Introduction" class="headerlink" title="d.1). Introduction"></a>d.1). Introduction</h2><p><strong>微表面BRDF的缺点</strong></p>
<ul>
<li>微表面模型不擅长表示真实（基于物理）的材质；<ul>
<li>如：Diffuse的情况不好表示，多层材质也难以表示；</li>
</ul>
</li>
<li>微表面模型“are not artist friendly”<ul>
<li>如： <strong>复折射率（complex index of refraction）</strong>,$n-ik$（详见PBR-White-Paper）</li>
</ul>
</li>
</ul>
<p><strong>需求：</strong></p>
<ul>
<li>Artist friendly，但一定程度上physically-based</li>
</ul>
<p><strong>设计原则：</strong></p>
<ul>
<li>应该使用直观的而不是物理的参数；</li>
<li>使用的参数尽可能少；</li>
<li>参数应该在0~1；</li>
<li>参数在必要时允许超出0~1的范围；</li>
<li>参数的所有组合的外观都应该是合理、稳定的；</li>
</ul>
<p><img src="/2023/02/18/Games202_05_Real-time%20Physically-based%20Materials/Disney00.png" alt="Disney00"></p>
<blockquote id="fn_Disney’s Principled BRDF">
<sup>Disney’s Principled BRDF</sup>. A table showing the effects of individual parameters<a href="#reffn_Disney’s Principled BRDF" title="Jump back to footnote [Disney’s Principled BRDF] in the text."> &#8617;</a>
</blockquote>
<ul>
<li>sheen: 类似天鹅绒，材质表面有一层绒毛，使得其在grazing angle有雾化的效果</li>
<li>sheenTint: 绒毛的颜色</li>
<li>clearcoat: 类似清漆（当时做雨滴就用的是clearcoat）</li>
</ul>
<h2 id="d-2-Pros-and-Cons"><a href="#d-2-Pros-and-Cons" class="headerlink" title="d.2). Pros and Cons"></a>d.2). Pros and Cons</h2><ul>
<li>易于理解/控制</li>
<li>可表现大量材质；</li>
<li>实现复杂，基本是去拟合PBR材质；</li>
<li>不基于物理，但视觉上大部分是符合的；</li>
<li>参数空间巨大；</li>
</ul>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Materials</tag>
        <tag>Games202</tag>
        <tag>PBR</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_5.1 PBR基础 BRDF介绍</title>
    <url>/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/Cook-Torrance.png" alt="Cook-Torrance"></p>
<ul>
<li>引擎为了提高性能，并且artist friendly，用漫反射项补偿微表面BRDF（打破能量守恒，如想在RTR中实现较为准确的能量补充，应使用Kulla-Conty Approximation）。使得其方便控制，如对于非金属4%的 $F_0$ 也可呈现颜色。并且把BRDF分母的 $\pi$ ,写为4。<ul>
<li>因此，引擎中PBR的Shading常有以下几项，并通过系数控制其不过与打破能量守恒：<ol>
<li>直接光照漫反射；</li>
<li>直接光照镜面反射；</li>
<li>间接光照漫反射；</li>
<li>间接光照镜面反射；<ul>
<li><strong>这样做的结果是容易打破能量守恒，但是artist friendly，而且可表现更多外观。</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>更多请看<em>Games202 Real-time Physically-based Materials</em>，或以下Reference</li>
<li><strong>Ref:</strong><ol>
<li><a href="https://learnopengl-cn.github.io/07%20PBR/01%20Theory/#pbr">LearnOpenGL CN</a></li>
<li><a href="https://aras-p.info/texts/files/201403-GDC_UnityPhysicallyBasedShading_notes.pdf">201403-GDC_UnityPhysicallyBasedShading</a></li>
<li><a href="https://www.zhihu.com/column/game-programming">基于物理的渲染（PBR）白皮书</a></li>
<li><a href="https://blog.uwa4d.com/archives/1582.html">基于物理的渲染—更精确的微表面分布函数GGX</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/68025039">如何在Unity中造一个PBR Shader轮子</a></li>
<li><a href="https://bruop.github.io/ibl/">Image Based Lighting with Multiple Scattering</a></li>
</ol>
</li>
</ul>
<h1 id="a-Unity中的PBR（Disney‘s-Principled-BRDF）"><a href="#a-Unity中的PBR（Disney‘s-Principled-BRDF）" class="headerlink" title="a). Unity中的PBR（Disney‘s Principled BRDF）"></a>a). Unity中的PBR（Disney‘s Principled BRDF）</h1><p>Unity中Standard Shader基本采用Disney’s Principled BRDF，但有些许不同。Disney’s Principled BRDF可具体看其他文章，如毛星云大佬的PBR白皮书，以下就写一些实现上的不同处和细节。</p>
<span id="more"></span>
<h2 id="a-1-直接光照漫反射BRDF"><a href="#a-1-直接光照漫反射BRDF" class="headerlink" title="a.1). 直接光照漫反射BRDF"></a>a.1). 直接光照漫反射BRDF</h2><p>Unity中采用的漫反射BRDF不是Lambertian漫反射，而是Disney开发了的一种用于漫反射的新的经验模型。</p>
<blockquote>
<p>Disney表示，Lambert漫反射模型在边缘上通常太暗，而通过尝试添加菲涅尔因子以使其在物理上更合理，但会导致其更暗。</p>
<p>思路方面，Disney使用了Schlick Fresnel近似，并修改掠射逆反射（grazing retroreflection response）以达到其特定值由粗糙度值确定，而不是简单为0。</p>
</blockquote>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/5bedec7e9fd8594bb6ffcbff3aaeb9ad.png" alt="5bedec7e9fd8594bb6ffcbff3aaeb9ad"></p>
<blockquote id="fn_Diffuse BRDF">
<sup>Diffuse BRDF</sup>. 上图为Diffuse BRDF<a href="#reffn_Diffuse BRDF" title="Jump back to footnote [Diffuse BRDF] in the text."> &#8617;</a>
</blockquote>
<p>为保证shader看起来和Legacy版本差不多亮 ，并且避免在ibl部分对非重要光源做特殊处理，Unity会把分母中的 $\pi$ 拿掉。同时也会在直接光照的镜面反射项上多乘上一个 $\pi$</p>
<h2 id="a-2-直接光照镜面反射BRDF"><a href="#a-2-直接光照镜面反射BRDF" class="headerlink" title="a.2). 直接光照镜面反射BRDF"></a>a.2). 直接光照镜面反射BRDF</h2><p>镜面反射即采用微表面BRDF，即</p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/c1b2fc1ec5d1e5c6380ffacfb31cff28.png" alt="c1b2fc1ec5d1e5c6380ffacfb31cff28"></p>
<ul>
<li><p>D为微平面分布函数，主要负责镜面反射波峰（specular peak）的形状。</p>
</li>
<li><p>F为菲涅尔反射系数（Fresnel reflection coefficient）</p>
</li>
<li><p>G为几何衰减（geometric attenuation）/ 阴影项（shadowing factor）</p>
</li>
</ul>
<h3 id="a-2-1-法线分布项（Specular-D）：GTR"><a href="#a-2-1-法线分布项（Specular-D）：GTR" class="headerlink" title="a.2.1). 法线分布项（Specular D）：GTR"></a>a.2.1). 法线分布项（Specular D）：GTR</h3><p>Unity中采用法线分布项为GGX，这里采用GTR模型。</p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/6fb3430619d35fecc4267b24f0edf6cd.png" alt="6fb3430619d35fecc4267b24f0edf6cd"></p>
<p>其中，γ取2，即GGX</p>
<p>另外，在Disney Principled BRDF中，实际上有两个镜面反射波瓣（Specular lobe），并且都用GTR模型。其中γ=2的GRT代表基础底层材质，而γ=1的GRT则代表清漆层的反射。</p>
<h3 id="a-2-2-菲涅尔项（Specular-F）：Schlick-Fresnel"><a href="#a-2-2-菲涅尔项（Specular-F）：Schlick-Fresnel" class="headerlink" title="a.2.2). 菲涅尔项（Specular F）：Schlick Fresnel"></a>a.2.2). 菲涅尔项（Specular F）：Schlick Fresnel</h3><p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/071dcb665386a2a56f1cb84352dc60ce.png" alt="071dcb665386a2a56f1cb84352dc60ce"></p>
<p>由于原始的菲涅尔项表示过于复杂，人们会常用其他数值近似的方法。其中，应用地较为广泛的为Schlick Fresnel。<strong><font color="red">本质上是考虑能量的反射和折射</font></strong>（即考虑BRDF就会有因为颜色的合理的能量损失）</p>
<p>这里需要注意的有两点。</p>
<ol>
<li><p>$\theta_d$ 为半角向量h和视线v之间的夹角，而不是宏观法线n和视线v的夹角。<strong>$(i, h)$和$(i, n)$的区别其实就是宏观和微观。在微表面BRDF中，$D(h)$筛选出了沿$h$方向的normal。那此时菲涅尔项中应该使用的normal即为$h$</strong></p>
</li>
<li><p>电介质（绝缘体）的$F_0$ 为float，金属的 $F_0$ 为float3。而最终用于菲涅尔项的 $F_0$ 常常会根据金属度在0.04(引擎中电介质默认的$F_0$)和albedo之间根据金属度Metallic插值。</p>
</li>
</ol>
<h3 id="a-2-3-几何项-Shadowing-Masking（Specular-G）：Smith-GGX"><a href="#a-2-3-几何项-Shadowing-Masking（Specular-G）：Smith-GGX" class="headerlink" title="a.2.3). 几何项/Shadowing-Masking（Specular G）：Smith-GGX"></a>a.2.3). 几何项/Shadowing-Masking（Specular G）：Smith-GGX</h3><p>几何项（Specular G）方面，对于主镜面波瓣（primary specular lobe），Disney参考了 Walter的近似方法，使用Smith GGX导出的G项，并将粗糙度参数进行重映射以减少光泽表面的极端增益，即将α 从[0, 1]重映射到[0.5, 1]，α的值为(0.5 + roughness/2)^2。从而使几何项的粗糙度变化更加平滑，更便于美术人员的使用。</p>
<p>以下为Smith GGX的几何项的表达式：</p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/0138e3d33d920148a6a652f2f47158d3.png" alt></p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/cab428cf33e54a71d70cc9fc05c856c3.png" alt></p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/5336bcb848115d87c783424111bcf204.png" alt></p>
<p>另外，对于对清漆层进行处理的次级波瓣（secondary lobe），Disney没有使用Smith G推导，而是直接使用固定粗糙度为0.25的GGX的 G项，便可以得到合理且很好的视觉效果。</p>
<h2 id="a-3-间接光照漫反射"><a href="#a-3-间接光照漫反射" class="headerlink" title="a.3). 间接光照漫反射"></a>a.3). 间接光照漫反射</h2><p>间接光照漫反射频率基本集中的低频，因此采用球谐函数取近似（Unity中采用前三阶）。</p>
<p><em>详见Games202 Real-time Environment Mapping</em></p>
<h2 id="a-4-间接光照镜面反射"><a href="#a-4-间接光照镜面反射" class="headerlink" title="a.4). 间接光照镜面反射"></a>a.4). 间接光照镜面反射</h2><p>间接光照镜面反射采用IBL，并通过prefiltering后采用模拟对Lighting的积分，通过Split sum对BRDF积分。（<em>详见Games202 Real-time Environment Mapping</em>）其中，mip和roughness之间的关系为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float m = roughness*roughness;</span><br><span class="line">const float fEps = 1.192092896e-07F;</span><br><span class="line">float n =  (2.0 / max(fEps, m * m)) - 2.0;</span><br><span class="line">n /= 4;</span><br><span class="line">roughness = pow( 2 / (n + 2), 0.25);</span><br></pre></td></tr></table></figure>
<p>Unity中，则通过 $mip = r(1.7 - 0.7r)$ 来拟合。</p>
<p><a href="http://jbit.net/~sparky/academic/mm_brdf.pdf">http://jbit.net/~sparky/academic/mm_brdf.pdf</a></p>
<h2 id="a-5-各项比例"><a href="#a-5-各项比例" class="headerlink" title="a.5). 各项比例"></a>a.5). 各项比例</h2><p>至此，我们已经可以把各项的表达式都写出来了。那么最后需要解决的就是各项之间的比例。</p>
<h3 id="a-5-1-直接光照"><a href="#a-5-1-直接光照" class="headerlink" title="a.5.1). 直接光照"></a>a.5.1). 直接光照</h3><p>首先，我们考虑直接光照。直接光照中，漫反射和镜面反射的关键在于菲涅尔项。菲涅尔项本质上是考虑能量的反射和折射，而光线折射后会发生吸收和散射。而散射的尺度要是足够小，就变成了漫反射（尺度大，如大于一个像素区域时，散射变现为次表面散射，即SSS）。</p>
<p>镜面反射的比例已经在微表面BRDF中的F项中计算过了，因此漫反射的比例即为1 - F。同时，因为我们采用的Disney principled BRDF需要根据金属度在漫反射和镜面反射之间插值，因此漫反射项的比例为$(1 - F) \cdot (1-Metallic) $ 。</p>
<h3 id="a-5-2-间接光照"><a href="#a-5-2-间接光照" class="headerlink" title="a.5.2). 间接光照"></a>a.5.2). 间接光照</h3><p>在间接光照中，与直接光照不同的地方在于在求间接光照的镜面反射时，我们对BRDF求了积分（Split sum）。因此，我们菲涅尔的不再是微表面的菲涅尔，而是使用宏观法线的菲涅尔。即，<strong>$\theta_d$ 为法线$n$和视线$v$之间的夹角</strong>。</p>
<p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/071dcb665386a2a56f1cb84352dc60ce.png" alt="071dcb665386a2a56f1cb84352dc60ce"></p>
<p>这里$F_0$ 与albedo之间lerp使用Roughness，而不是Metallic。（一种经验化的做法，方法来自：<a href="https://seblagarde.wordpress.com/2011/08/17/hello-world/）">https://seblagarde.wordpress.com/2011/08/17/hello-world/）</a></p>
<p>附上最终Shader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;PBR/DisneyPBR&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Roughness (&quot;Roughness&quot;, Range(0, 1.0)) = 0.3</span><br><span class="line">        _Metallic (&quot;Metallic&quot;, Range(0.0, 1.0)) = 0.2</span><br><span class="line">        _IBLlut (&quot;IBL Lut&quot;, 2D) = &quot;while&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class="line"></span><br><span class="line">        CGINCLUDE</span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">        #include &quot;UnityStandardBRDF.cginc&quot;</span><br><span class="line">        #include &quot;UnityStandardUtils.cginc&quot;</span><br><span class="line"></span><br><span class="line">        half DI_DisneyDiffuse(half NdotV, half NdotL, half NdotH, half perceptualRoughness) &#123;</span><br><span class="line">            half F90 = 0.5 + 2 * perceptualRoughness * NdotH * NdotH;</span><br><span class="line">            half lightScatter = 1 + (F90 - 1) * Pow5(1 - NdotL);</span><br><span class="line">            half viewScatter = 1 + (F90 - 1) * Pow5(1 - NdotV);</span><br><span class="line"></span><br><span class="line">            return lightScatter * viewScatter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        half SmithJointGGX(half NdotV, half NdotL, half perceptualRoughness) &#123;</span><br><span class="line">            half a = 0.5 + perceptualRoughness/2;</span><br><span class="line">            a *= a;</span><br><span class="line">            half a2 = a * a;</span><br><span class="line"></span><br><span class="line">            half lightGGX = 2 * NdotL / (NdotL + sqrt(a2 + (NdotL - a2 * NdotL) * NdotL));</span><br><span class="line">            half viewGGX = 2 * NdotV / (NdotV + sqrt(a2 + (NdotV - a2 * NdotV) * NdotV));</span><br><span class="line"></span><br><span class="line">            return lightGGX * viewGGX;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        half GTR2(half NdotH, half perceptualRoughness) &#123;</span><br><span class="line">            half a2 = perceptualRoughness * perceptualRoughness;</span><br><span class="line">            half cos2 = NdotH * NdotH;</span><br><span class="line">            half denom = (1 + (a2 - 1) * cos2);</span><br><span class="line"></span><br><span class="line">            return a2 * UNITY_INV_PI / (denom * denom);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        half3 F_schlick(half3 F0, half HdotV) &#123;</span><br><span class="line">            return F0 + (1 - F0) * Pow5(1 - HdotV);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        half3 IBL_LightSample(float3 dir, half perceptualRoughness) &#123;</span><br><span class="line">            float mip_roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);</span><br><span class="line">            half mip = mip_roughness * UNITY_SPECCUBE_LOD_STEPS;</span><br><span class="line"></span><br><span class="line">            half4 hdr_col = UNITY_SAMPLE_TEXCUBE_LOD(unity_SpecCube0, dir, mip);</span><br><span class="line">            float3 ldr_col = DecodeHDR(hdr_col, unity_SpecCube0_HDR);</span><br><span class="line"></span><br><span class="line">            return ldr_col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        float3 fresnelSchlickRoughness(float cosTheta, float3 F0, float roughness)</span><br><span class="line">        &#123;</span><br><span class="line">            return F0 + (max(float3(1.0 - roughness, 1.0 - roughness, 1.0 - roughness), F0) - F0) * Pow5(1.0 - cosTheta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        struct a2v</span><br><span class="line">        &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float3 normal : NORMAL;</span><br><span class="line">            float2 uv : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float2 uv : TEXCOORD0;</span><br><span class="line">            float3 worldNormal : TEXCOORD1;</span><br><span class="line">            float3 worldPos : TEXCOORD2;</span><br><span class="line">            float4 vertex : SV_POSITION;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        sampler2D _IBLlut;</span><br><span class="line">        float4 _MainTex_ST;</span><br><span class="line">        float _Roughness;</span><br><span class="line">        float _Metallic;</span><br><span class="line"></span><br><span class="line">        v2f vert (a2v v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">            o.uv = TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">            o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">            o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 frag (v2f i) : SV_Target</span><br><span class="line">        &#123;</span><br><span class="line">            float3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">            float3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">            float3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">            float3 worldHalfDir = normalize(worldLightDir + worldViewDir);</span><br><span class="line"></span><br><span class="line">            float NdotV = max(dot(worldNormal, worldViewDir), 0.0001);</span><br><span class="line">            float NdotL = max(dot(worldNormal, worldLightDir), 0.0001);</span><br><span class="line">            float NdotH = max(dot(worldNormal, worldHalfDir), 0.0001);</span><br><span class="line">            float HdotV = max(dot(worldHalfDir, worldViewDir), 0.0001);</span><br><span class="line"></span><br><span class="line">            fixed4 albedo = tex2D(_MainTex, i.uv);</span><br><span class="line"></span><br><span class="line">            float roughness = lerp(0.004, 0.9, _Roughness);</span><br><span class="line"></span><br><span class="line">            //DI</span><br><span class="line">            // DisneyDiffuse没有乘上Pi</span><br><span class="line">            fixed3 DisneyDiffuse = albedo.rgb * DI_DisneyDiffuse(NdotV, NdotL, NdotH, roughness); //  * UNITY_INV_PI</span><br><span class="line"></span><br><span class="line">            fixed3 F0 = lerp(unity_ColorSpaceDielectricSpec.rgb, albedo, _Metallic);</span><br><span class="line"></span><br><span class="line">            float D = GTR2(NdotH, roughness);</span><br><span class="line">            float3 F = F_schlick(F0, HdotV);</span><br><span class="line">            float G = SmithJointGGX(NdotV, NdotL, roughness);</span><br><span class="line"></span><br><span class="line">            half3 SpeBRDF = F * D * G / (4 * NdotL * NdotV);</span><br><span class="line"></span><br><span class="line">            fixed3 LightColor = _LightColor0;</span><br><span class="line"></span><br><span class="line">            half kd = OneMinusReflectivityFromMetallic(_Metallic);</span><br><span class="line"></span><br><span class="line">            fixed3 Ambient = albedo * UNITY_LIGHTMODEL_AMBIENT.rgb;</span><br><span class="line">            fixed3 Diffuse = (1-F) * kd * LightColor * DisneyDiffuse * NdotL;</span><br><span class="line">            fixed3 Specular = LightColor * SpeBRDF * NdotL * UNITY_PI; // 乘上Pi和Diffuse等比例变化；</span><br><span class="line"></span><br><span class="line">            // Environment Map</span><br><span class="line"></span><br><span class="line">            half3 ambient_contrib = ShadeSH9(half4(worldNormal, 1));</span><br><span class="line"></span><br><span class="line">            float3 iblLight = IBL_LightSample(reflect(-worldViewDir, worldNormal), roughness);</span><br><span class="line"></span><br><span class="line">            float2 envLut = tex2D(_IBLlut, float2(lerp(0, 0.99, NdotV), roughness)).rg;</span><br><span class="line"></span><br><span class="line">            float3 F0_Roughness = lerp(unity_ColorSpaceDielectricSpec.rgb, albedo, roughness);</span><br><span class="line">            float3 Flast = fresnelSchlickRoughness(max(NdotV, 0.001), F0, roughness);</span><br><span class="line">            float kdLast = (1 - Flast) * (1 - _Metallic);</span><br><span class="line"></span><br><span class="line">            float3 iblDiffuse = (ambient_contrib + Ambient) * albedo * kdLast;</span><br><span class="line">            float3 iblSpec = (iblLight * (Flast * envLut.r + envLut.g));</span><br><span class="line"></span><br><span class="line">            return fixed4(Diffuse + Specular + iblDiffuse + iblSpec, 1);</span><br><span class="line">            // return fixed4(iblDiffuse, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;</span><br><span class="line">				&quot;LightMode&quot; = &quot;ForwardBase&quot;</span><br><span class="line">			&#125;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="a-6-结果"><a href="#a-6-结果" class="headerlink" title="a.6). 结果"></a>a.6). 结果</h2><p><img src="/2023/02/15/HPP_Graphics_5.1_PBR%E5%9F%BA%E7%A1%80/DisneyBRDF.jpg" alt="DisneyBRDF"></p>
<blockquote id="fn_Custom PBR">
<sup>Custom PBR</sup>. 同参数下，与Standard Shader的对比（左侧为Custom PBR）<a href="#reffn_Custom PBR" title="Jump back to footnote [Custom PBR] in the text."> &#8617;</a>
</blockquote>
<p>为获得更长的拖尾，将GTR的γ取3以区别Standard。</p>
<p>可以看到，实现的Shader基本与Unity的Standard Shader一致。但因为法线分布使用了GTR，高光拖尾更长，更柔和。</p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>PBR</tag>
        <tag>百人计划</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_4.5 DOF景深基础</title>
    <url>/2023/02/15/HPP_Graphics_4.5_DOF%E6%99%AF%E6%B7%B1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>这两篇已经写得挺好的了，后续再补充。</p>
<p><a href="https://blog.csdn.net/weixin_45776473/article/details/126912037?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167646563416800182743755%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167646563416800182743755&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126912037-null-null.142">用Unity实现景深效果</a></p>
<p><a href="https://blog.csdn.net/qjh5606/article/details/118960868?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E6%95%A3%E6%99%AF%E6%99%AF%E6%B7%B1&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-118960868.142">图形学基础|景深效果（Depth of Field/DOF）</a></p>
<h1 id="HW"><a href="#HW" class="headerlink" title="HW"></a>HW</h1><p><img src="/2023/02/15/HPP_Graphics_4.5_DOF%E6%99%AF%E6%B7%B1%E5%9F%BA%E7%A1%80/HW_DOF.gif" alt="HW_DOF"></p>
<p>Step1: 计算CoC(弥散圆)</p>
<p>Step2: Bokeh Filter</p>
<p>Step3: Tent Filter</p>
<p>Step4: Composition</p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>效果</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_4.1 Bloom算法</title>
    <url>/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="a-Bloom算法介绍"><a href="#a-Bloom算法介绍" class="headerlink" title="a). Bloom算法介绍"></a>a). Bloom算法介绍</h1><p>模拟光辉效果的算法<br>简单思路：提取较亮的部分进行模糊，然后与原图叠加后输出<br>HDR：使用HDR可以使提取到亮度大于1的区域<br>高斯模糊：使用高斯函数得到的高斯核去卷积图像<br>二维高斯核：将运算的复杂度从 N x N x W x H 减少到了 2 x N x W x H (对称性使N可减少到N/2+1)</p>
<p><img src="/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/Bloom思路.png" alt="Bloom思路"></p>
<h1 id="b-Bloom算法实现（Unity）"><a href="#b-Bloom算法实现（Unity）" class="headerlink" title="b). Bloom算法实现（Unity）"></a>b). Bloom算法实现（Unity）</h1><h2 id="C-部分"><a href="#C-部分" class="headerlink" title="C#部分"></a>C#部分</h2><p>调用OnRenderImage函数获取纹理和传输参数给Shader：</p>
<h2 id="Shader部分"><a href="#Shader部分" class="headerlink" title="Shader部分"></a>Shader部分</h2><p>使用4个Pass计算Bloom效果：</p>
<p>第一个Pass提取较亮区域<br>第二个、第三个Pass分别在竖直和水平方向上计算高斯模糊<br>最后一个Pass将计算的结果与原图像进行混合</p>
<h1 id="c-Bloom算法应用"><a href="#c-Bloom算法应用" class="headerlink" title="c). Bloom算法应用"></a>c). Bloom算法应用</h1><p>配合自发光贴图使用<br>配合特效（如烟花）<br>GodRay（基于径向的后处理）<br>使用HDR时，配合Tonemapping（配合色调映射的bloom效果更加柔和）</p>
<span id="more"></span>
<h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><h2 id="带Mask的Bloom效果"><a href="#带Mask的Bloom效果" class="headerlink" title="带Mask的Bloom效果"></a>带Mask的Bloom效果</h2><p><img src="/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/noBloom_HW.png" alt="noBloom_HW" style="zoom: 33%;"></p>
<p><img src="/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/Bloom_HW.png" alt="Bloom_HW" style="zoom: 33%;"></p>
<p><img src="/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/Bloom_Mask.png" alt="Bloom_Mask" style="zoom:25%;"></p>
<ul>
<li><p><strong>实现思路：</strong></p>
<ul>
<li><p>修改对应物体fragment返回的Alpha值作为Bloom遮罩</p>
<p><img src="/2023/02/15/HPP_Graphics_4.1_Bloom%E7%AE%97%E6%B3%95/Debug.png" alt="Debug" style="zoom: 33%;"></p>
</li>
<li><p>黑为Bloom效果最强，白为无Bloom（因为点光源会使得后处理中Alpha通道比FS返回的大，因此采用黑色Bloom效果最强，<em>待验证</em>）</p>
</li>
<li></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>效果</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_4.2 SSAO</title>
    <url>/2023/02/15/HPP_Graphics_4.2_SSAO/</url>
    <content><![CDATA[<h1 id="a-AO-Ambient-Occlusion"><a href="#a-AO-Ambient-Occlusion" class="headerlink" title="a). AO(Ambient Occlusion)"></a>a). AO(Ambient Occlusion)</h1><p>环境光遮蔽，全称Ambient Occlusion，是计算机图形学中的一种着色和渲染技术,模拟光线达到物体的能力的粗略的全局方法，描述光线到达物体表面的能力。</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/AO00.png" alt="AO00"></p>
<h1 id="b-SSAO-Screen-Space-Ambient-Occlusion"><a href="#b-SSAO-Screen-Space-Ambient-Occlusion" class="headerlink" title="b). SSAO(Screen Space Ambient Occlusion)"></a>b). SSAO(Screen Space Ambient Occlusion)</h1><p>屏幕空间环境光遮蔽，全称Screen Space Ambient Occlusion，一种用于计算机图形中实时实现近似环境光遮蔽效果的渲染技术。通过获取像素的<strong>深度缓冲</strong>、<strong>法线缓冲</strong>以及<strong>像素坐标</strong>来计算实现，来近似的表现物体在间接光下产生的阴影。</p>
<h2 id="b-1-SSAO原理"><a href="#b-1-SSAO原理" class="headerlink" title="b.1). SSAO原理"></a>b.1). SSAO原理</h2><p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/SSAO原理.png" alt="SSAO原理"></p>
<ol>
<li><p>获取深度、法线（View Space）缓冲；</p>
<ul>
<li><p>Normal Buffer：</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/NormalBuffer.png" alt="NormalBuffer"></p>
</li>
</ul>
</li>
<li><p>重构像素相机空间中的坐标；</p>
<ul>
<li><p>通过深度缓冲的depth值重构（近似）该视角下的三维场景；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/DepthBuffer.png" alt="DepthBuffer" style="zoom:25%;"></p>
<ul>
<li>为什么是近似：Depth Buffer中深度值为0~1，并不能反应无穷远（天空等）。常用的办法是把1映射到View Space的远平面。</li>
</ul>
</li>
</ul>
</li>
<li><p>法向半球随机采样，计算掩蔽因子，进而得到AO强度（For循环）；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/法向半球.png" alt="法向半球"></p>
<ul>
<li>每一次for循环都会在法线半球中获取一个随机向量，根据这个向量我们会求出它对应的深度值，然后跟深度缓冲中对应采样像素位置的深度值做比较，如果大于（灰色点），则认为有遮蔽，算进加权中，最后我们合成AO，然后再加上一些后期处理优化效果。</li>
</ul>
</li>
</ol>
<span id="more"></span>
<h2 id="b-2-Unity实现部分"><a href="#b-2-Unity实现部分" class="headerlink" title="b.2). Unity实现部分"></a>b.2). Unity实现部分</h2><p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/AO_Flow.png" alt="AO_Flow"></p>
<p>SSAO的shader中共有三个Pass：</p>
<ol>
<li>计算生成AO；</li>
<li>模糊 / 滤波</li>
<li>AO与Color buffer混合；</li>
</ol>
<h3 id="b-2-1-计算AO"><a href="#b-2-1-计算AO" class="headerlink" title="b.2.1). 计算AO"></a>b.2.1). 计算AO</h3><p>在基于法线方向，建立法线空间中法向半球的采样块。</p>
<p>在采样块中循环生成采样点，判断是否被遮蔽</p>
<p>因为实时渲染的性能问题，所以采样点数量不会很多，导致出现“油漆”般的画面</p>
<p>引入噪声, 将每个采样点以原点法线方向为旋转轴旋转随机的角度。这样的新采样点会变得极其不规则, 更加离散化。将低频的条纹转化成高频的噪声；</p>
<ol>
<li><p>计算相机到像素点的坐标（<a href="https://zhuanlan.zhihu.com/p/145400372">Unity Shader中的ComputeScreenPos函数</a>）对应的远平面的向量（屏幕空间转换到裁剪空间后乘以远平面距离，再转换到观察空间）；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/vertAO.png" alt="vertAO"></p>
</li>
</ol>
<ol>
<li><p>获得着色点的01线性深度值、观察空间下的法线向量；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/GetDepthAndNormal.png" alt="GetDepthAndNormal"></p>
</li>
<li><p>然后在法向半球采样块中随机随机采样一个向量，得到<strong>法向半球向量</strong>。并由此构建经过旋转的法线空间的正交基。</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Noise01a.png" alt="Noise01a"></p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/TBN.png" alt="TBN"></p>
</li>
<li><p>将此前生成的随机向量转换到法线空间中。</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Noise02a.png" alt="Noise02a"></p>
<p>循环操作，将每一个向量转换为采样点，坐标基于切线空间，再计算随机法向半球后的向量，然后进行空间转换，切线空间到裁剪空间到屏幕空间。（裁剪空间到屏幕空间进行01映射）</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/scrRandomVec.png" alt="scrRandomVec"></p>
<p>获得<strong>采样点</strong>的法线深度信息，计算遮蔽，最后得到AO图通过rscreenPos来采样_CameraDepthNormalsTexture，转化成屏幕空间对应的深度值，然后对比linear01Depth（着色点深度，更准确的情况下应该使用viewRandomPos对应的01线性深度），只要大于linear01Depth，则在加权计算AO</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/For02a.png" alt="For02a"></p>
</li>
</ol>
<h4 id="AO核心代码"><a href="#AO核心代码" class="headerlink" title="AO核心代码"></a>AO核心代码</h4><p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/fragAO.png" alt="fragAO"></p>
<h4 id="延迟渲染-ssao"><a href="#延迟渲染-ssao" class="headerlink" title="延迟渲染+ssao"></a>延迟渲染+ssao</h4><p>因为在前向渲染的ssao实现过程中，需要获取到相机的法线深度图进行采样得到相应的信息，进行后续的操作。而因为延迟渲染正好需要先生成一个GBuffer，即已包含了ssao执行所需要的法线深度等信息。所以在shader代码编写中有所不同</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Defer01.png" alt="Defer01"></p>
<p>在c#脚本中需要加入渲染路径的判断</p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Defer02.png" alt="Defer02"></p>
<h3 id="b-2-2-基于法线的双边滤波（Bilateral-Filter）"><a href="#b-2-2-基于法线的双边滤波（Bilateral-Filter）" class="headerlink" title="b.2.2). 基于法线的双边滤波（Bilateral Filter）"></a>b.2.2). 基于法线的双边滤波（Bilateral Filter）</h3><p><a href="https://blog.csdn.net/puppet_master/article/details/83066572">https://blog.csdn.net/puppet_master/article/details/83066572</a></p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Blur.png" alt="Blur"></p>
<h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/HomeworkAO.png" alt="HomeworkAO"></p>
<table frame="void">
    <tr>
    <td><center><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework01.png" alt="Homework01" width="600"></center></td>
    <td><center><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework02.png" alt="Homework02" width="600"></center></td>
    </tr>
</table>

<hr>
<p>这场景好像不太明显，只有在大图里看的清楚，</p>
<h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/HomeworkAO_b.png" alt="HomeworkAO_b"></p>
<table frame="void">
    <tr>
    <td><center><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework01b.png" alt="Homework01b" width="600"></center></td>
    <td><center><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework02b.png" alt="Homework02b" width="600"></center></td>
    </tr>
</table>

<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework02b.png" alt="Homework02b"></p>
<p><img src="/2023/02/15/HPP_Graphics_4.2_SSAO/Homework01b.png" alt="Homework01b"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>效果</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_4.3 实时阴影介绍</title>
    <url>/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="图形-4-3-实时阴影介绍"><a href="#图形-4-3-实时阴影介绍" class="headerlink" title="图形 4.3 实时阴影介绍"></a>图形 4.3 实时阴影介绍</h1><p>更深的可看笔记Games202 Real-time Shadow</p>
<h1 id="a-基于图片实时阴影技术"><a href="#a-基于图片实时阴影技术" class="headerlink" title="a). 基于图片实时阴影技术"></a>a). 基于图片实时阴影技术</h1><h2 id="a-1-Shadow-Map"><a href="#a-1-Shadow-Map" class="headerlink" title="a.1). Shadow Map"></a>a.1). Shadow Map</h2><ul>
<li><p><strong>关键思想：</strong>一个点在相机视角中可见，但在光源视角中不可见，那该点就处于阴影中。</p>
</li>
<li><p><strong>做法：</strong> 在光源视角下渲染深度图。对于着色点$A$，将其转换到光源视角（其他空间也行，只要两者在同一坐标空间）后，与Shadow Map中对应点进行深度比较，判断一点是否在阴影中；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/深度比较.png" alt="深度比较" style="zoom:50%;"></p>
</li>
</ul>
<blockquote>
<p>A <strong>2-Pass</strong> Algorithm</p>
<ol>
<li>Light pass: Generate the SM(Shadow Map)</li>
<li>Camera pass: uses the SM</li>
</ol>
</blockquote>
<h3 id="Pass-1-Render-from-Light"><a href="#Pass-1-Render-from-Light" class="headerlink" title="Pass 1: Render from Light"></a>Pass 1: Render from Light</h3><ul>
<li>输出一张<strong>光源视角</strong>的<strong>深度图（Depth Buffer）</strong></li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SM_Pass01.png" alt="SM_Pass01"></p>
<h3 id="Pass-2-Render-from-Eye-Camera"><a href="#Pass-2-Render-from-Eye-Camera" class="headerlink" title="Pass 2: Render from Eye(Camera)"></a>Pass 2: Render from Eye(Camera)</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SM_Pass02.png" alt="SM_Pass02"></p>
<ul>
<li><p>将光源视角对应的深度转换到View Space, 与Camera视角的深度进行深度比较；</p>
<ul>
<li>如$Depth_{cam} &gt; Depth_{light}$ ，那说明该点<strong>在阴影中</strong>（相机可见，光源不可见）</li>
<li>如$Depth_{cam} &lt; Depth_{light}$ ，那说明该点在<strong>不在阴影中</strong>（相机可见，光源可见）</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="a-2-Unity中的屏幕空间阴影映射"><a href="#a-2-Unity中的屏幕空间阴影映射" class="headerlink" title="a.2). Unity中的屏幕空间阴影映射"></a>a.2). Unity中的屏幕空间阴影映射</h2><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SM00.png" alt="SM00" style="zoom:50%;"></p>
<p>Unity的阴影映射是<strong>屏幕空间阴影映射</strong>，即<strong>逐像素</strong>生成屏幕空间的阴影贴图后，再在Shading中采样，进而着色。</p>
<p><strong>Step1:</strong> 渲染屏幕空间的<strong>深度贴图</strong>；</p>
<p><strong>Step2:</strong> 调用每个物体的Shadow Cast Pass，从光源方向<strong>生成Shadow Map</strong>；</p>
<p><strong>Step3:</strong> 屏幕空间进行<strong>阴影收集（Shadow Collector）</strong>，即进行深度比较后，得到屏幕空间的阴影贴图；</p>
<ul>
<li>Unity采用了<strong>屏幕空间</strong>的阴影映射，在进行阴影收集时，是逐Pixel进行的。</li>
</ul>
<p><strong>Step4:</strong> Shading时，用屏幕空间的uv，采样Step3中得到的屏幕空间阴影贴图；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SM01.png" alt="SM01" style="zoom: 33%;"></p>
<h1 id="b-阴影映射优化"><a href="#b-阴影映射优化" class="headerlink" title="b). 阴影映射优化"></a>b). 阴影映射优化</h1><h2 id="b-1-Self-occlusion-自遮挡"><a href="#b-1-Self-occlusion-自遮挡" class="headerlink" title="b.1). Self occlusion(自遮挡)"></a>b.1). Self occlusion(自遮挡)</h2><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SelfOcclusion.png" alt="SelfOcclusion"></p>
<ul>
<li><strong>Self occlusion：</strong> 也被称作Z-Fighting，阴影自遮挡，造成阴影毛刺的现象；</li>
<li><strong>原因：</strong> 如上图，<ul>
<li>Shadow Map分辨率有限，一个像素内记录的深度值相同。如图中红色和橙色斜线表示Shadow Map中深度相同的位置（$Depth_A = Depth_{A’}$）；</li>
<li>当计算平面中$B$点是否在阴影中时，$Depth_{light} = z1 = Depth_A$，而相机视角下的点$B$转换到光源视角下对应的深度为 $z2$ ，即$Depth_{cam} = z2 = Depth_B$</li>
<li>因此，$Depth_{cam} &gt; Depth_{light}$ ，说明该点<strong>在阴影中</strong>，因此造成Self occlusion</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>解决方法：</strong> 引入<strong>Bias</strong>；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/SelfOcclusion_Bias.png" alt="SelfOcclusion_Bias" style="zoom:50%;"></p>
<ul>
<li>认为对于$B$点，如$Depth_{cam} &gt; Depth_{light}$，但$Depth_{light}$ 处于橙色中，那该点仍然不在阴影中；</li>
<li>即：<ul>
<li>$Depth_{cam} &gt; Depth_{light}+bias$，才使得该点<strong>在阴影中</strong>；</li>
<li>$Depth_{cam} &lt; Depth_{light}+bias$，该点<strong>不在阴影中</strong>；</li>
</ul>
</li>
<li>易得，当光源方向垂直于平面时，所需的Bias最小，因此可引入光源与平面法线的夹角 $cos\alpha$ ，来调整Bias大小；</li>
</ul>
</li>
</ul>
<ul>
<li>引入bias会造成的问题：Detached shadow(不接触阴影，Peter Panning)</li>
</ul>
<h3 id="b-1-1-偏移优化（Depth-Bias）"><a href="#b-1-1-偏移优化（Depth-Bias）" class="headerlink" title="b.1.1). 偏移优化（Depth Bias）"></a>b.1.1). 偏移优化（Depth Bias）</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/DepthBias01.png" alt="DepthBias01"></p>
<ul>
<li>深度偏移：简单添加Bias，使得该像素深度（Shading Point的深度，而不是SM中的深度）朝光源靠近；</li>
<li>法线偏移：沿表面法线法线向外偏移；</li>
<li>偏移单位是阴影纹理映射的纹素大小；</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/NormalBias01.png" alt="NormalBias01" style="zoom: 50%;"></p>
<h3 id="b-1-2-Unity中的偏移优化"><a href="#b-1-2-Unity中的偏移优化" class="headerlink" title="b.1.2). Unity中的偏移优化"></a>b.1.2). Unity中的偏移优化</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/Unity_Bias.png" alt="Unity_Bias"></p>
<hr>
<h2 id="b-2-走样"><a href="#b-2-走样" class="headerlink" title="b.2). 走样"></a>b.2). 走样</h2><p>以信号重建的过程来审视阴影映射：</p>
<ul>
<li>初始采样：渲染Shadow Map;</li>
<li>重采样：从摄影机视角对Shadow Map重采样；</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/ShadowMap_AA01.png" alt="ShadowMap_AA01"></p>
<h3 id="b-2-1-初始采样-透视走样"><a href="#b-2-1-初始采样-透视走样" class="headerlink" title="b.2.1). 初始采样 - 透视走样"></a>b.2.1). 初始采样 - 透视走样</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/透视走样.png" alt="透视走样"></p>
<ul>
<li><strong>原因：</strong> 由于Shadow Map初始采样是在摄影机进行透视投影之前（左图），使得<strong>经过透视投影后，近景大量pixel与Shadow Map中的同一个texel对应</strong>造成走样。</li>
<li><strong>解决方法：</strong> <ol>
<li>在光源位置采样获得Shadow Map之前，我们先做一次透视投影。即采样经过透视投影后的场景；</li>
<li><strong>级联阴影映射（Cascaded Shadow Map）</strong>，减小近景和远景对应到屏幕空间中像素大小的差异；</li>
</ol>
</li>
</ul>
<h2 id="b-3-级联阴影映射（Cascaded-Shadow-Map）"><a href="#b-3-级联阴影映射（Cascaded-Shadow-Map）" class="headerlink" title="b.3). 级联阴影映射（Cascaded Shadow Map）"></a>b.3). 级联阴影映射（Cascaded Shadow Map）</h2><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/CSM.png" alt="CSM"></p>
<p><strong>实现：</strong>通过平行于视图方向的切片将视锥体截成多个子视锥体，每一个子视锥体都对应一张Shadow Map，每张Shadow Map独立计算但<strong>分辨率相同</strong>。</p>
<ul>
<li>如果在View Space也就是视锥体划分级联，一旦镜头转动会产生很严重的闪烁，所以<strong>一般划分级联是在光源空间中划分</strong>。(<a href="https://zhuanlan.zhihu.com/p/92017307">https://zhuanlan.zhihu.com/p/92017307</a>)</li>
</ul>
<h1 id="c-PCSS-Percentage-Closer-Soft-Shadow"><a href="#c-PCSS-Percentage-Closer-Soft-Shadow" class="headerlink" title="c). PCSS(Percentage-Closer Soft Shadow)"></a>c). PCSS(Percentage-Closer Soft Shadow)</h1><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCSS.png" alt="PCSS"></p>
<h2 id="c-1-PCF-Percentage-Closer-Filtering"><a href="#c-1-PCF-Percentage-Closer-Filtering" class="headerlink" title="c.1). PCF(Percentage Closer Filtering)"></a>c.1). PCF(Percentage Closer Filtering)</h2><ul>
<li>PCF用于抗锯齿，而不用于软阴影（用于软阴影的叫PCSS，两者实质是一个东西，但应用不同叫法不同）</li>
<li>在<strong>生成Shadow Map后，阴影比较时（即对阴影比较的结果）</strong>，进行Filtering<ul>
<li>面光源生成Shadow Map：以面光源的中心点(放置相机)生成shadow map</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCF.png" alt="PCF"></p>
<ul>
<li><p><strong>做法：</strong> 不止对着色点与其在Shadow Map中的对应点进行深度比较，而是<strong>着色点深度</strong>与其<strong>在Shadow Map中对应点及其周围点深度</strong>进行比较，最后<strong>对各个Visibility的结果取平均值</strong>（或加权平均）</p>
<ul>
<li><strong>eg1</strong>. $P$点在Cam视角下深度为$Depth_p$，转换到光源视角下深度为$Depth_{p’}$，$Depth_{p’}$ 与其在Shadow Map中对应点周围3x3（<strong>Filter size</strong>）像素进行比较，得到结果<script type="math/tex; mode=display">
\begin{array}{l}
1,0,1 \\
1,0,1 \\
1,1,0
\end{array}</script>取平均得到Visibility为 0.667</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Filter size</strong><ul>
<li>Small -&gt; sharper</li>
<li>Large -&gt; softer</li>
<li>为选取合适的Filter size，产生了PCSS</li>
</ul>
</li>
</ul>
<h2 id="c-2-PCSS-Percentage-Closer-Soft-Shadow"><a href="#c-2-PCSS-Percentage-Closer-Soft-Shadow" class="headerlink" title="c.2). PCSS(Percentage-Closer Soft Shadow)"></a>c.2). PCSS(Percentage-Closer Soft Shadow)</h2><h3 id="c-2-1-什么是PCSS？"><a href="#c-2-1-什么是PCSS？" class="headerlink" title="c.2.1). 什么是PCSS？"></a>c.2.1). 什么是PCSS？</h3><ul>
<li><strong>关键：</strong> 自适应Filter size</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCSS01.png" alt="PCSS01"></p>
<ul>
<li>观察可得：<ul>
<li>钢笔（Blocker）与接收平面（Receiver）的距离越小（笔尖），阴影越硬</li>
<li>钢笔（Blocker）与接收平面（Receiver）的距离越大（笔尖），阴影越软</li>
</ul>
</li>
<li>即阴影的软硬程度，一部分取决于Blocker和Receiver的距离</li>
</ul>
<hr>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCSS_Key.png" alt="PCSS_Key"></p>
<ul>
<li><p>阴影的软硬取决于</p>
<ul>
<li>$w_{Light}$ （光源的宽度）</li>
<li>$d_{Blocker}$ 与 $d_{BtoR}$ 的比值；</li>
</ul>
</li>
<li><p><strong>Blocker定义：</strong></p>
<p>Shading point变换到Light视角，对应深度为$Depth_{scene}$ 。<strong>查询区域内</strong>，深度值$z &lt; Depth_{scene}$ 的texel即为Blocker；</p>
</li>
<li><p>$d_{Blocker}$ 为 <strong>Average blocker distance</strong></p>
<ul>
<li><p><strong>Average blocker distance：</strong> Shadow Map一定范围内的Blocker的深度平均值</p>
</li>
<li><p>类似eg1</p>
<blockquote>
<p><strong>eg1</strong>. $P$点在Cam视角下深度为$Depth_p$，转换到光源视角下深度为$Depth_{p’}$，$Depth_{p’}$ 与其在Shadow Map中对应点周围3x3（<strong>Filter size</strong>）像素进行比较，得到结果</p>
<script type="math/tex; mode=display">
\begin{array}{l}
1,0,1 \\
1,0,1 \\
1,1,0
\end{array}</script><p>取平均得到Visibility为 0.667</p>
</blockquote>
<p>其中，Visibility为0的点，即 处于阴影中，$Depth_{cam} &gt; Depth_{light}+bias$ 的点即为Blocker，对Blocker在Shadow Map中的深度值取平均值，即得到Average blocker distance</p>
</li>
</ul>
</li>
</ul>
<h3 id="c-2-2-做法"><a href="#c-2-2-做法" class="headerlink" title="c.2.2). 做法"></a>c.2.2). 做法</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCSS_How.png" alt="PCSS_How"></p>
<p>首先将shading point点$x$投应到shadow map上,找到其对应的像素点$P$。PCSS算法的实现流程如下：</p>
<p>第一步：Blocker search，即获取<strong>某个区域</strong>的平均遮挡物深度（在点p附近取一个范围(这个范围是自己定义或动态计算的),将范围内各像素的最小深度与x的实际深度比较,从而判断哪些像素是遮挡物，把所有遮挡物的深度记下来取个平均值作为blocker distance。）</p>
<p>第二步：Penumbra estimation，使用平均遮挡物深度计算滤波核尺寸（用取得的遮挡物深度距离来算在PCF中filtering的范围。）</p>
<script type="math/tex; mode=display">
w_{\text {Penumbra }}=\left(d_{\text {Receiver }}-d_{\text {Blocker }}\right) \cdot w_{\text {Light }} / d_{\text {Blocker }}</script><p>第三步：Percentage Closer Filtering，对应该滤波核尺寸应用PCF算法。</p>
<ul>
<li>如何动态计算Blocker search的<strong>“某个范围”</strong><ul>
<li><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCSS_Region.png" alt="PCSS_Region"></li>
<li>Light越远，Region越小；Light越近，Region越大；（好像和图不太对应，如非要对应，就类似与Shadow Map位置不变，Light距离变大/小）</li>
</ul>
</li>
</ul>
<h4 id="那么PCSS中那些步骤会导致速度变慢？"><a href="#那么PCSS中那些步骤会导致速度变慢？" class="headerlink" title="那么PCSS中那些步骤会导致速度变慢？"></a>那么PCSS中那些步骤会导致速度变慢？</h4><ul>
<li><p>第一步：Blocker search，需要多次采样查询深度信息并比较，计算Blocker的平均深度$d_{Blocker}$</p>
</li>
<li><p>第三步：PCF，阴影越软→滤波核尺寸越大→采样查询次数变多→速度变慢</p>
<ul>
<li>由此可见，主要是多次采样并比较的方法使得速度变慢；</li>
</ul>
</li>
<li><p><strong>加速方法：</strong></p>
<ul>
<li>随机采样，后降噪；</li>
</ul>
<blockquote>
<p>如果觉得区域过大不想对每一个texels都进行比较,就可以通过随机采样其中的texels，而不是全部采样，会得到一个近似的结果,近似的结果就可能会导致出现噪声。工业的处理的方式就是先稀疏采样得到一个有噪声的visibility的图,接着再在图像空间进行降噪。</p>
</blockquote>
<ul>
<li><strong>Variance Soft Shadow Mapping(VSSM)</strong></li>
</ul>
</li>
</ul>
<hr>
<h3 id="c-2-3-Math"><a href="#c-2-3-Math" class="headerlink" title="c.2.3). Math"></a>c.2.3). Math</h3><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/PCF_02.png" alt="PCF_02"></p>
<script type="math/tex; mode=display">
V(x)=\sum_{q \in \mathcal{N}(p)} w(p, q) \cdot \chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right]</script><ul>
<li>其中$\chi^{+}$ 类似于$step()$ 函数<ul>
<li>$D_{\mathrm{SM}}(q)-D_{\text {scene }}(x) \geq 0$， 即$Depth_{ShadowMap} \geq Depth_{cam}$，$\chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right] = 1$</li>
<li>$D_{\mathrm{SM}}(q)-D_{\text {scene }}(x) &lt; 0$， 即$Depth_{ShadowMap} &lt; Depth_{cam}$，$\chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right] = 0$</li>
</ul>
</li>
</ul>
<h1 id="Homework-屏幕空间PCSS软阴影"><a href="#Homework-屏幕空间PCSS软阴影" class="headerlink" title="Homework - 屏幕空间PCSS软阴影"></a>Homework - 屏幕空间PCSS软阴影</h1><p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/HW_PCSS.png" alt="HW_PCSS" style="zoom:50%;"></p>
<p>本次实现了屏幕空间的软阴影。其主要步骤如下：</p>
<ol>
<li><p>渲染屏幕空间的<strong>深度贴图</strong>；</p>
</li>
<li><p>从光源方向<strong>生成Shadow Map</strong>；（下图深度经过EncodeFloatRGBA()，提高精度）</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/HW_PCSS01.png" alt="HW_PCSS01" style="zoom:25%;"></p>
</li>
<li><p>屏幕空间进行<strong>阴影收集（Shadow Collector）</strong>，即进行深度比较后，得到屏幕空间的阴影贴图；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/HW_PCSS02.png" alt="HW_PCSS02" style="zoom: 25%;"></p>
</li>
<li><p>Shading时，用屏幕空间的uv，采样Step3中得到的屏幕空间阴影贴图；</p>
<p><img src="/2023/02/15/HPP_Graphics_4.3_%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1%E4%BB%8B%E7%BB%8D/HW_PCSS03.png" alt="HW_PCSS03" style="zoom:25%;"></p>
</li>
</ol>
<p>至于为什么要使用屏幕空间的软阴影，而不是直接在Shader中实现阴影主要有以下考虑：</p>
<ol>
<li>屏幕空间的阴影可在一个Pass内完成，管理和调整方便，更贴近实际的应用；</li>
<li>屏幕空间的阴影性能开销小；</li>
<li>方便阴影的后处理；</li>
<li>此方案主要考虑场景阴影，而不考虑角色阴影。</li>
</ol>
<p>此方案主要有2个C#脚本，3个Shader实现。</p>
<ul>
<li>C#：<ol>
<li>DepthTextureCamera.cs: 实现从光源方向<strong>生成Shadow Map</strong>；</li>
<li>ShadowCollector.cs: 屏幕空间进行<strong>阴影收集（Shadow Collector）</strong></li>
</ol>
</li>
<li>Shader:<ol>
<li>CustomCaster.shader: 用于渲染深度图；</li>
<li>ShadowCollector.shader: 用于逐像素比较深度，并实现具体的PCSS算法；</li>
<li>CustromReciver.shader: 用于应用ShadowCollector得到的阴影图片，并通过屏幕空间的坐标进行采样，得到Visibility项；</li>
</ol>
</li>
</ul>
<p>以下，给出PCSS的主要代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float findBlocker(float2 UVfromLight, float ZReciver) &#123;	// 返回Blocker的平均深度</span><br><span class="line">    float num_occ = 0.0f;</span><br><span class="line">    float Z_avg = 0.0f;</span><br><span class="line">    float filterSize = 30.0f / _cusShadowMap_TexelSize.z;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i&lt;BLOCKER_SEARCH_NUM_SAMPLES; i++) &#123;</span><br><span class="line">        float Z_SM = DecodeFloatRGBA(tex2D(_cusShadowMap, poissonDisk[i]*filterSize + UVfromLight));</span><br><span class="line">        if (Z_SM &lt; ZReciver) &#123;</span><br><span class="line">            num_occ++;</span><br><span class="line">            Z_avg += Z_SM;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (num_occ == 0) &#123;</span><br><span class="line">        return 1.0;</span><br><span class="line">    &#125;</span><br><span class="line">    return Z_avg / num_occ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float PCSS(float4 coord) &#123;</span><br><span class="line">    float zReceiver = coord.z / coord.w;</span><br><span class="line">    float2 uv = coord.xy / coord.w;</span><br><span class="line">    uv = uv * 0.5 + 0.5;</span><br><span class="line">#if defined (SHADER_TARGET_GLSL)    //(-1, 1) -&gt; (0, 1)</span><br><span class="line">    zReceiver = zReceiver * 0.5 + 0.5;</span><br><span class="line"></span><br><span class="line">#elif defined (UNITY_REVERSED_Z)</span><br><span class="line">    zReceiver = 1 - zReceiver;</span><br><span class="line">#endif</span><br><span class="line">    poissonDiskSamples(uv);		// 泊松圆盘采样</span><br><span class="line">    float visibility = 0.0f;</span><br><span class="line"></span><br><span class="line">    float zBlocker = findBlocker(uv, zReceiver);</span><br><span class="line">    // 计算半影宽度</span><br><span class="line">    float wPenumbra = (zReceiver - zBlocker) * LIGHT_WIDTH / zBlocker;</span><br><span class="line"></span><br><span class="line">    float scale = 1.0f;</span><br><span class="line">    float filterSize = scale * wPenumbra / _cusShadowMap_TexelSize.z + 1.0f / _cusShadowMap_TexelSize.z;;</span><br><span class="line">	</span><br><span class="line">    // PCF</span><br><span class="line">    for (int i = 0; i &lt; PCF_NUM_SAMPLES; i++) &#123;</span><br><span class="line">        float zNear = DecodeFloatRGBA(tex2D(_cusShadowMap, poissonDisk[i]*filterSize + uv));</span><br><span class="line">        if (zNear &gt; zReceiver) &#123;</span><br><span class="line">            visibility += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return visibility / PCF_NUM_SAMPLES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>算法</tag>
        <tag>阴影</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_3.7 移动端TB(D)R架构基础</title>
    <url>/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="a-名词解释"><a href="#a-名词解释" class="headerlink" title="a). 名词解释"></a>a). 名词解释</h1><h2 id="System-on-Chip-Soc"><a href="#System-on-Chip-Soc" class="headerlink" title="System on Chip(Soc)"></a>System on Chip(Soc)</h2><ul>
<li>Soc是把CPU、GPU、内存、通信基带、GPS模块等整合在一起的芯片的称呼。常见有A系Soc（苹果），骁龙Soc（高通），麒麟Soc（华为），联发科Soc，猎户座Soc（三星），去年苹果推出的M系Soc，暂用于Mac，但这说明手机、笔记本和PC的通用芯片已经出现了</li>
</ul>
<h2 id="物理内存"><a href="#物理内存" class="headerlink" title="物理内存"></a>物理内存</h2><ul>
<li>也就是我们常说的手机内存，也叫<strong>System Memory</strong>。Soc中CPU和GPU共用一块片内LPDDR物理内存。此外CPU和GPU还分别有自己的告诉SRAM的Cache缓存，也叫<strong>On-chip Memory</strong>。读取System Memory的时间消耗大概是On-chip Memory的几倍到几十倍</li>
</ul>
<h2 id="On-Chip-Buffer"><a href="#On-Chip-Buffer" class="headerlink" title="On-Chip Buffer"></a>On-Chip Buffer</h2><p>在TB(D)R架构下会存储Tile的颜色、深度和模板缓冲，读写修改都非常快。如果Load/Store指令中缓冲需要被Preserve，将会被写入一份到System Memory中。</p>
<h2 id="Stall"><a href="#Stall" class="headerlink" title="Stall"></a>Stall</h2><p>当GPU两次计算结果之间有依赖关系而必须串行时，等待的过程便是Stall</p>
<h2 id="FillRate"><a href="#FillRate" class="headerlink" title="FillRate"></a>FillRate</h2><p>像素填充率 = ROP运行的时钟频率 x ROP的个数 x 每个时钟ROP可以处理的像素个数</p>
<h2 id="TBR（Tile-Based-Deferred-Rendering）"><a href="#TBR（Tile-Based-Deferred-Rendering）" class="headerlink" title="TBR（Tile-Based (Deferred) Rendering）"></a>TBR（Tile-Based (Deferred) Rendering）</h2><p>TBR（Tile-Based (Deferred) Rendering）是目前主流的移动GPU渲染架构，对应一般PC上的GPU渲染架构则是IMR（Immediate Mode Rendering ）。</p>
<ul>
<li>TBR流水线：顶点着色器 - Defer - 光栅化 - 片元着色器</li>
<li>TBDR流水线：顶点着色器 - Defer - 光栅化 - Defer - 片元着色器</li>
</ul>
<h2 id="Deffer"><a href="#Deffer" class="headerlink" title="Deffer"></a>Deffer</h2><p> 延迟，从渲染数据的角度来看，就是 ”阻塞+批处理“ GPU ”一帧“ 的多个数据，然后一起处理</p>
<hr>
<h1 id="b-立即渲染（IMR，Immediate-Mode-Rendering-）"><a href="#b-立即渲染（IMR，Immediate-Mode-Rendering-）" class="headerlink" title="b). 立即渲染（IMR，Immediate Mode Rendering ）"></a>b). 立即渲染（IMR，Immediate Mode Rendering ）</h1><ul>
<li><p>IMR是PC上GPU采用的架构</p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/IMR.png" alt="IMR"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/IMR_Pipeline.png" alt="IMR_Pipeline"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/IMR_Pipeline2.png" alt="IMR_Pipeline2" style="zoom:33%;"></p>
</li>
</ul>
<h1 id="c-基于块元渲染的TB-D-R"><a href="#c-基于块元渲染的TB-D-R" class="headerlink" title="c). 基于块元渲染的TB(D)R"></a>c). 基于块元渲染的TB(D)R</h1><p>TB(D)R宏观上总共分为两个阶段：</p>
<ol>
<li><strong>分图元：</strong> 第一阶段执行所有几何相关的处理，并生成Primitive List（图元列表），并且<strong>确定每个Tile上面有哪些Primitive</strong></li>
<li>第二阶段逐Tile执行 光栅化后 写入Tile Buffer（片上内存），并在完成后将 Frame BUffer 从 Tile Buffer 写回到 System Memory中；</li>
</ol>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/TBR_TBDR_Flow.png" alt="TBR_TBDR_Flow"></p>
<span id="more"></span>
<h2 id="c-1-TBDR-Pipeline"><a href="#c-1-TBDR-Pipeline" class="headerlink" title="c.1). TBDR Pipeline"></a>c.1). TBDR Pipeline</h2><p>下图为PowerVR的TBDR：</p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/TBDR_Pipeline.png" alt="TBDR_Pipeline"></p>
<ul>
<li>Tilling后将图元列表和顶点数据传到System Memory，待需要光栅化时从System Memory取出。光栅化后进行HSR（因为是PowerVR的流程图所以是HSR）或Depth Test会将结果写入On-chip Buffer。同样，在逐片元操作后，会将Tile的结果写入Tile Buffer，并在完成Frame Buffer后从Tile Buffer写回到System Memory中</li>
</ul>
<p>下图为三星提出的流程图：</p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/TBDR_Pipeline2.png" alt="TBDR_Pipeline2"></p>
<h2 id="c-2-TBR和IMR对比"><a href="#c-2-TBR和IMR对比" class="headerlink" title="c.2). TBR和IMR对比"></a>c.2). TBR和IMR对比</h2><p>(a)为TBR，(b)为IMR</p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/TBR_IMR.png" alt="TBR_IMR"></p>
<ul>
<li><p><strong>TBR</strong>的核心目的是<strong><font color="red">降低带宽，减少功耗</font></strong>，但渲染帧率上并不比<strong>IMR</strong>快</p>
</li>
<li><p>图（a）TBR架构</p>
<ul>
<li><p>几何处理数据形成了FrameData（放在System Memory上）</p>
</li>
<li><p>这些Frame Data经过片段处理，结果放在了Tile Buffer上（片的内存上）</p>
</li>
<li><p>最后的结果会刷到FrameBuffer中（System Memory上）</p>
</li>
</ul>
</li>
<li><p>图（b）IMR架构</p>
<ul>
<li>对比TBR有以下两种区别<ul>
<li>几何处理数据直接到片段处理，没有中间数据（Frame Data）</li>
<li>直接刷到System Memory上了，没有经过片内存（On-Chip Memory）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="TBR优点："><a href="#TBR优点：" class="headerlink" title="TBR优点："></a>TBR优点：</h3><ol>
<li>TBR大大<strong>减少了Overdraw</strong>，PowerVR使用了<strong>HSR</strong>技术，Mali使用了<strong>Forward Pixel Killing</strong>技术，目的是为了最大限度减少被遮挡Pixel的Texturing和shading；</li>
<li>TBR是Cache friendly，在cache里读写的速度比全局内存的速度要快得多，以降低帧率为代价，降低带宽，省电；</li>
</ol>
<h3 id="TBR缺点："><a href="#TBR缺点：" class="headerlink" title="TBR缺点："></a>TBR缺点：</h3><ol>
<li>Binning过程在Vertex阶段之后，将输出的集合数据写入到System Memory，然后才被FS读取，<strong>集合数据过多的管线，容易在Binning过程产生性能瓶颈；</strong></li>
<li>如一个三角形同时在多个Tile上，需要多次绘制（和Games101RayTracing中空间划分容易造成同一个Object存在多个叶子节点的原因类似）。这意味着总渲染时间高于IMR；</li>
</ol>
<h1 id="d-第一个Defer：Binning"><a href="#d-第一个Defer：Binning" class="headerlink" title="d). 第一个Defer：Binning"></a>d). 第一个Defer：Binning</h1><ul>
<li><p><strong>概念：将图元分配到块元的过程</strong></p>
</li>
<li><p><strong>过程：</strong> </p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/Binning.png" alt="Binning"></p>
</li>
<li><p>注释：</p>
<ul>
<li>第二幅图里的红色三角形，只用一个块元就能渲染，所以它只会被分配到一个块元中</li>
<li>第四幅图里的棕色三角形，需要多个块元才能渲染，所以它需要分配到9个块元中一起渲染</li>
</ul>
</li>
<li><p><em>如果你的项目中binning过程相比其他耗时长的话，就要考虑一下是不是几何数据过多了</em></p>
</li>
</ul>
<h1 id="e-第二个Defer：不同GPU-的-Early-Depth-Test"><a href="#e-第二个Defer：不同GPU-的-Early-Depth-Test" class="headerlink" title="e). 第二个Defer：不同GPU 的 Early-Depth-Test"></a>e). 第二个Defer：不同GPU 的 Early-Depth-Test</h1><h2 id="Forward-Pixel-Kill"><a href="#Forward-Pixel-Kill" class="headerlink" title="Forward Pixel Kill"></a>Forward Pixel Kill</h2><p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/Forward Pixel Kill.png" alt="Forward Pixel Kill"></p>
<ul>
<li><strong>Arm Mali</strong><ul>
<li>采用Forward Pixel Kill技术</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>位于管线的位置：</strong></p>
<ul>
<li>发生在Early-z之后</li>
</ul>
</li>
<li><p><strong>数据结构：</strong></p>
<ul>
<li>先进先出的队列</li>
</ul>
</li>
<li><p><strong>简单概括一下：</strong></p>
<ul>
<li><p>队列中有4个Quad（可以理解为2×2像素的平面），每个Quad有屏幕上位置的数据和Z数据</p>
</li>
<li><p>Z越大代表离摄像机越远</p>
</li>
<li><p>根据屏幕上相同位置（pos）的不同z，对不透明的像素进行替换（有近的就不渲染远的），这个过程叫作killed</p>
</li>
</ul>
</li>
</ul>
<h2 id="HSR"><a href="#HSR" class="headerlink" title="HSR"></a>HSR</h2><p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/HSR.png" alt="HSR"></p>
<ul>
<li><p>PowerVR的<strong>HSR</strong></p>
<ul>
<li>HSR = Hide Surface Removal隐形面剔除</li>
</ul>
</li>
<li><p>大体实现原理：</p>
<ul>
<li>虚拟出一个射线，当它遇到第一个不透明的物体时就会停下来，这样就会打断后面三角形的后续ps处理</li>
</ul>
</li>
</ul>
<h1 id="f-优化建议"><a href="#f-优化建议" class="headerlink" title="f). 优化建议"></a>f). 优化建议</h1><ol>
<li><p><strong>记得在不使用FrameBuffer的时候clear或discard</strong></p>
<ul>
<li><p>这样做主要是为了清空积存在tile buffer上的中间数据（前边提到的Frame Data），</p>
</li>
<li><p>所以对Unity里的rt（render texture）的使用也特别说明一下：</p>
</li>
<li><p>当我们不再使用这个rt的时候，尽量调用一次Discard</p>
</li>
<li><p>在OpenGl ES上，要善用glclear，glInvalidateFrameBuffer，避免不必要的Resolve（tile buff刷新到system memory）行为</p>
</li>
</ul>
</li>
<li><p><strong>不要在一帧里频繁的切换FrameBuffer的绑定</strong></p>
<ul>
<li>本质：减少tile buffer和system memory之间的stall（同步）操作</li>
</ul>
</li>
</ol>
<ol>
<li><strong>对于移动平台，建议使用Alpha混合，而非Alpha测试。</strong><ul>
<li>是一个经验性的结论</li>
<li>在实际使用的过程中应该使用比较两者的表现</li>
<li>通常情况下，移动端应该避免使用Alpha混合来实现透明，如果确实要用，尝试缩小混合区域的覆盖范围</li>
</ul>
</li>
</ol>
<ol>
<li><strong>手机上必须用Alpha Test时，先做一遍Depth Prepass（参考Alpha Test 的双pass优化思路）</strong></li>
<li><strong>图片尽量压缩</strong><ul>
<li>例如ASTC 、ETC2</li>
</ul>
</li>
</ol>
<ol>
<li><p><strong>图片尽量走mipmap</strong></p>
</li>
<li><p><strong>尽量使用从vertex shader传来的Varying变量uv值采样贴图（连续的），不要在Fragment shader里动态计算贴图的uv值（非连续的），否则CacheMiss</strong></p>
</li>
<li><p><strong>在延迟渲染中，尽量利用Tile Buffer（参考传统延迟渲染和TBDR）</strong></p>
</li>
<li><p><strong>如果在Unity中调整ProjectSetting—-Quality—-Rendering—-Texture Quality的不同设置，或者不同分辨率下，帧率有很大的变化，大概率是带宽出问题了</strong></p>
</li>
<li><p><strong>MASS在TBDR下反而是非常快速的</strong></p>
<ul>
<li><p>MSAA是硬件上的，发生在片上的</p>
<p><img src="/2023/02/15/HPP_Graphics_3.7_%E7%A7%BB%E5%8A%A8%E7%AB%AFTB(D)R%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/TBDR_Pipeline.png" alt="TBDR_Pipeline"></p>
<ul>
<li>可以看到Tilling后的几何数据存到System Memory后，在Texture and Shade时仍然可以调用，这也为MSAA提供了便利</li>
</ul>
</li>
<li><p>相比FSAA，MSAA在手机上是非常快的</p>
</li>
</ul>
</li>
</ol>
<ol>
<li><p><strong>少在Fragment shader中使用discard函数，调用gl_FragDepth从而打断Early-DT的过程</strong></p>
<ul>
<li>（hlsl中为Clip，glsl中为discard）</li>
</ul>
</li>
<li><p><strong>在shader使用浮点数精度值时，有目的的区分使用float，half</strong></p>
<ul>
<li>优点<ul>
<li>带宽减少</li>
<li>GPU中用的周期数减少，因为着色器编译器可以优化你的代码来提高并行化程度</li>
<li>要求的统一变量寄存器的数量减少，这样反而又降低了寄存器数量溢出风险。</li>
<li>具体参考：熊大的优化建议、shader数学计算优化技巧</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>在移动端的TBDR架构中，顶点处理部分（Binning过程）容易成为瓶颈</strong></p>
<ul>
<li>避免使用曲面细分shader，置换贴图等负操作</li>
<li><p>提倡使用模型LOD，（本质上减少Frame Data的压力）</p>
</li>
<li><p>Unity中尽早的在应用阶段做umbra（Unity内置）遮挡剔除、gpu的occlusion cull</p>
</li>
</ul>
</li>
</ol>
<hr>
<h1 id="【补充链接】"><a href="#【补充链接】" class="headerlink" title="【补充链接】"></a>【补充链接】</h1><p><a href="https://www.gpuinsight.com/gpu_performance/">GPU性能指标 </a>_</p>
<p><a href="https://developer.samsung.com/galaxy-gamedev/resources/articles/gpu-framebuffer.html">三星的GPU-FrameBuff指导</a></p>
<p><a href="https://www.techpowerup.com/231129/on-nvidias-tile-based-rendering">英伟达的TBR教学文章</a></p>
<p><a href="https://developer.arm.com/solutions/graphics-and-gaming/developer-guides/learn-the-basics/tile-based-rendering/single-page">ARM的TBR教学文章</a></p>
<p><a href="https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Performance/Performance.html">苹果OpenGL程序开发指南</a></p>
<p><a href="https://www.seas.upenn.edu/~pcozzi/OpenGLInsights/OpenGLInsights-TileBasedArchitectures.pdf">OpenGL Insights</a></p>
<p><a href="https://www.zhihu.com/question/49141824">知乎文章：Tile-based 和 Full-screen 方式的 Rasterization 相比有什么优劣</a></p>
<p><a href="https://www.evolife.cn/html/2016/87847_5.html">移动图形芯片的故事</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/112120206">移动设备GPU架构知识汇总</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33127345">再议移动平台的AlphaTest效率问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/347001411">移动平台GPU硬件学习与理解</a></p>
<p><a href="http://cdn.imgtec.com/sdk-documentation/Introduction_to_PowerVR_for_Developers.pdf">PowerVR开发者指南</a></p>
<p><a href="https://www.cnblogs.com/gameknife/p/3515714.html">Performance Tunning for Tile-Based Architecture Tile-Based架构下的性能调校</a></p>
<p><a href="https://www.zhihu.com/question/29904258">TBDR的HSR流程细节和使用AlphaBlend的效率提升程度</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/68158277">当我们谈优化时，我们谈些什么</a></p>
<p><a href="https://edu.uwa4d.com/course-intro/1/179">https://edu.uwa4d.com/course-intro/1/179</a> 虽然是收费的 但是很值得买，推荐</p>
<p><a href="https://zhuanlan.zhihu.com/p/58017068">Alpha Test的双pass 优化思路</a></p>
<p><a href="https://github.com/killop/anything_about_game#gpu-architecture">个人收藏</a></p>
<p><a href="https://www.youtube.com/watch?v=SeySx0TkluE&amp;pbjreload=101">Adreno Hardware Tutorial 3: Tile Based Rendering</a></p>
<p><a href="https://www.cnblogs.com/hamwj1991/p/12404551.html">Mali GPU的独有特性</a></p>
<p><a href="http://grmanet.sogang.ac.kr/ihm/cs170/20/HC27.25.531-Mali-T880-Bratt-ARM-2015_08_23.pdf">Mali-T880</a></p>
<p><a href="http://www.xionggf.com/post/my_books/u3d_shader_annotation">《Unity3D内建着色器源码剖析》</a></p>
<p><a href="http://www.xionggf.com/post/unity3d/shader/u3d_shader_optimization/">作者熊大的优化建议</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/22232448">GPU画像素的顺序是什么</a></p>
<p><a href="https://www.youtube.com/watch?v=Nc6R1hwXhL8&amp;t=973s&amp;pbjreload=101">Tile-based Rasterization in Nvidia GPUs with David Kanter of Real World Tech</a></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>硬件</tag>
        <tag>移动端</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_3.6 纹理压缩</title>
    <url>/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1 id="a-纹理压缩简介"><a href="#a-纹理压缩简介" class="headerlink" title="a). 纹理压缩简介"></a>a). 纹理压缩简介</h1><ul>
<li>纹理压缩是为了解决<strong>内存</strong>、<strong>带宽</strong>问题，专为在计算机图形渲染系统中存储<strong>纹理</strong>而使用的图像压缩技术；</li>
</ul>
<h2 id="a-1-图片压缩-vs-纹理压缩（为什么要纹理压缩）"><a href="#a-1-图片压缩-vs-纹理压缩（为什么要纹理压缩）" class="headerlink" title="a.1). 图片压缩 vs. 纹理压缩（为什么要纹理压缩）"></a>a.1). 图片压缩 vs. 纹理压缩（为什么要纹理压缩）</h2><ul>
<li>图片格式：JPG、PNG、GIF、BMP等；</li>
<li><strong>纹理压缩格式：</strong> ETC、DXT、ASTC等</li>
</ul>
<p>图片压缩格式大部分都是整体依赖，即不支持像素随机访问（基于整张图片进行压缩，无法直接实现单个像素的解析），且图片压缩格式无法被GPU识别，还需要经CPU解压缩成非压缩纹理格式才能被识别。<strong>因此采用基于块压缩的纹理压缩，能够更快读取像素所属字节进行解压缩以支持<font color="red">随机访问</font>。</strong></p>
<ul>
<li><p><strong>纹理管线：</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/TexturePipeline.png" alt="TexturePipeline"></p>
</li>
</ul>
<h1 id="b-常见纹理压缩格式"><a href="#b-常见纹理压缩格式" class="headerlink" title="b). 常见纹理压缩格式"></a>b). 常见纹理压缩格式</h1><p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/常见纹理压缩格式.png" alt="常见纹理压缩格式"></p>
<span id="more"></span>
<h2 id="b-1-DXTC"><a href="#b-1-DXTC" class="headerlink" title="b.1). DXTC"></a>b.1). DXTC</h2><p>DCTC纹理压缩格式来源于S3公司提出的S3TC算法，基本思想是把4×4的像素块压缩成一个64或128位的数据块，优点为创建了一个固定大小且独立的编码片段，没有共享查找表或其他依赖关系，简化了解码过程；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/DXT00.jpg" alt="DXT00"></p>
<h3 id="b-1-1-DXT1-BC1"><a href="#b-1-1-DXT1-BC1" class="headerlink" title="b.1.1). DXT1(BC1)"></a>b.1.1). DXT1(BC1)</h3><p>适用于：不包含透明信息RGB、只包含1位透明信息的贴图（即透明或完全不透明）</p>
<ul>
<li><p><strong>对与不包含透明信息的RGB</strong></p>
<ul>
<li><p>每一块具有两个16位RGB颜色值（<strong>RGB5<font color="red">6</font>5</strong>）$color_a、color_b$，代表了此4x4像素块中颜色极端值，然后通过线性插值计算出两个中间颜色值，16个2位索引值则表示每一个像素的颜色值索引。</p>
</li>
<li><p>所以，对与4x4的像素块：</p>
<ul>
<li><p>2x16 RGB颜色值（RGB565）</p>
</li>
<li><p>16x2 颜色索引值（索引2个颜色极端值+2个插值得到的中间值）</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/DXT1.png" alt="DXT1"></p>
<ul>
<li>对与包含1位透明信息的纹理<ul>
<li>通过$color_a、color_b$ 插值出一个颜色中间值 $color_c$ ，并用 $color_d$ 表示透明/不透明，其每个像素通过2位索引这四个颜色</li>
</ul>
</li>
<li><strong>压缩率：6:1</strong></li>
</ul>
<h3 id="b-1-2-DXT2-DXT3-BC2"><a href="#b-1-2-DXT2-DXT3-BC2" class="headerlink" title="b.1.2). DXT2/DXT3 (BC2)"></a>b.1.2). DXT2/DXT3 (BC2)</h3><p>DXT2/3与DXT1类似，表示颜色信息的64位数据块不变，另外附加了64位数据来表示每个像素的Alpha信息，整个数据块变为了128位；；</p>
<p>每个像素占用8位，0-3表示透明信息，4-7表示颜色信息；</p>
<h3 id="b-1-3-DXT4-DXT5-BC3"><a href="#b-1-3-DXT4-DXT5-BC3" class="headerlink" title="b.1.3). DXT4/DXT5 (BC3)"></a>b.1.3). DXT4/DXT5 (BC3)</h3><p>DXT4/5与DXT2/3的差异在于其Alpha信息是通过线性插值所得的，表示颜色信息的64位数据块依然不变，而Alpha信息则由2个8位Alpha极端值和16个3位索引值组成；</p>
<p>DXT5和DXT3分别计算RGB和A再混合，而DXT4和DXT2先混合RGBA，若A改变也不再重新混合而是直接改变整体颜色</p>
<h3 id="b-1-4-DXTnm"><a href="#b-1-4-DXTnm" class="headerlink" title="b.1.4). DXTnm"></a>b.1.4). DXTnm</h3><p>Unity内贴图类型选为法线后会采用DXTnm压缩格式，该格式会把法线贴图R通道存入A通道，然后RB通道清除为1，这样可以将法线XY信息分别存入到RGB/A中分别压缩，以获得更高的精度，然后再根据XY构建出Z通道数据；</p>
<p>即将法线贴图RGBA变为AG通道；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/AG.png" alt="AG" style="zoom:25%;"></p>
<h2 id="b-2-ATI1-2"><a href="#b-2-ATI1-2" class="headerlink" title="b.2). ATI1/2"></a>b.2). ATI1/2</h2><h3 id="b-2-1-ATI1-BC4-4x4-4位"><a href="#b-2-1-ATI1-BC4-4x4-4位" class="headerlink" title="b.2.1). ATI1(BC4, 4x4 4位)"></a>b.2.1). ATI1(BC4, 4x4 4位)</h3><p>ATI1为ATI公司开发的纹理压缩格式，也被称为BC4，其每个数据块存储<strong>单个颜色的数据通道</strong>，以与DXT5中的Alpha数据相同的方式进行编码，常用于存储高度图、光滑度贴图，效果与原始图像基本无差异；</p>
<ul>
<li>压缩比：2:1</li>
</ul>
<h3 id="b-2-2-ATI2-BC5-4x4-8位"><a href="#b-2-2-ATI2-BC5-4x4-8位" class="headerlink" title="b.2.2). ATI2(BC5, 4x4 8位)"></a>b.2.2). ATI2(BC5, 4x4 8位)</h3><p>每一个块中存储<strong>两个颜色通道的数据</strong>，同上以与DXT5中Alpha数据相同的方式进行编码，相当于存储了两个BC4块；</p>
<ul>
<li>压缩比：2:1</li>
</ul>
<p>如果是在将法线存储在XY双通道中采用BC5格式压缩，由于每个通道都有自己的索引，因此法线贴图XY信息可以比在BC1中保留更多的保真度，缺点是需要使用两倍内存，也需要更多的带宽才能将纹理传递到着色器中；</p>
<h2 id="b-3-BC6-7"><a href="#b-3-BC6-7" class="headerlink" title="b.3). BC6/7"></a>b.3). BC6/7</h2><p>BC6和BC7仅在D3D11级图形硬件中受支持，他们每个块占用16字节，BC7针对8位RGB或RGBA数据，而BC6针对RGB半精度浮点数据，因此BC6是唯一一个可以原生存储HDR的BC格式；</p>
<p><strong>BC6</strong>是专门针对<strong>HDR</strong>（高动态范围）图像设计的压缩算法，压缩比为6：1；</p>
<p><strong>BC7</strong>是专门针对LDR（低动态范围）图像设计的压缩算法，压缩比为3：1，该格式用于<strong>高质量</strong>的RGBA压缩，可以显著减少由于压缩法线带来的错误效果，但这也意味着解码所带来更多的消耗；</p>
<h2 id="b-4-ETC"><a href="#b-4-ETC" class="headerlink" title="b.4). ETC"></a>b.4). ETC</h2><p>ETC（Ericsson Texture Compression）最初为移动设备开发，如今它是安卓的标准压缩方案，ETC1在OpenGL和OpenGL ES中都有支持。</p>
<p>将4x4 的像素块编码为2x4或4x2像素（<strong>64位</strong>）的两个块的方法，每个块指定一个基色，每个像素的颜色通过一个编码为相对于这些基色偏移的灰度值确定。</p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/ETC.png" alt="ETC"></p>
<p>具体来说，ETC1每4x4像素块编码为64位的字节数据，每一个像素块又分为两个2x4子块（由一个“flip”位控制水平或竖直划分），每个子块包含一个3位的修饰表索引（modifier table index）和一个基本颜色值，这两个颜色值要么是2*R4G4B4要么是R5G5B5+R3G3B3（由一个“ diff”位控制是哪一种）。</p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/ETC1.png" alt="ETC1" style="zoom:50%;"></p>
<ul>
<li>24位颜色块（RGB444x2 或 RGB333+RGB555）</li>
<li>2x4位<strong>亮度索引</strong>中<ul>
<li>2x3位用于修饰表索引（索引table中列数）</li>
<li>2x1位用于flip或diff（如左边块为flip，右边块为diff）</li>
</ul>
</li>
<li>每个像素中2位<strong>像素索引</strong>，索引对应列中行数</li>
</ul>
<ul>
<li>ETC2是ETC1的扩展，支持了Alpha通道的压缩，硬件要求OpenGL ES 3.0和OpenGL 4.3以上；</li>
</ul>
<h2 id="b-5-ASTC"><a href="#b-5-ASTC" class="headerlink" title="b.5). ASTC"></a>b.5). ASTC</h2><p>ASTC是由ARM和AMD联合开发的纹理压缩格式，ASTC在各项指标上都挺不错，优点是可根据不同图片选择不同压缩率的算法，<strong>图片不需要为2的幂次</strong>，同时<strong>支持LDR和HDR</strong>，缺点是<strong>兼容性不够完善且解码时间较长</strong>；</p>
<p>ASTC也是基于块的压缩算法，与BC7类似，其数据块大小固定为<strong>128</strong>位，不同的是<strong>块中的像素数量可变</strong>，从4×4到12×12像素都有；</p>
<p>每一个数据块中存储了两个插值端点，但<strong>不一定存储的是颜色信息，也可能是Layer信息</strong>，这样可以用来对Normal或Alpha进行更好的压缩；</p>
<p>对于块中每一个纹素，存储其对应插值端点的权重，存储的权重数量可以少于纹素数量，可通过插值得到每一个纹素的权重值，然后再进行颜色的计算；</p>
<ul>
<li><p><strong>11</strong>位：权重、高度信息，特殊块标识；</p>
</li>
<li><p><strong>2</strong>位：Part数量；</p>
</li>
<li><p><strong>4</strong>位：16种插值端点模式（如LDR/HDR，RGB/RGBA）；</p>
</li>
<li><p><strong>111</strong>位：插值端点信息，纹素权重值，配置信息；</p>
</li>
</ul>
<h2 id="b-6-PVRTC"><a href="#b-6-PVRTC" class="headerlink" title="b.6). PVRTC"></a>b.6). PVRTC</h2><p>PVRTC由Imagination公司专为PowerVR显卡设计，仅支持Iphone、Ipad和部分安卓机；</p>
<p>不同于DXTC和ETC这类基于块的算法，PVRTC将图像分为了低频信号和高频信号，低频信号由两张低分辨率图像AB组成，高频信号则是低精度的调制图像，记录了每个像素混合的权重，解码时AB图像经过双线性插值放大，然后根据调制图像的权重进行混合；</p>
<p>PVRTC 4-bpp(bit per pixel)把一个4×4的像素单元压成一个64位数据块，每一个块中存储一个32位的调制数据，一个1位的调制标志，15位的颜色$color_a$，1位颜色A不透明标志，14位颜色$color_b$，1位颜色B不透明标志；</p>
<ul>
<li><p>15+14位：储存RGB时，$color_a$ 是 RGB555，$color_b$ 是 RGB554</p>
<p>​                   储存RGBA时，$color_a$ 是 RGBA4443，$color_b$ 是 RGBA4433</p>
</li>
<li><p>16x2位：每个像素2位调制数据</p>
</li>
<li>1位：调制模式，0/1位不同模式得到两颜色的Alpha值（混合值）</li>
<li>1+1位不透明标志：决定使用RGB/RGBA储存模式（$a1 || a2$, 哪个高选哪个）</li>
</ul>
<p>而PVRTC 2-bpp则是把一个8×4的像素单元压成了64位数据块；</p>
<h1 id="c-对比"><a href="#c-对比" class="headerlink" title="c). 对比"></a>c). 对比</h1><ul>
<li><p>画质比较（参考）</p>
<p>RGBA &gt; ASTC 4×4 &gt; ASTC 6×6 &gt; ETC2 ≈ ETC1</p>
</li>
</ul>
<ul>
<li><p>压缩比</p>
<p><img src="/2023/02/15/HPP_Graphics_3.6_%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/Rate.png" alt="Rate"></p>
</li>
</ul>
<h1 id="d-格式使用建议"><a href="#d-格式使用建议" class="headerlink" title="d). 格式使用建议"></a>d). 格式使用建议</h1><p>PC：</p>
<ol>
<li>低质量使用DXT1格式不支持A通道，使用DXT5格式支持A通道；</li>
<li>高质量使用BC7格式，支持A通道；</li>
</ol>
<p>安卓：</p>
<ol>
<li>低质量使用ETC1格式，但不支持A通道；</li>
<li>低质量使用ETC2格式，支持A通道，需要在OpenGL ES 3.0/OpenGL 4.3以上版本；</li>
<li>高质量使用ASTC格式，需要在Android 5.0/OpenGL ES 3.1以上版本；</li>
</ol>
<p>IOS：</p>
<ol>
<li>高质量使用ASTC格式，需要iPhone6以上版本；</li>
<li>低质量使用PVRTC2格式，支持iPhone6以下版本；</li>
</ol>
<hr>
<h1 id="【补充链接】"><a href="#【补充链接】" class="headerlink" title="【补充链接】"></a>【补充链接】</h1><p><a href="https://docs.unity3d.com/cn/current/Manual/class-TextureImporterOverride.html">https://docs.unity3d.com/cn/current/Manual/class-TextureImporterOverride.html</a></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>优化</tag>
        <tag>纹理</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_3.4 前向渲染与延迟渲染</title>
    <url>/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="a-渲染路径"><a href="#a-渲染路径" class="headerlink" title="a). 渲染路径"></a>a). 渲染路径</h1><ul>
<li>决定光照的实现方式。简言之，就是当前渲染目标使用<strong><font color="red">光照的流程</font></strong>。</li>
</ul>
<h1 id="b-渲染方式"><a href="#b-渲染方式" class="headerlink" title="b). 渲染方式"></a>b). 渲染方式</h1><ul>
<li><strong>延迟渲染</strong></li>
<li><strong>前向渲染</strong></li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Difference.png" alt="Difference"></p>
<p>可以看到前向渲染中，中间蓝色的灯并没被渲染。（场景8盏灯，Project Setting中Pixel Light Count设为7）</p>
<h2 id="b-1-前向-正向渲染-Forward-Rendering"><a href="#b-1-前向-正向渲染-Forward-Rendering" class="headerlink" title="b.1). 前向/正向渲染-Forward Rendering"></a>b.1). 前向/正向渲染-Forward Rendering</h2><ul>
<li>简介：每个Object对每个光照都计算；</li>
</ul>
<h3 id="b-1-1-流程"><a href="#b-1-1-流程" class="headerlink" title="b.1.1). 流程"></a>b.1.1). 流程</h3><p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Forward_Workflow.png" alt="Forward_Workflow"></p>
<ul>
<li>简单来说就是不管光源的影响大不大，计算的时候都会把所有光源计算进去，这样就会造成一个很大的浪费</li>
</ul>
<h3 id="b-1-2-规则和注意事项"><a href="#b-1-2-规则和注意事项" class="headerlink" title="b.1.2). 规则和注意事项"></a>b.1.2). 规则和注意事项</h3><ul>
<li><p><strong>发生在顶点处理阶段，会计算所有顶点的光照</strong>。全平台支持</p>
</li>
<li><ul>
<li>规则1：最亮的几个光源会被实现为像素光照</li>
<li>规则2：然后就是，最多四个光源会被实现为顶点光照</li>
<li>规则3：剩下的光源会实现为效率较高的球面调谐光照（Spherical Hamanic），这是一种模拟光照</li>
</ul>
</li>
<li><p><strong>补充说明</strong></p>
</li>
<li><ul>
<li>最亮的那盏光一定是像素光照</li>
<li>Light的Render Mode是important的光一定是像素光照</li>
<li>如果前面的两条加起来的像素光照小于Quality Setting里的Pixel Light Count（最大像素光照数量），那么从剩下的光源中找出最亮的那几盏光源，实现为像素光照。</li>
<li>最后剩下的光源，按照规则2或3。</li>
<li>在base pass里执行一盏像素光、所有的顶点光和球面调谐光照，并且进行阴影计算。</li>
<li>其余的像素光每盏一个Additional Pass，并且这些pass里没有阴影计算。</li>
<li>场景中看到的阴影，全是base pass里计算出最亮那盏像素光的阴影，其他像素光是不计算阴影的。</li>
</ul>
</li>
<li><p><strong>最多的光源数是可以更改的</strong></p>
<ul>
<li>以Unity中的为例，在project setting中</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/UnityForwardSetting.png" alt="UnityForwardSetting"></p>
</li>
</ul>
<h2 id="b-2-延迟渲染（Deferred-Rendering）"><a href="#b-2-延迟渲染（Deferred-Rendering）" class="headerlink" title="b.2). 延迟渲染（Deferred Rendering）"></a>b.2). 延迟渲染（Deferred Rendering）</h2><h3 id="b-2-1-简介"><a href="#b-2-1-简介" class="headerlink" title="b.2.1). 简介"></a>b.2.1). 简介</h3><p>主要解决<strong>大量光照渲染</strong>的方案。</p>
<p>可以将延迟渲染(Deferred Rendering)理解为先将所有物体都先绘制到屏幕空间的缓冲（即<strong>G-buffer</strong>，Geometric Buffer，几何缓冲区）中，再逐光源对该缓冲进行着色的过程，从而避免了因计算被深度测试丢弃的片元的着色而产生的不必要的开销。也就是说延迟渲染<strong>基本思想</strong>是，<strong>先执行深度测试（应该也包括其他测试），再进行着色计算</strong>，将本来在物空间（三维空间）进行光照计算放到了<strong>像空间</strong>（二维空间）进行处理。</p>
<p>对应于正向渲染O(m*n)的 复杂度，经典的延迟渲染复杂度为O(n+m)。</p>
<span id="more"></span>
<h3 id="b-2-2-流程"><a href="#b-2-2-流程" class="headerlink" title="b.2.2). 流程"></a>b.2.2). 流程</h3><p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Deffer_Workflow.png" alt="Deffer_Workflow" style="zoom:33%;"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Deffer_Workflow2.jpg" alt="Deffer_Workflow2"></p>
<p>可以将延迟渲染理解为两个Pass的过程：</p>
<ol>
<li><p><strong>几何处理阶段(Geometry Pass)。</strong>这个阶段中，我们获取对象的各种<strong>几何信息</strong>（Position、Normal、Albedo、Specular等），并将第二步所需的各种数据储存（也就是渲染）到多个<strong>G-buffer</strong>中；</p>
<ul>
<li>由于有深度测试，所以最终写入G-buffer中的，都是离摄像机最近的片元的集合属性，这就意味着，在G-buffer中的片元必定要进行光照计算。</li>
</ul>
</li>
<li><p><strong>光照处理阶段(Lighting Pass)。</strong>在这个pass中，我们只需渲染出一个屏幕大小的二维矩形，使用第一步在G-buffer中存储的数据对此矩阵的每一个片段<strong>计算场景的光照</strong>；光照计算的过程还是和正向渲染以前一样，只是现在<strong>我们需要从对应的G-buffer而不是顶点着色器(和一些uniform变量)那里获取输入变量了</strong>。</p>
</li>
</ol>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Deffer_Workflow3.jpg" alt="Deffer_Workflow3"></p>
<h3 id="b-2-3-G-Buffer"><a href="#b-2-3-G-Buffer" class="headerlink" title="b.2.3). G-Buffer"></a>b.2.3). G-Buffer</h3><p><strong>G-Buffer</strong>，全称Geometric Buffer ，译作几何缓冲区，它主要用于存储每个像素对应的位置（Position），法线（Normal），漫反射颜色（Diffuse Color）以及其他有用材质参数。根据这些信息，就可以在像空间（二维空间）中对每个像素进行光照处理。</p>
<ul>
<li><p>如图为一个典型的G-buffer<img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/G-Buffer.jpg" alt="G-Buffer"></p>
</li>
<li><p>下图是一帧中G-buffer中存储的内容：</p>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/G-Buffer2.jpg" alt="G-Buffer2"></p>
</li>
<li><p>UE5中的G-Buffer</p>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/G-Buffer_Constant.png" alt="G-Buffer_Constant"></p>
</li>
</ul>
<p>在几何处理阶段中填充G-buffer非常高效，因为我们直接储存位置，颜色，法线等对象信息到帧缓冲中，这个过程几乎不消耗处理时间。</p>
<p>而在此基础上使用<strong>多渲染目标(Multiple Render Targets, MRT)技术</strong>，我们可以在一个Pass之内完成所有渲染工作。</p>
<ul>
<li><p>P-Code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For each object:</span><br><span class="line">    Render to multiple targets </span><br><span class="line">For each light:</span><br><span class="line">    Apply light as a 2D postprocess</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Two-pass deferred shading algorithm</span><br><span class="line">Pass 1: geometry pass</span><br><span class="line">- Write visible geometry information to G-buffer</span><br><span class="line">Pass 2: shading pass</span><br><span class="line">For each G-buffer sample, compute shading</span><br><span class="line">- Read G-buffer data for current sample</span><br><span class="line">- Accumulate contribution of all lights</span><br><span class="line">- Output final surface color</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="b-2-4-延迟渲染的优缺点"><a href="#b-2-4-延迟渲染的优缺点" class="headerlink" title="b.2.4). 延迟渲染的优缺点"></a>b.2.4). 延迟渲染的优缺点</h3><ul>
<li><p><strong>优点：</strong></p>
<ol>
<li>复杂度仅O(n+m)</li>
<li>只渲染可见的像素，节省计算量</li>
<li>用更少的shader</li>
<li>对后处理支持良好（例如深度信息：直接拿G-buffer中的就行。而前向渲染需要单独Pass再渲染一张深度图）</li>
<li>在大量光源的场景优势尤其明显；</li>
</ol>
</li>
<li><p><strong>缺点：</strong></p>
<ol>
<li>内存开销较大，且占用了大量的显存带宽；<ul>
<li>需要传递G-Buffer；</li>
<li>有时需要用到G-Buffer的信息，如深度图做后处理，那将不会进行Clear；</li>
</ul>
</li>
<li>只能用同一套Lighting Pass；</li>
<li>对透明物体的渲染存在问题。在这点上需要结合正向渲染进行渲染；</li>
<li>对多重采样抗锯齿（MultiSampling Anti-Aliasing, MSAA）等硬件抗锯齿的支持不友好，主要因为需开启MRT；<ul>
<li>MSAA是依赖于子像素，而Deffered shading<strong>处在光栅化之后（单个像素内值相等）</strong>，传输数据是通过G-Buffer；</li>
<li>但可使用TAA</li>
</ul>
</li>
</ol>
<p><a href="https://www.zhihu.com/question/20236638/answer/44821615">问FXAA、FSAA与MSAA有什么区别？效果和性能上哪个好？ - 文刀秋二的回答 - 知乎</a></p>
<p><a href="https://catlikecoding.com/unity/tutorials/rendering/part-13/">https://catlikecoding.com/unity/tutorials/rendering/part-13/</a></p>
</li>
</ul>
<h2 id="b-3-Unity中渲染路径设置"><a href="#b-3-Unity中渲染路径设置" class="headerlink" title="b.3). Unity中渲染路径设置"></a>b.3). Unity中渲染路径设置</h2><p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/RenderPathSetting.png" alt="RenderPathSetting"></p>
<h2 id="b-4-其他渲染路径"><a href="#b-4-其他渲染路径" class="headerlink" title="b.4). 其他渲染路径"></a>b.4). 其他渲染路径</h2><p>针对延迟渲染上述提到的缺点，下面简单列举一些降低 Deferred Rendering 存取带宽的改进方案。最简单也是最容易想到的就是将存取的 G-Buffer 数据结构最小化，这也就衍生出了 Light Pre-Pass（即Deferred Lighting） 方法。另一种方式是将多个光照组成一组，然后一起处理，这种方法衍生了 Tile-Based Deferred Rendering。</p>
<p>也就是说，常见的两种Deferred Rendering的改进是：</p>
<ul>
<li>延迟光照 Light Pre-Pass（即Deferred Lighting）</li>
<li>分块延迟渲染 Tile-BasedDeferred Rendering</li>
</ul>
<h3 id="b-4-1-延迟光照（LightPre-Pass-Deferred-Lighting）"><a href="#b-4-1-延迟光照（LightPre-Pass-Deferred-Lighting）" class="headerlink" title="b.4.1). 延迟光照（LightPre-Pass / Deferred Lighting）"></a>b.4.1). 延迟光照（LightPre-Pass / Deferred Lighting）</h3><ul>
<li>减少G-buffer占用的过多开销，支持多种光照模型</li>
</ul>
<ul>
<li>过程：</li>
</ul>
<ol>
<li><p>渲染场景中不透明（opaque ）的几何体。将法线向量n和镜面扩展因子（specular spread factor）m 写入缓冲区。这个n/m-buffer 缓冲区是一个类似 G-Buffer的缓冲区，但包含的信息更少，更轻量，适合于单个输出颜色缓冲区，因此不需要MRT支持。</p>
</li>
<li><p>渲染光照。计算漫反射和镜面着色方程，并将结果写入不同的漫反射和镜面反射累积缓冲区。这个过程可以在一个单独的pass中完成（使用MRT），或者用两个单独的pass。环境光照明可以在这个阶段使用一个 full-screen pass进行计算。</p>
</li>
<li><p>对场景中的不透明几何体进行第二次渲染。从纹理中读取漫反射和镜面反射值，对前面步骤中漫反射和镜面反射累积缓冲区的值进行调制，并将最终结果写入最终的颜色缓冲区。若在上一阶段没有处理环境光照明，则在此阶段应用环境光照明。</p>
</li>
<li><p>使用非延迟着色方法渲染半透明几何体。</p>
</li>
</ol>
<ul>
<li>用更少的buffe信息，着色计算的时候用的是forward，所以第三步开始都是前向渲染（在3D，而不是2D的像空间中渲染）</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/Deffer_Light.jpg" alt="Deffer_Light"></p>
<h3 id="b-4-2-Forward-（即Tiled-Forward-Rendering，分块正向渲染）"><a href="#b-4-2-Forward-（即Tiled-Forward-Rendering，分块正向渲染）" class="headerlink" title="b.4.2). Forward+（即Tiled Forward Rendering，分块正向渲染）"></a>b.4.2). Forward+（<strong>即Tiled Forward Rendering，分块正向渲染</strong>）</h3><ul>
<li><p>减少带宽，支持多光源，强制需要一个preZ</p>
</li>
<li><ul>
<li>通过分块索引的方式，以及深度和法线信息来到需要进行光照计算的片元进行光照计算。</li>
<li>需要法线和深度的后处理需要单独渲染一个rt出来</li>
<li>强制使用了一个preZ（如果没涉及过这个概念的话，可以理解为进行了一个深度预计算</li>
</ul>
</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/28489928">https://zhuanlan.zhihu.com/p/28489928</a></p>
<h3 id="b-4-3-群组渲染（Clustered-Rendering）"><a href="#b-4-3-群组渲染（Clustered-Rendering）" class="headerlink" title="b.4.3). 群组渲染（Clustered Rendering）"></a>b.4.3). 群组渲染（Clustered Rendering）</h3><ul>
<li>带宽相对减少，多光源下效率提升</li>
<li>分为forward和deferred两种</li>
<li>详细补充拓展：<a href="https://zhuanlan.zhihu.com/p/54694743">https://zhuanlan.zhihu.com/p/54694743</a></li>
</ul>
<h2 id="c-渲染管线的优化（移动端）"><a href="#c-渲染管线的优化（移动端）" class="headerlink" title="c). 渲染管线的优化（移动端）"></a>c). 渲染管线的优化（移动端）</h2><p>IMR框架渲染对于移动端有一个很大的问题：<strong>带宽占用过高</strong>。</p>
<ul>
<li>因此在移动端，我们不采用<strong>PC端构架IMR（Immediate Mode Rendering）</strong>，而采用<strong>移动端构架TBR（Tile-Based Rendering）或TBDR（PowerVR使用）</strong></li>
</ul>
<p>简而言之，为了节省成本，移动端TBR的GPU中不使用显存（GPU Memory），而使用<strong>On_Chip Memory也就是SRAM，或者L1 L2 cache</strong><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/GPU架构.jpg" alt="GPU架构"></p>
<p>对于TBR来讲，整个光栅化和像素处理会被分为一个个Tile进行处理，通常为16×16大小的Tile。TBR的结构通过On-Chip Buffers来储存Tiling后的Depth Buffer和Color buffer。</p>
<p>也就是原先IMR架构中对主存中Color/Depth Buffer进行的读写操作变成直接在GPU中的高速内存操作，减少了最影响性能的系统内存传输的开销。通过下面这张图能够更好的来理解，下图的DRAM在手机上就是物理内存那一块。</p>
<p><img src="/2023/02/15/HPP_Graphics_3.4_%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/On-chip.jpg" alt="On-chip"></p>
<p>​    </p>
<h2 id="d-移动设备渲染通用优化建议"><a href="#d-移动设备渲染通用优化建议" class="headerlink" title="d). 移动设备渲染通用优化建议"></a>d). 移动设备渲染通用优化建议</h2><ul>
<li><strong>贴图格式能压缩就压缩</strong>。贴图内存越小，片上命中率就越高，总的传输量也少</li>
<li><strong>能开mipmap就开mipmap</strong>（前提是能用到，UI贴图就不用开了）。减轻带宽压力，与减小实际使用的贴图内存是一个道理，但是会增加总贴图的内存占用大小，需要在内存开销和带宽开销上做一个平衡。</li>
<li><strong>随机纹理寻址相对于相邻纹理寻址有显著开销</strong>。提高片上命中率。</li>
<li><strong>3DTexture Sampling有显著的开销</strong>。3DTexture整体内存占用大，垂直方向相邻像素内存不相邻很容易cache miss，这是我个人推测。</li>
<li><strong>Trilinear/Anisotropic相对于Bilinear有显著的开销</strong>。Trilinear其实就相当于tex3D了(此结论不负责任)，Bilinear相对于Point几乎没有额外开销（此结论负责任，texture fetch都是一次拿相邻的四个出来），所以Bilinear能忍就尽量凑合用着吧。</li>
<li><strong>使用LUT（look up texture）很可能是负优化</strong>。需要对比权衡带宽占用+texture fetch操作增加与ALU占用增加降低并行效率，另外还很可能涉及到美术工作流和最终效果，所以是个不是很好进行操作的优化。之前看过腾讯的技术分享将引擎中Tonemapping那步的3DLUT（UE4和Unity都是这样的）替换为函数拟合的优化，理论上应该是会提升不少性能，但是要想真正应用到生产环境，保证效果，还要做好拟合工具链，是得费不少力气的</li>
<li><strong>通道图能合并就合并，减少Shader中贴图采样次数</strong>。这个不多说了</li>
<li><strong>控制Framebuffer大小</strong>。这个也不多说了</li>
<li><strong>总顶点数量也是带宽开销的影响因素</strong>。虽然以现在GPU的计算能力来说，顶点数增多产生的VS计算开销增加通常是忽略不计的。但是仍不能忽略总顶点数量对于VertexBuffer所消耗带宽的影响，对于总顶点数的限制应该更多的从带宽消耗上去进行测试和分析。</li>
</ul>
<h3 id="d-1-AlphaTest性能消耗"><a href="#d-1-AlphaTest性能消耗" class="headerlink" title="d.1). AlphaTest性能消耗"></a>d.1). AlphaTest性能消耗</h3><ul>
<li>只要Shader中包含discard指令的都会被GPU认为是AlphaTest图元（GPU对于AlphaTest绘制流程的判定是基于图元而不是像素）</li>
<li><strong>无论是PowerVR还是Mali/Adreno芯片，AlphaTest图元的绘制都会影响整体渲染性能。</strong></li>
<li><strong>随着芯片的发展AlphaTest图元对于渲染性能的影响主要在于Overdraw增加而非降低硬件设计流程效率，其优化思路与AlphaBlend一样，就是少画！</strong></li>
<li>严格按照Opaque - AlphaTest - AlphaBlend的顺序进行渲染可以最大化减小AlphaTest对于渲染性能的影响。</li>
<li><strong>将Opaque, AlphaTest与AlphaBlend打乱顺序渲染会极大的降低渲染性能，任何情况下都不应该这么做。</strong></li>
<li>不要尝试使用AlphaTest替代AlphaBlend，这并不会产生太多优化。</li>
<li>不要尝试使用AlphaTest替代Opaque，这会产生负优化</li>
<li><strong>不要尝试使用AlphaBlend替代AlphaTest</strong>，这会造成错误的渲染结果。</li>
<li>在保证正确渲染顺序情况下，AlphaTest与AlphaBlend开销相似，不存在任何替代优化关系</li>
<li>增加少量顶点以减少AlphaTest图元的绘制面积是可以提升一些渲染性能的。</li>
<li>首先统一绘制AlphaTest图元的DepthPrepass，再以ZTest Equal和不含discard指令的Shader统一绘制AlphaTest图元，大多数情况下是可以显著提升总体渲染性能的（需要实际测试）</li>
</ul>
<h2 id="资料补充："><a href="#资料补充：" class="headerlink" title="资料补充："></a>资料补充：</h2><p><a href="https://zhuanlan.zhihu.com/p/259760974">https://zhuanlan.zhihu.com/p/259760974</a></p>
<p><a href="https://www.cnblogs.com/timlly/p/11471507.html">https://www.cnblogs.com/timlly/p/11471507.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/112120206">https://zhuanlan.zhihu.com/p/112120206</a></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>延迟渲染</tag>
        <tag>渲染管线</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_3.5 Early-Z和Z Prepass（Pre-Z）</title>
    <url>/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/</url>
    <content><![CDATA[<h1 id="a-Review-Z-test"><a href="#a-Review-Z-test" class="headerlink" title="a). Review Z-test"></a>a). Review Z-test</h1><ul>
<li>先回顾下深度测试</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/ZTest_Workflow.png" alt="ZTest_Workflow" style="zoom:50%;"></p>
<ul>
<li><p><strong>问题：</strong> 被遮挡的物体也会进行shading，造成overdraw；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Overdraw.png" alt="Overdraw"></p>
<ul>
<li><strong>解决思路：</strong> 在shading前提前剔除被遮挡的片元；</li>
</ul>
</li>
</ul>
<h1 id="b-Early-Z"><a href="#b-Early-Z" class="headerlink" title="b). Early-Z"></a>b). Early-Z</h1><p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Early-Z.png" alt="Early-Z"></p>
<ul>
<li>是在传统管线中的光栅化阶段之后、片元着色器之前加的一步操作。<ul>
<li>提前的深度测试叫作<strong>Z-Cull</strong></li>
<li>后续的深度测试为了确定正确的遮挡关系，叫作<strong>Z-Check</strong></li>
</ul>
</li>
<li><em>Early-Z同样可以搭配使用模板测试</em></li>
</ul>
<h2 id="b-1-Early-Z失效情况"><a href="#b-1-Early-Z失效情况" class="headerlink" title="b.1). Early-Z失效情况"></a>b.1). Early-Z失效情况</h2><ol>
<li>开启<strong>Alpha Test</strong>或 clip/discard等手动丢弃片元操作<ul>
<li>通常Early-Z不仅会进行深度测试，还要进行深度写入</li>
<li>那在这种情况下，如果经过AlphaTest，前面渲染的片元被丢弃了（但写入了深度），那么后续的像素都将无法正常渲染。</li>
</ul>
</li>
<li>手动修改GPU插值得到的深度</li>
<li>开启<strong>Alpha Blend</strong></li>
<li>关闭深度测试Depth Test</li>
</ol>
<h2 id="b-2-Early-Z排序"><a href="#b-2-Early-Z排序" class="headerlink" title="b.2). Early-Z排序"></a>b.2). Early-Z排序</h2><h3 id="不透明物体由远往近渲染，early-z将没有任何优化效果"><a href="#不透明物体由远往近渲染，early-z将没有任何优化效果" class="headerlink" title="不透明物体由远往近渲染，early-z将没有任何优化效果"></a>不透明物体由远往近渲染，early-z将没有任何优化效果</h3><ul>
<li>在渲染前，将不透明物体<strong>从近往远渲染</strong>的话，Early-Z能发挥最大的性能优化（注意此处还是前向渲染的思路）</li>
<li><p>具体怎么排序？ </p>
<ul>
<li>可以让CPU将物体按照由近到远的顺序排好，再交付给GPU进行渲染</li>
</ul>
</li>
<li><p>问题：</p>
<ul>
<li>复杂的场景，CPU性能消耗很大</li>
<li>严格按照由近到远的顺序渲染，将不能同时搭配批处理优化手段。</li>
</ul>
</li>
<li><p><strong>解决方法：Pre-Z / Z Prepass</strong></p>
</li>
</ul>
<span id="more"></span>
<h1 id="c-Pre-Z"><a href="#c-Pre-Z" class="headerlink" title="c). Pre-Z"></a>c). Pre-Z</h1><ul>
<li>用于解决使用early-Z可能造成的Overdraw问题（用Drawcall或Set Pass Call的消耗换取减少Overdraw，因此使用时需要进行权衡）</li>
</ul>
<h2 id="Method1-双Pass"><a href="#Method1-双Pass" class="headerlink" title="Method1: 双Pass"></a>Method1: 双Pass</h2><p>使用两个Pass：</p>
<ul>
<li><p>第一个Pass（<strong>Z-Prepass</strong>）：仅写入深度；</p>
</li>
<li><p>第二个Pass：关闭深度写入，并将深度测试比较符改为等于；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/D-pass_shader.png" alt="D-pass_shader" style="zoom: 33%;"></p>
</li>
</ul>
<p>造成问题：</p>
<ol>
<li><p>在Unity中，无法动态批处理（多Pass的Shader无法进行动态批处理）</p>
</li>
<li><p>增多DrawCall；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Z_Pre_Drawcall.png" alt="Z_Pre_Drawcall" style="zoom: 33%;"></p>
</li>
</ol>
<p>因此，我们可以提前分离Prepass，以便其可以<a href="https://blog.csdn.net/lsjsoft/article/details/90734932">进行动态批处理，减少Set pass call</a></p>
<h2 id="Method2-提前分离的Prepass"><a href="#Method2-提前分离的Prepass" class="headerlink" title="Method2: 提前分离的Prepass"></a>Method2: 提前分离的Prepass</h2><ul>
<li>将Z-Prepass分离出一个shader，用这个shader将场景中不透明物体先渲染一遍；</li>
<li>而原先材质只剩下原先的第二个Pass，仍然关闭深度写入，并且将深度比较函数设置为相等。</li>
</ul>
<blockquote>
<p>URP以后并不是所有Pass都会执行，因为它预制了两个Pass所以，优先执行”UniversalForward”在执行”SrpDefaultUnlit”的Pass</p>
<p>……</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/RendererFeature.png" alt="RendererFeature" style="zoom:33%;"></p>
<p>Link: <a href="https://www.xuanyusong.com/archives/4759">https://www.xuanyusong.com/archives/4759</a></p>
</blockquote>
<hr>
<h2 id="半透明渲染"><a href="#半透明渲染" class="headerlink" title="半透明渲染"></a>半透明渲染</h2><p>Pre-Z也是半透明物体渲染的解决方案；</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/PreZ_Translution.png" alt="PreZ_Translution"></p>
<h2 id="Z-prepass的其他问题"><a href="#Z-prepass的其他问题" class="headerlink" title="Z-prepass的其他问题"></a>Z-prepass的其他问题</h2><h3 id="1-Z-prepass的性能消耗是否能被忽视"><a href="#1-Z-prepass的性能消耗是否能被忽视" class="headerlink" title="1.Z-prepass的性能消耗是否能被忽视"></a>1.Z-prepass的性能消耗是否能被忽视</h3><ul>
<li><p>国外论坛一位名为lipsryme的老哥做了一项实验：</p>
</li>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1626442429385-0bab8f18-7ba4-44cb-96b5-4f123055a263.png" alt="img"></li>
<li>可以看到，Z-prepass的消耗为2.0ms，而带来的优化只减少了0.3ms（2.7-2.4）</li>
<li>后续讨论中，发现Z-prepass是需要根据项目的实际情况来决定是否采用的。</li>
</ul>
</li>
<li><p><strong>总结有以下建议</strong></p>
</li>
<li><ul>
<li>当一个有非常多OverDraw的场景，且不能很好的将不透明物体从前往后进行排序时，可以考虑使用PreZ进行优化</li>
<li>注意，PreZ会增加DrawCall，如果用错了可能是负优化</li>
</ul>
</li>
</ul>
<h1 id="d-Early-Z-和-Z-Prepass的实例应用"><a href="#d-Early-Z-和-Z-Prepass的实例应用" class="headerlink" title="d). Early-Z 和 Z-Prepass的实例应用"></a>d). <strong>Early-Z</strong> <strong>和</strong> Z-Prepass的实例应用</h1><h2 id="d-1-面片叠加的头发渲染"><a href="#d-1-面片叠加的头发渲染" class="headerlink" title="d.1). 面片叠加的头发渲染"></a>d.1). 面片叠加的头发渲染</h2><ul>
<li><p>对于半透明的面片来说，需要从后往前进行排序渲染才能得到正确的透明度混合结果</p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Hair_PreZ00.png" alt="Hair_PreZ00"></p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>排序后头发的渲染</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Hair_PreZ01.png" alt="Hair_PreZ01"></p>
</li>
<li><p>分为3个pass</p>
<ul>
<li><p>pass1</p>
<ul>
<li>处理不透明部分，开启Alpha test透明度测试，仅通过不透明的像素，</li>
<li>关闭背面剔除</li>
<li>开启深度写入</li>
</ul>
</li>
<li><p>pass2</p>
<ul>
<li>剔除正面，渲染背面</li>
</ul>
</li>
<li>pass3<ul>
<li>剔除背面，渲染正面</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>问题：会带来非常多<strong>OverDraw</strong>的问题<ul>
<li>解决方法：Pre-Z</li>
</ul>
</li>
</ul>
<hr>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Hair_PreZ02.png" alt="Hair_PreZ02"></p>
<ul>
<li>使用Early-Z剔除</li>
<li>透明度测试开启时Early-Z无法使用的解决方案：使用Z-Prepass  <ul>
<li>使用一个简单的shader进行Alpha Test生成Z-Buffer</li>
</ul>
</li>
</ul>
<hr>
<p><strong>改善后的渲染方案：</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Hair_PreZ03.png" alt="Hair_PreZ03"></p>
<ul>
<li><strong>不透明物体</strong><ol>
<li><strong>Pass1 - PreZ</strong>：<ul>
<li>开启透明度测试</li>
<li>关闭背面剔除</li>
<li>开启深度写入，深度测试设置为Less</li>
<li>关闭颜色缓冲区写入</li>
<li>用于一个简单的片元着色器来返回透明度值</li>
</ul>
</li>
<li><strong>Pass2：</strong><ul>
<li>关闭背面剔除</li>
<li>关闭深度写入，深度测试设置为Equal</li>
</ul>
</li>
</ol>
</li>
<li><strong>半透明物体</strong><ol>
<li><strong>Pass3：</strong><ul>
<li>剔除正面</li>
<li>关闭深度写入，对背面进行深度测试，设置为Less</li>
</ul>
</li>
<li><strong>Pass4：</strong><ul>
<li>剔除背面</li>
<li>关闭深度写入，对正面进行深度测试，设置为Less</li>
</ul>
</li>
</ol>
</li>
</ul>
<hr>
<p><a href="https://www.cnblogs.com/ghl_carmack/p/10166291.html">https://www.cnblogs.com/ghl_carmack/p/10166291.html</a></p>
<h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><p><img src="/2023/02/15/HPP_Graphics_3.5_Early-z%E5%92%8CZ-prepass/Homework.gif" alt="Homework"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>延迟渲染</tag>
        <tag>渲染管线</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.7 模板测试和深度测试</title>
    <url>/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="a-模板测试"><a href="#a-模板测试" class="headerlink" title="a). 模板测试"></a>a). 模板测试</h2><ul>
<li>处于<strong>逐片元操作</strong>中</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/模板测试00.png" alt="模板测试00"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/模板测试01.png" alt="模板测试01"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/模板测试02.png" alt="模板测试02"></p>
<h3 id="a-1-Unity-中的模板测试"><a href="#a-1-Unity-中的模板测试" class="headerlink" title="a.1). Unity 中的模板测试"></a>a.1). Unity 中的模板测试</h3><ul>
<li><p>语法表示</p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Unity_stencil.png" alt="Unity_stencil"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Unity_stencil_Comparison.png" alt="Unity_stencil_Comparison"></p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Unity_stencil_Update.png" alt="Unity_stencil_Update"></p>
</li>
</ul>
<ul>
<li><p>可作为遮罩等操作</p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/StencilBufferValue.png" alt="StencilBufferValue"></p>
</li>
</ul>
<span id="more"></span>
<h3 id="a-2-作业：Unity中实现的效果"><a href="#a-2-作业：Unity中实现的效果" class="headerlink" title="a.2). 作业：Unity中实现的效果"></a>a.2). 作业：Unity中实现的效果</h3><p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/StencilTest_Unity.png" alt="StencilTest_Unity"></p>
<hr>
<p><strong>【链接补充】</strong></p>
<p>[1]. <a href="https://blog.csdn.net/u011047171/article/details/46928463">https://blog.csdn.net/u011047171/article/details/46928463</a></p>
<p>[2]. <a href="https://blog.csdn.net/liu_if_else/article/details/86316361">https://blog.csdn.net/liu_if_else/article/details/86316361</a></p>
<p>[3]. <a href="https://gameinstitute.qq.com/community/detail/127404">https://gameinstitute.qq.com/community/detail/127404</a></p>
<p>[4]. <a href="https://learnopengl-cn.readthedocs.io/zh/latest/04 Advanced OpenGL/02 Stencil testing/">https://learnopenglcn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/02%20Stencil%20testing/</a></p>
<p>[5]. <a href="https://www.patreon.com/posts/14832618">https://www.patreon.com/posts/14832618</a></p>
<p>[6]. <a href="https://www.udemy.com/course/unity-shaders/">https://www.udemy.com/course/unity-shaders/</a></p>
<h2 id="b-深度测试"><a href="#b-深度测试" class="headerlink" title="b). 深度测试"></a>b). 深度测试</h2><p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/ZTest.png" alt="ZTest"></p>
<ul>
<li>模板测试后，透明度混合前</li>
</ul>
<h3 id="Z-Buffer"><a href="#Z-Buffer" class="headerlink" title="Z-Buffer"></a>Z-Buffer</h3><p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Z_Buffer.png" alt="Z_Buffer"></p>
<h3 id="Z-Write"><a href="#Z-Write" class="headerlink" title="Z Write"></a>Z Write</h3><p>深度写入包括<strong>两种状态：ZWrite On 与 ZWrite Off</strong></p>
<p>当我们<strong>开启深度写入</strong>的时候，物体被渲染时针对物体在屏幕（更准确地说是frame buffer）上<strong>每个像素的深度都写入到深度缓冲区</strong>；反之，如果是<strong>ZWrite Off,</strong>那么物体的深度就<strong>不会写入深度缓冲区</strong>。但是，物体是否会写入深度，除了ZWrite这个状态之外，<strong>更重要的是需要深度测试通过</strong>，也就是ZTest通过，如果ZTest都没通过，那么也就不会写入深度了。</p>
<p>ZTest分为通过和不通过两种情况，ZWrite分为开启和关闭两种情况的四种情况：</p>
<ul>
<li>深度测试通过，深度写入开启：写入深度缓冲区，写入颜色缓冲区。</li>
<li>深度测试通过，深度写入关闭：不写深度缓冲区，写入颜色缓冲区。</li>
<li>深度测试失败，深度写入开启：不写深度缓冲区，不写颜色缓冲区。</li>
<li>深度测试失败，深度写入关闭：不写深度缓冲区，不屑颜色缓冲区。</li>
</ul>
<h3 id="Z-Test比较操作"><a href="#Z-Test比较操作" class="headerlink" title="Z Test比较操作"></a>Z Test比较操作</h3><p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Z_Comp.png" alt="Z_Comp"></p>
<h3 id="渲染队列"><a href="#渲染队列" class="headerlink" title="渲染队列"></a>渲染队列</h3><p>Unity中内置的几种渲染队列，按照渲染顺序，从先到后进行排序，<strong>队列数越小，越先渲染，队列数越大，越后渲染。</strong></p>
<ul>
<li><strong>Background(1000) ：</strong>最早被渲染的物体的队列。</li>
<li><strong>Geometry(2000) ：</strong>不透明物体的渲染队列。大多数物体都应该使用该队列进行渲染，也是Unity Shader中默认的渲染队列。</li>
<li><strong>AlphaTest(2450) ：</strong>有透明通道，需要进行Alpha Test的物体的队列，比在Geometry中更有效。</li>
<li><strong>Transparent(3000) ：</strong> 半透物体的渲染队列。一般是不写深度的物体，Alpha Blend等的在该队列渲染。</li>
<li><strong>Overlay(4000) ：</strong>最后被渲染的物体的队列，一般是覆盖效果，比如镜头光晕，屏幕贴片之类的。</li>
</ul>
<h3 id="Unity中设置渲染队列"><a href="#Unity中设置渲染队列" class="headerlink" title="Unity中设置渲染队列"></a>Unity中设置渲染队列</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认是Geometry</span></span><br><span class="line">Tags&#123;</span><br><span class="line">	<span class="string">&quot;Queue&quot;</span> = <span class="string">&quot;Transparent&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>不透明物体的渲染顺序：从前往后。</strong></li>
<li><strong>透明物体的渲染顺序：从后往前。（OverDraw）</strong></li>
<li>对于使用了多个Pass的物体，其渲染队列会设置为Pass中的最小值（如两个Pass中一个是Geometry(2000)，另一个是Transparent(3000)，那该物体会按Geometry的队列渲染，然后按Shader中从上到下执行Pass）。</li>
</ul>
<h3 id="Early-Z"><a href="#Early-Z" class="headerlink" title="Early-Z"></a>Early-Z</h3><p>传统的渲染管线中，ZTest其实是在Blending阶段，这时候进行深度测试，所有对象的像素着色器都会计算一遍，没有什么性能提升，仅仅是为了得出正确的遮挡结果，会造成大量的无用计算，因为每个像素点上肯定重叠了很多计算。<strong>因此现代GPU中运用了Early-Z的技术，在Vertex阶段和Fragment阶段之间（光栅化之后，fragment之前）进行一次深度测试，如果深度测试失败，就不必进行fragment阶段的计算了，因此在性能上会有很大的提升。但是最终的ZTest仍然需要进行，以保证最终的遮挡关系结果正确。</strong>前面的一次主要是<strong><em>Z-Cull</em></strong>为了裁剪以达到优化的目的，后一次主要是<strong><em>Z-Check</em></strong>，为了检查，如下图：</p>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/EarlyZ.png" alt="EarlyZ"></p>
<h2 id="c-深度值"><a href="#c-深度值" class="headerlink" title="c). 深度值"></a>c). 深度值</h2><p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Deepth.png" alt="Deepth"></p>
<h3 id="为什么深度缓冲区存储非线性深度呢？"><a href="#为什么深度缓冲区存储非线性深度呢？" class="headerlink" title="为什么深度缓冲区存储非线性深度呢？"></a>为什么深度缓冲区存储非线性深度呢？</h3><p><strong>正确的投影特性的非线性深度方程是和1/z成正比的，</strong>这样基本上做的是在<strong>Z很近的时候是高精度和Z很远的时候是底精度</strong>。这样就是模拟了人眼观察，<strong>近处的物体很清晰，而远处的物体很模糊。</strong>（和现在还用伽马校正的原因类似）</p>
<script type="math/tex; mode=display">
F d e p t h=\frac{1 / z-1 / \text { near }}{1 / \text { far }-1 / \text { near }}</script><h3 id="Z-fighting"><a href="#Z-fighting" class="headerlink" title="Z-fighting"></a>Z-fighting</h3><p>两个平面或三角形很<strong>紧密相互平行，深度缓冲区不具有足够的精度</strong>以至于无法得到哪一个靠前。导致了着两个形状<strong>不断切换顺序出现怪异问题</strong>。这被称为<strong>深度冲突（Z-fighting）</strong>，因为它看上去像形状争夺顶靠前的位置。（UE中重叠闪来闪去的那个）</p>
<ul>
<li><p>解决方法</p>
<ul>
<li><p>让物体之间不要离得太近。</p>
</li>
<li><p>尽可能把<strong>近平面</strong>设置得远一些。</p>
</li>
<li><p>放弃一部分性能来获得更高精度的深度值。</p>
</li>
<li>Z-Offset</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_3.1_%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95/Z_F.png" alt="Z_F"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>模板测试</tag>
        <tag>深度测试</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_3.3 曲面细分和几何着色器</title>
    <url>/2023/02/15/HPP_Graphics_3.3_TessAndGs/</url>
    <content><![CDATA[<h1 id="一、两者的应用列举"><a href="#一、两者的应用列举" class="headerlink" title="一、两者的应用列举"></a>一、两者的应用列举</h1><h2 id="1-1-曲面着色器的应用"><a href="#1-1-曲面着色器的应用" class="headerlink" title="1-1.曲面着色器的应用"></a>1-1.曲面着色器的应用</h2><h3 id="①海浪、雪地等"><a href="#①海浪、雪地等" class="headerlink" title="①海浪、雪地等"></a>①海浪、雪地等</h3><ul>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625196811887-90a8c810-ef28-49b5-a69c-c5296b02b72f.png" alt="img"></li>
<li>如右图一样，将一条直线进行细分，向一条曲线慢慢逼近</li>
</ul>
</li>
</ul>
<h3 id="②著名的应用：和置换贴图（DIsplacement-mapping，也叫位移贴图）结合使用"><a href="#②著名的应用：和置换贴图（DIsplacement-mapping，也叫位移贴图）结合使用" class="headerlink" title="②著名的应用：和置换贴图（DIsplacement mapping，也叫位移贴图）结合使用"></a>②著名的应用：和置换贴图（DIsplacement mapping，也叫位移贴图）结合使用</h3><ul>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625196936041-6fc1b0a9-43c6-495a-9665-ba7568289168.png" alt="img"></li>
</ul>
</li>
<li><p>使用普通法线的模型，在边缘部分的凹凸感会不理想</p>
</li>
<li>如果使用置换贴图，因为它是真正改变物体的形状，所以边缘部分的凹凸感就会很真实</li>
<li><p>注意：使用置换贴图，对模型的面数有要求。</p>
</li>
<li><p>正是这个原因，让它和曲面细分着色器有着很好的契合度。</p>
</li>
</ul>
<h3 id="③雪地里出现的脚印"><a href="#③雪地里出现的脚印" class="headerlink" title="③雪地里出现的脚印"></a>③雪地里出现的脚印</h3><ul>
<li>可以用曲面细分着色器进行优化</li>
</ul>
<h2 id="1-2-为什么不用复杂的模型，而要用曲面细分着色器？"><a href="#1-2-为什么不用复杂的模型，而要用曲面细分着色器？" class="headerlink" title="1-2.为什么不用复杂的模型，而要用曲面细分着色器？"></a>1-2.为什么不用复杂的模型，而要用曲面细分着色器？</h2><ul>
<li>曲面细分着色器可以根据距离/一些规则，动态的调整模型的复杂度，带来更好的性能。</li>
</ul>
<span id="more"></span>
<h2 id="2-几何着色器的应用"><a href="#2-几何着色器的应用" class="headerlink" title="2.几何着色器的应用"></a>2.几何着色器的应用</h2><h3 id="①几何动画"><a href="#①几何动画" class="headerlink" title="①几何动画"></a>①几何动画</h3><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/gif/12962324/1625197322689-e6e1d35e-d82e-4485-8ca2-72923d96969c.gif" alt="img"><img src="https://cdn.nlark.com/yuque/0/2021/gif/12962324/1625197503763-803a51bd-5e93-47e1-b2e4-afc22bb7c206.gif" alt="img"></li>
<li>简单的几何动画、甚至可以做一些破碎的效果</li>
</ul>
<h3 id="②草地等效果（与曲面细分结合）"><a href="#②草地等效果（与曲面细分结合）" class="headerlink" title="②草地等效果（与曲面细分结合）"></a>②草地等效果（与曲面细分结合）</h3><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625197329054-12e8dc66-0e04-40bf-b7ec-33c578e5518a.png" alt="img"><ul>
<li>自定义草的画法，再和曲面细分着色器结合，就可以得到一个可以动态调整草密度的一个草地效果。</li>
</ul>
</li>
</ul>
<h1 id="二、从管线顺序来看"><a href="#二、从管线顺序来看" class="headerlink" title="二、从管线顺序来看"></a>二、从管线顺序来看</h1><ul>
<li><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625198192638-c9c13509-02bc-486e-9b84-40756573e58e.png" alt="img"></p>
</li>
<li><p>整体顺序：顶点 → 曲面细分 → 几何 → 片元</p>
<ul>
<li><p>曲面细分又分为：Hull shader 、Tessellation Primitive Generator 、 Domain shader</p>
<ul>
<li><p><strong>Hull shader</strong>主要作用：定义一些细分的参数（如：每条边上如何细分，内部三角形如何细分）</p>
</li>
<li><p><strong>Tessellation Primitive Generator</strong>，不可编程的</p>
</li>
<li><p><strong>Domain shader</strong>：经过曲面细分着色器细分后的点是位于重心空间的，这部分的作用就是把它转化到我们要用的空间。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>在D3D11 和 OpenGL中，名字/叫法有差异，问题不大</li>
</ul>
<h1 id="三、曲面细分着色器-Tessellation-shader（TESS）"><a href="#三、曲面细分着色器-Tessellation-shader（TESS）" class="headerlink" title="三、曲面细分着色器-Tessellation shader（TESS）"></a>三、曲面细分着色器-Tessellation shader（TESS）</h1><h2 id="1-TESS的输入和输出"><a href="#1-TESS的输入和输出" class="headerlink" title="1.TESS的输入和输出"></a>1.TESS的输入和输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul>
<li>称为Patch，可以看成是多个顶点的集合，包含每个顶点的属性。（属性是所有顶点共享的，不是每个顶点有独自的属性）</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li><p>将图元进行细分。</p>
</li>
<li><ul>
<li>图元可以是三角形、矩形等</li>
</ul>
</li>
<li><p>不同的图元，输入参数也不一样。</p>
</li>
</ul>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li>细分后的顶点</li>
</ul>
<h2 id="2-TESS的流程"><a href="#2-TESS的流程" class="headerlink" title="2.TESS的流程"></a>2.TESS的流程</h2><p>Hull shader → Tessellation Primitive Generator →  Domain shader</p>
<h3 id="Hull-shader"><a href="#Hull-shader" class="headerlink" title="Hull shader"></a>Hull shader</h3><ul>
<li><p>定义细分的参数</p>
<ul>
<li>设定Tessellation factor以及Inside Tessellation factor</li>
</ul>
</li>
<li><p>（如果需要的话）可以对输入的Patch参数进行改变</p>
</li>
</ul>
<h3 id="Tessellation-Primitive-Generator"><a href="#Tessellation-Primitive-Generator" class="headerlink" title="Tessellation Primitive Generator"></a>Tessellation Primitive Generator</h3><ul>
<li>这部分是不可编程、无法控制的</li>
<li>进行细分操作</li>
</ul>
<h3 id="Domain-shader"><a href="#Domain-shader" class="headerlink" title="Domain shader"></a>Domain shader</h3><ul>
<li>对细分后的点进行处理，从重心空间（Barycentric coordinate system）转换到屏幕空间</li>
</ul>
<h2 id="3-Hull-shader参数详解"><a href="#3-Hull-shader参数详解" class="headerlink" title="3.Hull shader参数详解"></a>3.Hull shader参数详解</h2><h3 id="①Tessellation-Factor"><a href="#①Tessellation-Factor" class="headerlink" title="①Tessellation Factor"></a>①Tessellation Factor</h3><ul>
<li>定义把一条边分为几个部分</li>
<li><p><strong>切分的方法有三种</strong>：</p>
<ul>
<li><strong>equal_Spacing</strong><ul>
<li>把一条边等分（二、三分等等..）</li>
<li><img src="https://cdn.nlark.com/yuque/0/2021/gif/12962324/1625200279059-61d9ced3-9b01-4d76-bb9c-abe3e46db26c.gif" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>fractional_even_spacing</strong></p>
<ul>
<li>向上取最近的偶数</li>
<li>最小值是2</li>
<li>会把周长分为n-2的等长部分、以及两端不等长的部分（两端部分和小数有关，具体看gif）</li>
<li><img src="https://cdn.nlark.com/yuque/0/2021/gif/12962324/1625200292416-55458d78-ec19-4298-b46c-6ebdd38895b0.gif" alt="img"></li>
</ul>
</li>
<li><p><strong>fractional_odd_spacing</strong></p>
<ul>
<li>向上取最近的奇数</li>
<li>最小值是1</li>
<li>会把周长分为n-2的等长部分、以及两端不等长的部分</li>
<li><img src="https://cdn.nlark.com/yuque/0/2021/gif/12962324/1625200307439-40333bda-affe-4f54-aef9-b35c386fdb4d.gif" alt="img"></li>
</ul>
</li>
<li><p><strong>目的</strong>：让细分更加平滑</p>
</li>
</ul>
<h3 id="②Inner-Tessellation-Factor"><a href="#②Inner-Tessellation-Factor" class="headerlink" title="②Inner Tessellation Factor"></a>②Inner Tessellation Factor</h3><ul>
<li>定义内部的三角形/矩形是怎么画出来的</li>
<li><p>三角形情况</p>
</li>
<li><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625200604403-77d787e3-9386-4620-946a-df42d6431436.png" alt="img"></p>
</li>
</ul>
<ul>
<li><p>例如上图三等分的情况：</p>
<ul>
<li>将三条边三等分，然后从一个端点开始，取邻近的两个切分点做延长线，两者的交点就是新三角形的一个端点。以此类推就是左图的效果。</li>
</ul>
</li>
<li><p>上图四等分、甚至更多点的情况：</p>
<ul>
<li>上述三等分步骤之后，内部三角形的每个边的等分点做延长线，交点就是</li>
</ul>
</li>
<li><p>矩形情况</p>
<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625201860508-1ca3af9b-b450-484c-99d3-c89251867f9c.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2021/png/12962324/1625201863667-6250012a-eb0a-4b4a-b823-a0155e7cecb9.png" alt="img"></li>
<li>同样的，做延长线，交点，直到没有交点或者交于重心一个点</li>
</ul>
</li>
</ul>
<h2 id="4-曲面细分Demo部分"><a href="#4-曲面细分Demo部分" class="headerlink" title="4.曲面细分Demo部分"></a>4.曲面细分Demo部分</h2><p>//注：代码直接复制的评论区里同学码出来的，懒得再打一遍了233</p>
<h3 id="Demo1：曲面细分算法展示"><a href="#Demo1：曲面细分算法展示" class="headerlink" title="Demo1：曲面细分算法展示"></a>Demo1：曲面细分算法展示</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//曲面细分Demo1</span></span><br><span class="line">Shader <span class="string">&quot;Unlit/TessShader&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _TessellationUniform(<span class="string">&quot;TessellationUniform&quot;</span>,<span class="built_in">Range</span>(<span class="number">1</span>,<span class="number">64</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="comment">//定义2个函数 hull domain</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> hull hullProgram</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> domain ds</span></span><br><span class="line">           </span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex tessvert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="comment">//引入曲面细分的头文件</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Tessellation.cginc&quot;</span> </span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> target 5.0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">struct</span> VertexInput</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">VertexOutput</span></span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">VertexOutput <span class="title">vert</span> <span class="params">(VertexInput v)</span></span></span><br><span class="line"><span class="function">            <span class="comment">//这个函数应用在domain函数中，用来空间转换的函数</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                VertexOutput o;</span><br><span class="line">                o.vertex = <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">                o.uv = v.uv;</span><br><span class="line">                o.tangent = v.tangent;</span><br><span class="line">                o.normal = v.normal;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//有些硬件不支持曲面细分着色器，定义了该宏就能够在不支持的硬件上不会变粉，也不会报错</span></span><br><span class="line">            <span class="meta">#<span class="keyword">ifdef</span> UNITY_CAN_COMPILE_TESSELLATION</span></span><br><span class="line">                <span class="comment">//顶点着色器结构的定义</span></span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">TessVertex</span>&#123;</span><br><span class="line">                    float4 vertex : INTERNALTESSPOS;</span><br><span class="line">                    float3 normal : NORMAL;</span><br><span class="line">                    float4 tangent : TANGENT;</span><br><span class="line">                    float2 uv : TEXCOORD0;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">OutputPatchConstant</span> &#123; </span><br><span class="line">                    <span class="comment">//不同的图元，该结构会有所不同</span></span><br><span class="line">                    <span class="comment">//该部分用于Hull Shader里面</span></span><br><span class="line">                    <span class="comment">//定义了patch的属性</span></span><br><span class="line">                    <span class="comment">//Tessellation Factor和Inner Tessellation Factor</span></span><br><span class="line">                    <span class="type">float</span> edge[<span class="number">3</span>] : SV_TESSFACTOR;</span><br><span class="line">                    <span class="type">float</span> inside  : SV_INSIDETESSFACTOR;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="function">TessVertex <span class="title">tessvert</span> <span class="params">(VertexInput v)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//顶点着色器函数</span></span><br><span class="line">                    TessVertex o;</span><br><span class="line">                    o.vertex  = v.vertex;</span><br><span class="line">                    o.normal  = v.normal;</span><br><span class="line">                    o.tangent = v.tangent;</span><br><span class="line">                    o.uv      = v.uv;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">float</span> _TessellationUniform;</span><br><span class="line">                <span class="function">OutputPatchConstant <span class="title">hsconst</span> <span class="params">(InputPatch&lt;TessVertex,<span class="number">3</span>&gt; patch)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//定义曲面细分的参数</span></span><br><span class="line">                    OutputPatchConstant o;</span><br><span class="line">                    o.edge[<span class="number">0</span>] = _TessellationUniform;</span><br><span class="line">                    o.edge[<span class="number">1</span>] = _TessellationUniform;</span><br><span class="line">                    o.edge[<span class="number">2</span>] = _TessellationUniform;</span><br><span class="line">                    o.inside  = _TessellationUniform;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                [<span class="built_in">UNITY_domain</span>(<span class="string">&quot;tri&quot;</span>)]<span class="comment">//确定图元，quad,triangle等</span></span><br><span class="line">                [<span class="built_in">UNITY_partitioning</span>(<span class="string">&quot;fractional_odd&quot;</span>)]<span class="comment">//拆分edge的规则，equal_spacing,fractional_odd,fractional_even</span></span><br><span class="line">                [<span class="built_in">UNITY_outputtopology</span>(<span class="string">&quot;triangle_cw&quot;</span>)]</span><br><span class="line">                [<span class="built_in">UNITY_patchconstantfunc</span>(<span class="string">&quot;hsconst&quot;</span>)]<span class="comment">//一个patch一共有三个点，但是这三个点都共用这个函数</span></span><br><span class="line">                [<span class="built_in">UNITY_outputcontrolpoints</span>(<span class="number">3</span>)]      <span class="comment">//不同的图元会对应不同的控制点</span></span><br><span class="line">              </span><br><span class="line">                <span class="function">TessVertex <span class="title">hullProgram</span> <span class="params">(InputPatch&lt;TessVertex,<span class="number">3</span>&gt; patch,uint id : SV_OutputControlPointID)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//定义hullshaderV函数</span></span><br><span class="line">                    <span class="keyword">return</span> patch[id];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                [<span class="built_in">UNITY_domain</span>(<span class="string">&quot;tri&quot;</span>)]<span class="comment">//同样需要定义图元</span></span><br><span class="line">                <span class="function">VertexOutput <span class="title">ds</span> <span class="params">(OutputPatchConstant tessFactors, <span class="type">const</span> OutputPatch&lt;TessVertex,<span class="number">3</span>&gt;patch,float3 bary :SV_DOMAINLOCATION)</span></span></span><br><span class="line"><span class="function">                <span class="comment">//bary:重心坐标</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    VertexInput v;</span><br><span class="line">                    v.vertex = patch[<span class="number">0</span>].vertex*bary.x + patch[<span class="number">1</span>].vertex*bary.y + patch[<span class="number">2</span>].vertex*bary.z;</span><br><span class="line">			        v.tangent = patch[<span class="number">0</span>].tangent*bary.x + patch[<span class="number">1</span>].tangent*bary.y + patch[<span class="number">2</span>].tangent*bary.z;</span><br><span class="line">			        v.normal = patch[<span class="number">0</span>].normal*bary.x + patch[<span class="number">1</span>].normal*bary.y + patch[<span class="number">2</span>].normal*bary.z;</span><br><span class="line">			        v.uv = patch[<span class="number">0</span>].uv*bary.x + patch[<span class="number">1</span>].uv*bary.y + patch[<span class="number">2</span>].uv*bary.z;</span><br><span class="line"></span><br><span class="line">                    VertexOutput o = <span class="built_in">vert</span> (v);</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            <span class="function">float4 <span class="title">frag</span> <span class="params">(VertexOutput i)</span> : SV_Target</span></span><br><span class="line"><span class="function">            &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">float4</span>(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback <span class="string">&quot;Diffuse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Demo2：和置换贴图结合"><a href="#Demo2：和置换贴图结合" class="headerlink" title="Demo2：和置换贴图结合"></a>Demo2：和置换贴图结合</h3><ul>
<li><p><strong>基本原理</strong></p>
</li>
<li><ul>
<li>通过置换贴图的深度，来把顶点沿着它的法线方向进行移动，以此来对mash进行形变。</li>
</ul>
</li>
<li><p>代码部分和上个Demo的区别也就是在顶点shader部分对顶点进行了位移、和一些计算法线的参数。（因为顶点位移后没有对应的法线贴图，所以需要自己计算一下，具体怎么算先不讲，属于置换贴图部分的知识）</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//曲面细分Demo2：与置换贴图结合使用</span></span><br><span class="line">Shader <span class="string">&quot;Unlit/Tess_Diss_Shader&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(<span class="string">&quot;MainTex&quot;</span>,<span class="number">2</span>D) = <span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line">        _DisplacementMap(<span class="string">&quot;_DisplacementMap&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;gray&quot;</span>&#123;&#125;</span><br><span class="line">        _DisplacementStrength(<span class="string">&quot;DisplacementStrength&quot;</span>,<span class="built_in">Range</span>(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0</span></span><br><span class="line">        _Smoothness(<span class="string">&quot;Smoothness&quot;</span>,<span class="built_in">Range</span>(<span class="number">0</span>,<span class="number">5</span>))=<span class="number">0.5</span></span><br><span class="line">        _TessellationUniform(<span class="string">&quot;TessellationUniform&quot;</span>,<span class="built_in">Range</span>(<span class="number">1</span>,<span class="number">64</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> </span><br><span class="line">               <span class="string">&quot;LightMode&quot;</span>=<span class="string">&quot;ForwardBase&quot;</span>&#125;</span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="comment">//定义2个函数 hull domain</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> hull hullProgram</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> domain ds</span></span><br><span class="line">           </span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex tessvert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            <span class="comment">//引入曲面细分的头文件</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Tessellation.cginc&quot;</span> </span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> target 5.0</span></span><br><span class="line">            <span class="type">float</span> _TessellationUniform;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            sampler2D _DisplacementMap;</span><br><span class="line">            float4 _DisplacementMap_ST;</span><br><span class="line">            <span class="type">float</span> _DisplacementStrength;</span><br><span class="line">            <span class="type">float</span> _Smoothness;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">VertexInput</span></span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">VertexOutput</span></span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 worldPos:TEXCOORD1;</span><br><span class="line">                half3 tspace0 :TEXCOORD2;</span><br><span class="line">                half3 tspace1 :TEXCOORD3;</span><br><span class="line">                half3 tspace2 :TEXCOORD4;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">VertexOutput <span class="title">vert</span> <span class="params">(VertexInput v)</span></span></span><br><span class="line"><span class="function">            <span class="comment">//这个函数应用在domain函数中，用来空间转换的函数</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                VertexOutput o;</span><br><span class="line">                o.uv = <span class="built_in">TRANSFORM_TEX</span>(v.uv,_MainTex);</span><br><span class="line">                <span class="comment">//Displacement</span></span><br><span class="line">                <span class="comment">//由于并不是在Fragnent shader中读取图片，GPU无法获取mipmap信息，因此需要使用tex2Dlod来读取图片，使用第四坐标作为mipmap的level，这里取了0</span></span><br><span class="line">                <span class="type">float</span> Displacement = <span class="built_in">tex2Dlod</span>(_DisplacementMap,<span class="built_in">float4</span>(o.uv.xy,<span class="number">0.0</span>,<span class="number">0.0</span>)).g;</span><br><span class="line">                Displacement = (Displacement<span class="number">-0.5</span>)*_DisplacementStrength;</span><br><span class="line">                v.normal = <span class="built_in">normalize</span>(v.normal);</span><br><span class="line">                v.vertex.xyz += v.normal * Displacement;</span><br><span class="line"></span><br><span class="line">                o.pos = <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">                o.worldPos = <span class="built_in">mul</span>(unity_ObjectToWorld, v.vertex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算切线空间转换矩阵</span></span><br><span class="line">                half3 vNormal = <span class="built_in">UnityObjectToWorldNormal</span>(v.normal);</span><br><span class="line">                half3 vTangent = <span class="built_in">UnityObjectToWorldDir</span>(v.tangent.xyz);</span><br><span class="line">                <span class="comment">//compute bitangent from cross product of normal and tangent</span></span><br><span class="line">                half tangentSign = v.tangent.w * unity_WorldTransformParams.w;</span><br><span class="line">                half3 vBitangent = <span class="built_in">cross</span>(vNormal,vTangent)*tangentSign;</span><br><span class="line">                <span class="comment">//output the tangent space matrix</span></span><br><span class="line">                o.tspace0 = <span class="built_in">half3</span>(vTangent.x,vBitangent.x,vNormal.x);</span><br><span class="line">                o.tspace1 = <span class="built_in">half3</span>(vTangent.y,vBitangent.y,vNormal.y);</span><br><span class="line">                o.tspace2 = <span class="built_in">half3</span>(vTangent.z,vBitangent.z,vNormal.z);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//有些硬件不支持曲面细分着色器，定义了该宏就能够在不支持的硬件上不会变粉，也不会报错</span></span><br><span class="line">            <span class="meta">#<span class="keyword">ifdef</span> UNITY_CAN_COMPILE_TESSELLATION</span></span><br><span class="line">                <span class="comment">//顶点着色器结构的定义</span></span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">TessVertex</span>&#123;</span><br><span class="line">                    float4 vertex : INTERNALTESSPOS;</span><br><span class="line">                    float3 normal : NORMAL;</span><br><span class="line">                    float4 tangent : TANGENT;</span><br><span class="line">                    float2 uv : TEXCOORD0;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">OutputPatchConstant</span> &#123; </span><br><span class="line">                    <span class="comment">//不同的图元，该结构会有所不同</span></span><br><span class="line">                    <span class="comment">//该部分用于Hull Shader里面</span></span><br><span class="line">                    <span class="comment">//定义了patch的属性</span></span><br><span class="line">                    <span class="comment">//Tessellation Factor和Inner Tessellation Factor</span></span><br><span class="line">                    <span class="type">float</span> edge[<span class="number">3</span>] : SV_TESSFACTOR;</span><br><span class="line">                    <span class="type">float</span> inside  : SV_INSIDETESSFACTOR;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="function">TessVertex <span class="title">tessvert</span> <span class="params">(VertexInput v)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//顶点着色器函数</span></span><br><span class="line">                    TessVertex o;</span><br><span class="line">                    o.vertex  = v.vertex;</span><br><span class="line">                    o.normal  = v.normal;</span><br><span class="line">                    o.tangent = v.tangent;</span><br><span class="line">                    o.uv      = v.uv;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//float _TessellationUniform;</span></span><br><span class="line">                <span class="function">OutputPatchConstant <span class="title">hsconst</span> <span class="params">(InputPatch&lt;TessVertex,<span class="number">3</span>&gt; patch)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//定义曲面细分的参数</span></span><br><span class="line">                    OutputPatchConstant o;</span><br><span class="line">                    o.edge[<span class="number">0</span>] = _TessellationUniform;</span><br><span class="line">                    o.edge[<span class="number">1</span>] = _TessellationUniform;</span><br><span class="line">                    o.edge[<span class="number">2</span>] = _TessellationUniform;</span><br><span class="line">                    o.inside  = _TessellationUniform;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                [<span class="built_in">UNITY_domain</span>(<span class="string">&quot;tri&quot;</span>)]<span class="comment">//确定图元，quad,triangle等</span></span><br><span class="line">                [<span class="built_in">UNITY_partitioning</span>(<span class="string">&quot;fractional_odd&quot;</span>)]<span class="comment">//拆分edge的规则，equal_spacing,fractional_odd,fractional_even</span></span><br><span class="line">                [<span class="built_in">UNITY_outputtopology</span>(<span class="string">&quot;triangle_cw&quot;</span>)]</span><br><span class="line">                [<span class="built_in">UNITY_patchconstantfunc</span>(<span class="string">&quot;hsconst&quot;</span>)]<span class="comment">//一个patch一共有三个点，但是这三个点都共用这个函数</span></span><br><span class="line">                [<span class="built_in">UNITY_outputcontrolpoints</span>(<span class="number">3</span>)]      <span class="comment">//不同的图元会对应不同的控制点</span></span><br><span class="line">              </span><br><span class="line">                <span class="function">TessVertex <span class="title">hullProgram</span> <span class="params">(InputPatch&lt;TessVertex,<span class="number">3</span>&gt; patch,uint id : SV_OutputControlPointID)</span></span>&#123;</span><br><span class="line">                    <span class="comment">//定义hullshaderV函数</span></span><br><span class="line">                    <span class="keyword">return</span> patch[id];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                [<span class="built_in">UNITY_domain</span>(<span class="string">&quot;tri&quot;</span>)]<span class="comment">//同样需要定义图元</span></span><br><span class="line">                <span class="function">VertexOutput <span class="title">ds</span> <span class="params">(OutputPatchConstant tessFactors, <span class="type">const</span> OutputPatch&lt;TessVertex,<span class="number">3</span>&gt;patch,float3 bary :SV_DOMAINLOCATION)</span></span></span><br><span class="line"><span class="function">                <span class="comment">//bary:重心坐标</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    VertexInput v;</span><br><span class="line">                    v.vertex = patch[<span class="number">0</span>].vertex*bary.x + patch[<span class="number">1</span>].vertex*bary.y + patch[<span class="number">2</span>].vertex*bary.z;</span><br><span class="line">			        v.tangent = patch[<span class="number">0</span>].tangent*bary.x + patch[<span class="number">1</span>].tangent*bary.y + patch[<span class="number">2</span>].tangent*bary.z;</span><br><span class="line">			        v.normal = patch[<span class="number">0</span>].normal*bary.x + patch[<span class="number">1</span>].normal*bary.y + patch[<span class="number">2</span>].normal*bary.z;</span><br><span class="line">			        v.uv = patch[<span class="number">0</span>].uv*bary.x + patch[<span class="number">1</span>].uv*bary.y + patch[<span class="number">2</span>].uv*bary.z;</span><br><span class="line"></span><br><span class="line">                    VertexOutput o = <span class="built_in">vert</span> (v);</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            <span class="function">float4 <span class="title">frag</span> <span class="params">(VertexOutput i)</span> : SV_Target</span></span><br><span class="line"><span class="function">            &#123;</span></span><br><span class="line">                float3 lightDir =_WorldSpaceLightPos0.xyz;</span><br><span class="line">                float3 tnormal = <span class="built_in">UnpackNormal</span> (<span class="built_in">tex2D</span> (_DisplacementMap, i.uv));</span><br><span class="line">                half3 worldNormal;</span><br><span class="line">                worldNormal.x=<span class="built_in">dot</span>(i.tspace0,tnormal);</span><br><span class="line">                worldNormal.y= <span class="built_in">dot</span> (i.tspace1, tnormal);</span><br><span class="line">                worldNormal.z=<span class="built_in">dot</span> (i.tspace2, tnormal);</span><br><span class="line">                float3 albedo=<span class="built_in">tex2D</span> (_MainTex, i.uv). rgb;</span><br><span class="line">                float3 lightColor = _LightColor0.rgb;</span><br><span class="line">                float3 diffuse = albedo * lightColor * <span class="built_in">DotClamped</span>(lightDir,worldNormal);</span><br><span class="line">                float3 viewDir = <span class="built_in">normalize</span> (_WorldSpaceCameraPos. xyz-i. worldPos. xyz);</span><br><span class="line">                float3 halfVector = <span class="built_in">normalize</span>(lightDir + viewDir);</span><br><span class="line">                float3 specular = albedo * <span class="built_in">pow</span> (<span class="built_in">DotClamped</span> (halfVector, worldNormal), _Smoothness * <span class="number">100</span>);</span><br><span class="line">                float3 result = specular + diffuse;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">float4</span>(result, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">float4</span>(result,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback <span class="string">&quot;Diffuse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、几何着色器-Geometry-shader-（GS）"><a href="#四、几何着色器-Geometry-shader-（GS）" class="headerlink" title="四、几何着色器-Geometry shader （GS）"></a>四、几何着色器-Geometry shader （GS）</h1><h2 id="1-GS的输入和输出"><a href="#1-GS的输入和输出" class="headerlink" title="1.GS的输入和输出"></a>1.GS的输入和输出</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><ul>
<li>输入为单个图元（三角形、矩形、线等等）</li>
<li>根据不同的图元，shader中会出现不同的顶点数量</li>
</ul>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><ul>
<li>输出也为图元（一个或者多个）</li>
<li>同时还要定义输出的最大顶点数</li>
<li>输出的图元需要自己一个点一个点的自己去构建，顺序很重要（这个着色器最主要的功能：自己构建图元）</li>
</ul>
<h2 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h2><ul>
<li>输入输出结构</li>
<li>定义最大输出定点数</li>
<li>几何着色器</li>
</ul>
<h1 id="五、其他资料"><a href="#五、其他资料" class="headerlink" title="五、其他资料"></a>五、其他资料</h1><ul>
<li><a href="https://www.cnblogs.com/mazhenyu/p/3831986.html几何着色器">https://www.cnblogs.com/mazhenyu/p/3831986.html几何着色器</a></li>
<li>catlike-曲面细分着色器：</li>
<li><a href="https://catlikecoding.com/unity/tutorials/advanced-rendering/tessellation/">https://catlikecoding.com/unity/tutorials/advanced-rendering/tessellation/</a></li>
<li><a href="https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/xyx5h5">https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/xyx5h5</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/433385999">https://zhuanlan.zhihu.com/p/433385999</a></li>
</ul>
<hr>
<h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><p><img src="/2023/02/15/HPP_Graphics_3.3_TessAndGs/Homework1.png" alt="Homework1"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>曲面细分着色器</tag>
        <tag>几何着色器</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.7.2 GPU硬件架构概述</title>
    <url>/2023/02/15/HPP_Graphics_2.7.2_GPU%E7%A1%AC%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ul>
<li>GPU逻辑管线</li>
</ul>
<ol>
<li>程序通过图形API(DX、GL、WEBGL)发出drawcall指令，指令会被推送到驱动程序，驱动会检查指令的合法性，然后会把指令放到GPU可以读取的Pushbuffer中。</li>
<li>经过一段时间或者显式调用flush指令后，驱动程序把Pushbuffer的内容发送给GPU，GPU通过主机接口（Host Interface）接受这些命令，并通过前端（Front End）处理这些命令。</li>
<li>在图元分配器(Primitive Distributor)中开始工作分配，处理indexbuffer中的顶点产生三角形分成批次(batches)，然后发送给多个GPCs。这一步的理解就是提交上来n个三角形，分配给这几个GPC同时处理。</li>
<li>在GPC中，每个SM中的Poly Morph Engine负责通过三角形索引(triangle indices)取出三角形的数据(vertex data)，即图中的Vertex Fetch模块。</li>
<li>在获取数据之后，在SM中以32个线程为一组的线程束(Warp)来调度，来开始处理顶点数据。</li>
<li>SM的warp调度器会按照顺序分发指令给整个warp，单个warp中的线程会锁步(lock-step)执行各自的指令，如果线程碰到不激活执行的情况也会被遮掩(be masked out)</li>
<li>warp中的指令可以被一次完成，也可能经过多次调度，例如通常SM中的LD/ST(加载存取)单元数量明显少于基础数学操作单元。</li>
<li>由于某些指令比其他指令需要更长的时间才能完成，特别是内存加载，warp调度器可能会简单地切换到另一个没有内存等待的warp，这是GPU如何克服内存读取延迟的关键，只是简单地切换活动线程组。</li>
<li>一旦warp完成了vertex-shader的所有指令，运算结果会被Viewport Transform模块处理，三角形会被裁剪然后准备栅格化，GPU会使用L1和L2缓存来进行vertex-shader和pixel-shader的数据通信。</li>
<li>接下来这些三角形将被分割，再分配给多个GPC，三角形的范围决定着它将被分配到哪个光栅引擎(raster engines)，每个raster engines覆盖了多个屏幕上的tile，这等于把三角形的渲染分配到多个tile上面。也就是像素阶段就把按三角形划分变成了按显示的像素划分了。</li>
<li>SM上的Attribute Setup保证了从vertex-shader来的数据经过插值后是pixel-shade是可读的。</li>
<li>GPC上的光栅引擎(raster engines)在它接收到的三角形上工作，来负责这些这些三角形的像素信息的生成（同时会处理背面剔除和Early-Z剔除）。</li>
<li>32个像素线程将被分成一组，或者说8个2x2的像素块，这是在像素着色器上面的最小工作单元，在这个像素线程内，如果没有被三角形覆盖就会被遮掩，SM中的warp调度器会管理像素着色器的任务。</li>
<li>接下来的阶段就和vertex-shader中的逻辑步骤完全一样，但是变成了在像素着色器线程中执行。 由于不耗费任何性能可以获取一个像素内的值，导致锁步执行非常便利，所有的线程可以保证所有的指令可以在同一点。</li>
<li>最后一步，现在像素着色器已经完成了颜色的计算还有深度值的计算，在这个点上，我们必须考虑三角形的原始api顺序，然后才将数据移交给ROP(render output unit，渲染输入单元)，一个ROP内部有很多ROP单元，在ROP单元中处理深度测试，和framebuffer的混合，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。</li>
</ol>
<p><a href="https://www.cnblogs.com/anesu/p/15807749.html#/c/subject/p/15807749.html">https://www.cnblogs.com/anesu/p/15807749.html#/c/subject/p/15807749.html</a></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.7 HDR和LDR</title>
    <url>/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/</url>
    <content><![CDATA[<h2 id="a-基本概念"><a href="#a-基本概念" class="headerlink" title="a). 基本概念"></a>a). 基本概念</h2><p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/HDRandLDR.png" alt="HDRandLDR"></p>
<ul>
<li><p>因为HDR可超过1，又被叫做<strong>浮点图像</strong><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/SP_HDR.png" alt="SP_HDR"></p>
<ul>
<li><p>也因为HDR可超过1，<strong>bloom</strong>会有较好的表现；</p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/HDR_Bloom.png" alt="HDR_Bloom"></p>
</li>
</ul>
</li>
</ul>
<h2 id="b-Unity中的HDR"><a href="#b-Unity中的HDR" class="headerlink" title="b). Unity中的HDR"></a>b). Unity中的HDR</h2><ul>
<li><p><strong>Camera</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/Cam_HDR.png" alt="Cam_HDR"></p>
</li>
<li><p><strong>Lightmap</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/Lightmap_HDR.png" alt="Lightmap_HDR"></p>
</li>
<li><p><strong>拾色器</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/拾色器_HDR.png" alt="拾色器_HDR"></p>
</li>
</ul>
<ul>
<li><p><strong>Unity中HDR的优缺点：</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/优缺点_HDR.png" alt="优缺点_HDR"></p>
</li>
</ul>
<h2 id="c-Bloom"><a href="#c-Bloom" class="headerlink" title="c). Bloom"></a>c). Bloom</h2><ul>
<li><p><strong>基础做法：</strong> 后处理中，选取高于一定亮度的像素区域，进行Blur（高斯模糊之类的），最后进行叠加；</p>
</li>
<li><p><strong>Unity中的做法：</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/Unity_Bloom.png" alt="Unity_Bloom"></p>
</li>
</ul>
<h2 id="d-Toon-Mapping"><a href="#d-Toon-Mapping" class="headerlink" title="d). Toon Mapping"></a>d). Toon Mapping</h2><ul>
<li><p><strong>原因：</strong> 照相机和摄像机可以捕捉到HDR的影响，渲染过程中可以产生HDR的画面。这些内容如果需要显示到LDR的设备上，就需要一个称为tone mapping的过程，把HDR变成LDR。</p>
</li>
<li><p><strong>ACES曲线：</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/ACES_ToonMapping.png" alt="ACES_ToonMapping"></p>
</li>
<li><p>ToonMapping算法：<a href="https://zhuanlan.zhihu.com/p/21983679">https://zhuanlan.zhihu.com/p/21983679</a></p>
</li>
</ul>
<ul>
<li><strong>Lut：</strong> 略</li>
</ul>
<span id="more"></span>
<hr>
<p><strong>【参考资料】</strong></p>
<ul>
<li>《Unity Shader入门精要》</li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">https://docs.unity.cn/cn/current/Manual/HDR.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">https://zhuanlan.zhihu.com/p/91390940</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">https://zhuanlan.zhihu.com/p/80253409</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">https://zhuanlan.zhihu.com/p/21983679</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">http://www.openexr.org/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57897827">http://www.hdrlabs.com/sibl/archive.html</a></li>
</ul>
<h2 id="作业：试试IBL在HDR和LDR的区别"><a href="#作业：试试IBL在HDR和LDR的区别" class="headerlink" title="作业：试试IBL在HDR和LDR的区别"></a>作业：试试IBL在HDR和LDR的区别</h2><p><a href="https://blog.csdn.net/qq_43210334/article/details/117415250">https://blog.csdn.net/qq_43210334/article/details/117415250</a></p>
<ul>
<li><p>以下是在Unity中的对比，分别是使用ACES曲线的LDR和HDR的对比，同时加入了轻微的Bloom；</p>
<p><img src="/2023/02/15/HPP_Graphics_2.7_HDR%E5%92%8CLDR/ACES_vs_HDR_Bloom.png" alt="ACES_vs_HDR_Bloom"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>色彩管理</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.6 伽马校正</title>
    <url>/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/</url>
    <content><![CDATA[<ul>
<li>渲染时，着色器中<strong>计算颜色最好在线性空间</strong>下（从辐射度量学的角度来看，是计算radiance和Irradiance）</li>
</ul>
<h2 id="a-Unity中的色彩管理"><a href="#a-Unity中的色彩管理" class="headerlink" title="a). Unity中的色彩管理"></a>a). Unity中的色彩管理</h2><p><a href="https://docs.unity.cn/cn/current/Manual/LinearLighting.html">https://docs.unity.cn/cn/current/Manual/LinearLighting.html</a></p>
<ul>
<li><p>Unity中选择色彩空间为Gamma时，渲染管线将使用伽马颜色空间中存储的所有颜色（比如灯光的颜色）和纹理。着色器不会对输入的贴图做sRGB采样，同时也不会对灯光颜色进行伽马转线性</p>
</li>
<li><p>Unity中色彩空间设置为Linear时，Unity会默认勾选sRGB，着色器会对勾选sRGB的进行sRGB采样（伽马转线性），详见后图</p>
<blockquote>
<p>选择 <strong>Color Space:</strong> <strong>Linear</strong> 将假设纹理位于伽马颜色空间内。Unity 在默认情况下使用 GPU 的 sRGB 采样器从伽马颜色空间跨越到线性颜色空间。如果纹理是在线性颜色空间内创建的，则需要绕过 sRGB 采样。请参阅有关<a href="https://docs.unity.cn/cn/current/Manual/LinearRendering-LinearTextures.html">使用线性纹理</a>的文档以了解更多信息。</p>
</blockquote>
<p><img src="/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/Hardware.png" alt="Hardware"></p>
</li>
<li><p><strong>SP-U3D</strong>（SP的新版色彩管理OpenColorIO非常好，不清楚就去看看）</p>
<p><img src="/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/SP_U3D.png" alt="SP_U3D"></p>
</li>
<li><p><strong>PS-U3D</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/PS_U3D.png" alt="PS_U3D"></p>
<ul>
<li><p>PS的色彩管理</p>
<p><img src="/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/PS_ColorManage.png" alt="PS_ColorManage"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.6_%E4%BC%BD%E9%A9%AC%E6%A0%A1%E6%AD%A3/PS_ColorManage2.png" alt="PS_ColorManage2"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>色彩管理</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.5 Bump Mapping</title>
    <url>/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/</url>
    <content><![CDATA[<h2 id="a-Bump-Map的分类"><a href="#a-Bump-Map的分类" class="headerlink" title="a). Bump Map的分类"></a>a). Bump Map的分类</h2><p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/BumpMap00.png" alt="BumpMap00"></p>
<h2 id="b-Normal-Map"><a href="#b-Normal-Map" class="headerlink" title="b). Normal Map"></a>b). Normal Map</h2><ul>
<li>法线贴图：存有物体局部（切线空间）表面法线信息的一张贴图</li>
</ul>
<p><a href="../../../../Other/NOTE.md">Link1 NOTE.md</a></p>
<p><a href="https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/nspda5">Link2</a></p>
<ul>
<li><strong>储存空间：</strong><ul>
<li>（一般采用）切线空间</li>
<li>模型空间</li>
</ul>
</li>
</ul>
<h3 id="b-1-Tangent-Space"><a href="#b-1-Tangent-Space" class="headerlink" title="b.1). Tangent Space"></a>b.1). Tangent Space</h3><p><a href="https://blog.csdn.net/Motarookie/article/details/123507610?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167309067916800225519095%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167309067916800225519095&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123507610-null-null.142^v70^pc_new_rank,201^v4^add_ask&amp;utm_term=%E5%88%87%E7%BA%BF%E7%A9%BA%E9%97%B4&amp;spm=1018.2226.3001.4187">Link3 切线空间(Tangent Space)</a></p>
<ul>
<li><p>切线空间中，x轴为切线，y轴为副切线，z轴为表面初始法线</p>
<p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/TangentSpace00.png" alt="TangentSpace00"></p>
<ul>
<li>其中，切线的方向对应UV空间的 $u$ 轴，副切线对应 $v$ 轴（详见Link1、Link3）</li>
</ul>
</li>
<li><p><strong>使用切线空间的优点：</strong></p>
<ol>
<li>自由度高，可复用</li>
<li>可进行uv动画</li>
<li>可压缩</li>
</ol>
</li>
</ul>
<h2 id="c-Unity中的法线压缩格式"><a href="#c-Unity中的法线压缩格式" class="headerlink" title="c). Unity中的法线压缩格式"></a>c). Unity中的法线压缩格式</h2><p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/UnityNormalZip.png" alt="UnityNormalZip"></p>
<span id="more"></span>
<h2 id="d-Parallax-Mapping-时差映射"><a href="#d-Parallax-Mapping-时差映射" class="headerlink" title="d). Parallax Mapping(时差映射)"></a>d). Parallax Mapping(时差映射)</h2><p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/Parallax_Mapping.png" alt="Parallax_Mapping"></p>
<h3 id="d-1-普通实现方式"><a href="#d-1-普通实现方式" class="headerlink" title="d.1). 普通实现方式"></a>d.1). 普通实现方式</h3><p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/Parallax_Mapping01.png" alt="Parallax_Mapping01"></p>
<ul>
<li>这里能用切线空间的视线方向 $viewDirTS$ 来计算 UV 的偏移的原因正是因为切线空间的$x, y$轴和UV空间的 $u, v$ 轴对应；</li>
</ul>
<h3 id="d-2-Steep-Parallax-Mapping-陡峭视差映射"><a href="#d-2-Steep-Parallax-Mapping-陡峭视差映射" class="headerlink" title="d.2). Steep Parallax Mapping(陡峭视差映射)"></a>d.2). Steep Parallax Mapping(陡峭视差映射)</h3><ul>
<li>采用光线步进；</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/SteepParallaxMapping.png" alt="SteepParallaxMapping"></p>
<ul>
<li>但如效果仍有不足，可采用浮雕贴图（Relief Mapping）</li>
</ul>
<h2 id="e-Relief-Mapping（浮雕贴图）"><a href="#e-Relief-Mapping（浮雕贴图）" class="headerlink" title="e). Relief Mapping（浮雕贴图）"></a>e). Relief Mapping（浮雕贴图）</h2><p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/ReliefMapping.png" alt="ReliefMapping"></p>
<ul>
<li><strong>实现方法：</strong><ul>
<li>最后一步步进后，在最后一步的范围内使用<strong>二分查找</strong>，直到找到近似P点的点；</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/ReliefMapping02.png" alt="ReliefMapping02"></p>
<ul>
<li><strong>优化方法：</strong><ul>
<li>二分法性能开销过大；</li>
<li>最后一个步进时得到高度 $h1$ 和 $h2$ ，$H_p = (h1+h2)/2$ （见上图）</li>
</ul>
</li>
</ul>
<h2 id="作业-视差贴图、浮雕贴图的实现"><a href="#作业-视差贴图、浮雕贴图的实现" class="headerlink" title="作业 视差贴图、浮雕贴图的实现"></a>作业 视差贴图、浮雕贴图的实现</h2><ul>
<li><p>资料补充：<a href="https://blog.csdn.net/xiaoge132/article/details/51173002?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167310245516800225536310%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167310245516800225536310&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-51173002-null-null.142^v70^pc_new_rank,201^v4^add_ask&amp;utm_term=%E9%99%A1%E5%B3%AD%E8%A7%86%E5%B7%AE%E6%98%A0%E5%B0%84&amp;spm=1018.2226.3001.4187">视差贴图（Parallax Mapping）与陡峭视差贴图(Steep Palallax Mapping, 已收藏在收藏夹)</a></p>
</li>
<li><p>Shader见 S_Parallax_Relief.shader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;BRJH/MetallicWorkflow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _DiffuseTint (&quot;Diffuse Tint&quot;, color) = (1, 1, 1, 1)</span><br><span class="line">        _Metallic (&quot;Metallic&quot;, Range(0, 1)) = 0.5</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(1, 255)) = 20</span><br><span class="line">        _NormalMap (&quot;Normal&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _NormalScale (&quot;Normal Scale&quot;, Range(0, 5)) = 1</span><br><span class="line">        _HeightMap (&quot;Height Map&quot;, 2D) = &quot;black&quot; &#123;&#125;</span><br><span class="line">        _HeightScale (&quot;Height Scale&quot;, Range(0, 0.3)) = 0.2</span><br><span class="line">        _CubeMap (&quot;Cube Map&quot;, Cube) = &quot;_skybox&quot; &#123;&#125;</span><br><span class="line">        _EnvIntensity (&quot;Envirment Intensity&quot;, Range(0, 5)) = 1</span><br><span class="line">        [KeywordEnum(Default, POM)] _PARALLAX_MAPPING(&quot;Parallax Mapping Type&quot;, Float) = 0</span><br><span class="line">        [KeywordEnum(T, F, C)] _USING_IBL(&quot;If use IBL&quot;, Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">             &quot;LightMode&quot;=&quot;ForwardBase&quot; &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            // make fog work</span><br><span class="line">            #pragma multi_compile_fog</span><br><span class="line">            #pragma multi_compile _USING_IBL_T _USING_IBL_F</span><br><span class="line">            #pragma multi_compile _PARALLAX_MAPPING_Default _PARALLAX_MAPPING_POM </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            #include &quot;UnityPBSLighting.cginc&quot;</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            #define MAX_LAYER_NUM 20</span><br><span class="line">            #define MIN_LAYER_NUM 20</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _MainTex_ST;</span><br><span class="line">            sampler2D _NormalMap;</span><br><span class="line">            fixed4 _NormalMap_ST;</span><br><span class="line">            sampler2D _HeightMap;</span><br><span class="line">            samplerCUBE _CubeMap;</span><br><span class="line">            fixed4 _DiffuseTint;</span><br><span class="line">            half _Metallic;</span><br><span class="line">            fixed _Gloss;</span><br><span class="line">            fixed _NormalScale;</span><br><span class="line">            fixed _HeightScale;</span><br><span class="line">            fixed _EnvIntensity;</span><br><span class="line"></span><br><span class="line">            struct a2v &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 TangentLightDir : TEXCOORD0;</span><br><span class="line">                float3 TangentViewDir : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                #if defined(_USING_IBL_T)</span><br><span class="line">                    float4 TtoW0 : TEXCOORD4;</span><br><span class="line">                    float4 TtoW1 : TEXCOORD5;</span><br><span class="line">                    float4 TtoW2 : TEXCOORD6;</span><br><span class="line">                #endif</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            float3 ACESToneMapping(float3 color, float adapted_lum) &#123;</span><br><span class="line">                const float A = 2.51f;</span><br><span class="line">                const float B = 0.03f;</span><br><span class="line">                const float C = 2.43f;</span><br><span class="line">                const float D = 0.59f;</span><br><span class="line">                const float E = 0.14f;</span><br><span class="line"></span><br><span class="line">                color *= adapted_lum;</span><br><span class="line">                return (color * (A * color + B)) / (color * (C * color + D) + E);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 浮雕映射</span><br><span class="line">            float2 ReliefMapping(float2 uv, half3 TangentViewDir) &#123;</span><br><span class="line">                float NumLayer = 40;//lerp(MIN_LAYER_NUM, MAX_LAYER_NUM, abs(dot(Normal, TangentViewDir)));</span><br><span class="line">                float2 dtex = _HeightScale * TangentViewDir.xy / TangentViewDir.z / NumLayer;</span><br><span class="line">                float2 addUV = float2(0, 0);</span><br><span class="line">                float2 currentUV = uv + addUV;</span><br><span class="line">                float currentLayerHeight = 0;</span><br><span class="line">                float currentHeightMapValue = tex2D(_HeightMap, currentUV + addUV).r;</span><br><span class="line">                </span><br><span class="line">                for (int n = 0; n &lt; NumLayer; n++) &#123;</span><br><span class="line">                    currentLayerHeight += 1.0/NumLayer;</span><br><span class="line">                    currentUV += dtex;</span><br><span class="line">                    currentHeightMapValue = tex2D(_HeightMap, currentUV).r;</span><br><span class="line">                    if (currentHeightMapValue &lt; currentLayerHeight) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                float2 T0 = currentUV, T1 = currentUV - dtex;</span><br><span class="line">                for (int j = 0; j&lt;20 ;j++) &#123;</span><br><span class="line">                    float2 P0 = (T0+T1)/2;</span><br><span class="line">                    float P0_HeightMapValue = tex2D(_HeightMap, P0).r;</span><br><span class="line">                    float P0_LayerHeight = length(P0) / length(dtex*NumLayer);</span><br><span class="line">                    if (P0_HeightMapValue &lt; P0_LayerHeight) &#123;</span><br><span class="line">                        T1 = P0;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        T0 = P0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return (T0 + T1) / 2 - uv;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v) &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">                o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line"></span><br><span class="line">                TANGENT_SPACE_ROTATION;</span><br><span class="line"></span><br><span class="line">                o.TangentLightDir = mul(rotation, ObjSpaceLightDir(v.vertex)).xyz;</span><br><span class="line">                o.TangentViewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                #if defined(_USING_IBL_T)</span><br><span class="line">                    float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                    float3 worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                    float3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);</span><br><span class="line">                    float3 worldBinormal = cross(worldNormal, worldTangent) * v.tangent.w;</span><br><span class="line"></span><br><span class="line">                    o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);</span><br><span class="line">                    o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);</span><br><span class="line">                    o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);</span><br><span class="line">                #endif</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET &#123;</span><br><span class="line">                //Base</span><br><span class="line">                fixed3 TangentLightDir = normalize(i.TangentLightDir);</span><br><span class="line">                fixed3 TangentViewDir = normalize(i.TangentViewDir);</span><br><span class="line">                fixed3 HalfDir = normalize(TangentLightDir + TangentViewDir);</span><br><span class="line"></span><br><span class="line">                float Height = tex2D(_HeightMap, i.uv).x;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                fixed4 packedNormal = (1-tex2D(_NormalMap, i.uv));</span><br><span class="line">                fixed3 Normal = UnpackNormal(packedNormal);</span><br><span class="line">                #if defined(_PARALLAX_MAPPING_Default)  // 视察贴图</span><br><span class="line">                    float2 offsetUV = TangentViewDir.xy / TangentViewDir.z * Height * _HeightScale;</span><br><span class="line">                    i.uv += offsetUV;</span><br><span class="line">                #elif defined(_PARALLAX_MAPPING_POM)    // 浮雕贴图</span><br><span class="line">                    // float NumLayer = 20;//lerp(MIN_LAYER_NUM, MAX_LAYER_NUM, abs(dot(Normal, TangentViewDir)));</span><br><span class="line">                    // float2 dtex = _HeightScale * TangentViewDir.xy / TangentViewDir.z / NumLayer;</span><br><span class="line">                    // float currentLayerHeight = 0;</span><br><span class="line">                    </span><br><span class="line">                    // for (int n = 0; n &lt; NumLayer; n++) &#123;</span><br><span class="line">                    //     currentLayerHeight += 1.0/NumLayer;</span><br><span class="line">                    //     i.uv += dtex;</span><br><span class="line">                    //     if (Height &gt; currentLayerHeight) &#123;</span><br><span class="line">                    //         Height = tex2D(_HeightMap, i.uv).r;</span><br><span class="line">                    //     &#125;</span><br><span class="line">                    //     else &#123;</span><br><span class="line">                    //         Height = (Height + tex2D(_HeightMap, i.uv).r)/2;</span><br><span class="line">                    //         break;</span><br><span class="line">                    //     &#125;</span><br><span class="line">                    // &#125;</span><br><span class="line">                    i.uv += ReliefMapping(i.uv, TangentViewDir);</span><br><span class="line">                    Height = tex2D(_HeightMap, i.uv).x;</span><br><span class="line">                #endif</span><br><span class="line">                fixed3 albedo = tex2D(_MainTex, i.uv) * _DiffuseTint.rgb;</span><br><span class="line">                fixed3 SpecularTint;</span><br><span class="line">                fixed OneMinusReflectivity;</span><br><span class="line">                albedo = DiffuseAndSpecularFromMetallic(albedo, _Metallic, SpecularTint, OneMinusReflectivity);</span><br><span class="line"></span><br><span class="line">                packedNormal = tex2D(_NormalMap, i.uv);</span><br><span class="line">                Normal = UnpackNormal(packedNormal);</span><br><span class="line"></span><br><span class="line">                // 通过高度计算IBL方向</span><br><span class="line">                </span><br><span class="line">                #if defined(_USING_IBL_T)</span><br><span class="line">                    float3 worldPos = float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);</span><br><span class="line">                    float3 worldNormal = normalize(float3(i.TtoW0.z, i.TtoW1.z, i.TtoW2.z));</span><br><span class="line">                    float3 worldPosUndata = worldPos - worldNormal*Height*_HeightScale;</span><br><span class="line">                    float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPosUndata));</span><br><span class="line"></span><br><span class="line">                    float NormalRef = normalize(cross(ddy(worldPosUndata), ddx(worldPosUndata)));  // 通过高度贴图计算法线方向;</span><br><span class="line">                    fixed3 worldRef = reflect(-worldViewDir, NormalRef);</span><br><span class="line">                    // fixed3 WorldRef = normalize(fixed3(dot(i.TtoW0.xyz, TangentRef), </span><br><span class="line">                    //                                     dot(i.TtoW1.xyz, TangentRef), </span><br><span class="line">                    //                                     dot(i.TtoW2.xyz, TangentRef)));</span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line">                    fixed3 Reflection = ACESToneMapping(texCUBElod(_CubeMap, float4(worldRef, (255-_Gloss)*8/255)).rgb, 1) * SpecularTint * _EnvIntensity;</span><br><span class="line">                #endif</span><br><span class="line">                </span><br><span class="line">                Normal.xy *= _NormalScale;</span><br><span class="line">                Normal.z = sqrt(1.0 - saturate(dot(Normal.xy, Normal.xy)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                fixed3 Ambient = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 Diffuse = lerp(Ambient, _LightColor0.rgb * albedo, saturate(dot(Normal, TangentLightDir)));</span><br><span class="line"></span><br><span class="line">                fixed3 Specular = _LightColor0.rgb * SpecularTint * pow(saturate(dot(HalfDir, Normal)), _Gloss);</span><br><span class="line">                </span><br><span class="line">                #if defined(_USING_IBL_T)</span><br><span class="line">                    //Reflection.rgb = lerp(diffuse*Specular, )</span><br><span class="line">                    fixed4 color = fixed4(Ambient+Diffuse+Specular+Reflection, 1);</span><br><span class="line">                #elif defined(_USING_IBL_F)</span><br><span class="line">                    fixed4 color = fixed4(Ambient+Diffuse+Specular, 1);</span><br><span class="line">                #endif</span><br><span class="line">                </span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>在使用浮雕/视差贴图时，使用IBL；<ul>
<li>需要用Offset后的高度图和世界空间坐标得到更新后的世界坐标，再通过ddx，ddy叉乘获得世界法线，进一步进行CubeMap的采样；</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.5_Bump%20Mapping/Homework.png" alt="Homework"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>Bump Mapping</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.4 传统经验光照模型</title>
    <url>/2023/02/15/HPP_Graphics_2.4_%E4%BC%A0%E7%BB%9F%E7%BB%8F%E9%AA%8C%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="图形2-4-传统经验光照模型"><a href="#图形2-4-传统经验光照模型" class="headerlink" title="图形2.4 传统经验光照模型"></a>图形2.4 传统经验光照模型</h1><ul>
<li><p>Lambert</p>
</li>
<li><p>Phong</p>
</li>
<li><p>Blinn-Phong</p>
<ul>
<li><p>Blinn-Phong对比Phong的优点：</p>
<ol>
<li><p>halfDir好计算</p>
</li>
<li><p>半角向量和法线点乘不会截断（saturate），即夹角总小于90°，不会断层</p>
<p><img src="/2023/02/15/HPP_Graphics_2.4_%E4%BC%A0%E7%BB%9F%E7%BB%8F%E9%AA%8C%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/Blinn-Phong Half.png" alt="Blinn-Phong Half"></p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Cubemap：texCubelod</p>
</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>HLSL</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.3 HLSL常用函数介绍</title>
    <url>/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="a-HLSL常用函数分类"><a href="#a-HLSL常用函数分类" class="headerlink" title="a). HLSL常用函数分类"></a>a). HLSL常用函数分类</h2><p><a href="https://blog.csdn.net/eloudy/article/details/71258367">https://blog.csdn.net/eloudy/article/details/71258367</a></p>
<ul>
<li>基本数学运算</li>
<li>幂指对函数</li>
<li>数据范围类</li>
<li>类型判断类</li>
<li>三角函数与双曲线函数</li>
<li>向量与矩阵类</li>
<li>光线运算类</li>
<li>1D纹理查找</li>
<li>2D纹理查找</li>
<li>立体纹理查找</li>
</ul>
<span id="more"></span>
<h2 id="b-具体内容"><a href="#b-具体内容" class="headerlink" title="b). 具体内容"></a>b). 具体内容</h2><p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_基本数学运算.png" alt="函数_基本数学运算"></p>
<ul>
<li><strong><font color="red">勘误：radians(x)</font></strong></li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_幂指对函数.png" alt="函数_幂指对函数"></p>
<ul>
<li><a href="https://www.runoob.com/cprogramming/c-function-frexp.html">frexp(x, out exp)</a></li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_三角函数与双曲线函数.png" alt="函数_三角函数与双曲线函数"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_数据范围类.png" alt="函数_数据范围类"></p>
<ul>
<li>smoothstep会比lerp更加平滑，如混合颜色时</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_类型判断类.png" alt="函数_类型判断类"></p>
<ul>
<li>any(x) 指定量的所有分量中如出现true（非零），则返回true，否则返回false；</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_向量与矩阵类.png" alt="函数_向量与矩阵类"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/函数_光线运算类.png" alt="函数_光线运算类"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/2D纹理.png" alt="2D纹理"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/3D纹理.png" alt="3D纹理"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.3_HLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/CubeMap.png" alt="CubeMap"></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>HLSL</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_2.2 模型与材质</title>
    <url>/2023/02/15/HPP_Graphics_2.2%20%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9D%90%E8%B4%A8/</url>
    <content><![CDATA[<h2 id="a-渲染管线与模型基础"><a href="#a-渲染管线与模型基础" class="headerlink" title="a). 渲染管线与模型基础"></a>a). 渲染管线与模型基础</h2><p><strong>1.图形渲染管线</strong><br><img src="https://img-blog.csdnimg.cn/20210412151638172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一如既往熟悉的渲染管线，蓝色背景的都是可编程的，稍微复习下：</p>
<ul>
<li>顶点着色器：将顶点坐标从模型空间转换到齐次裁剪空间，我们可以通过在顶点着色器中改变顶点位置实现动画；（可参考实战篇中的幽灵小人） ；</li>
<li>片段着色器：将光栅化阶段所插值的模型信息进行计算，可以进行一些光照计算；</li>
</ul>
<p><strong>2.模型的实现原理</strong></p>
<p>先是点，点连成线，线构成面，最后组合成多边形模型。</p>
<p><img src="https://img-blog.csdnimg.cn/20210412153049988.gif" alt="在这里插入图片描述"><br><strong>3.UV</strong><br><img src="https://img-blog.csdnimg.cn/202104121546398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在建模过程中，有一部非常重要的操作，就是展UV，那么UV是个啥？</p>
<ul>
<li>通俗地理解，展UV可以理解为将原本是三维的模型给全部剪开成面，平铺好的所有面放在一个以U轴（横向）和V轴（纵向）为坐标轴的正方形里就是UV，UV上的点和三维模型上的点一一对应，其位置就是顶点的纹理坐标。比如小学美术课用卡纸做骰子，将其拆开可以直接拆成六个面，这个过程就叫展UV。当在这个面上绘制数字时，对应的最后做好的骰子也会有所显示，这一步就是在UV上绘制贴图。</li>
<li>UV展好的话，其表现平整干净，就像是直接从模型上扒下来的纸张，展不好的话，其效果表现就是扒下来的纸张像是叠了好几次，皱皱巴巴的。</li>
<li>在片段着色器阶段，利用纹理坐标可以获取贴图所存储的信息。</li>
<li>展开好后的UV，一般利用Substance Painter(简称SP，次时代建模流程必备工具)，BodyPainter（老一代的绘制贴图工具），Photoshop(PS绘图没啥好说的，SAI估计也行和PS同理)；</li>
<li>绘制贴图不仅仅只输出一个简单的颜色贴图，根据项目需求还需要法线贴图，金属度贴图，AO贴图等。各种贴图存储的信息不同，所占据的通道有多有少。<br>所以我们还可以将一些通道不够占满RGBA的贴图进行整合，放在一张贴图里的不同通道，达到采样一次，获取多个信息的目的，可以有效提高性能。常见的如将没有透明度，仅存储RGB的颜色贴图与AO贴图压在一张图，AO贴图放在A通道。<br>缺点是不同通道直接还是可能会有相互影响，但是不明显，按需取舍。</li>
</ul>
<span id="more"></span>
<p><strong>4.模型包含的信息（OBJ为例）</strong></p>
<p>包含顶点位置信息（v开头），纹理坐标（vt开头），法线信息（vn开头），还有片元材质信息（最后f开头）可参考下面；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This file uses centimeters as units for non-parametric coordinates.</span><br><span class="line"></span><br><span class="line">mtllib 2.mtl</span><br><span class="line">g default</span><br><span class="line">v -0.500000 -0.500000 0.500000</span><br><span class="line">v 0.500000 -0.500000 0.500000</span><br><span class="line">v -0.500000 0.500000 0.500000</span><br><span class="line">v 0.500000 0.500000 0.500000</span><br><span class="line">v -0.500000 0.500000 -0.500000</span><br><span class="line">v 0.500000 0.500000 -0.500000</span><br><span class="line">v -0.500000 -0.500000 -0.500000</span><br><span class="line">v 0.500000 -0.500000 -0.500000</span><br><span class="line">vt 0.375000 0.000000</span><br><span class="line">vt 0.625000 0.000000</span><br><span class="line">vt 0.375000 0.250000</span><br><span class="line">vt 0.625000 0.250000</span><br><span class="line">vt 0.375000 0.500000</span><br><span class="line">vt 0.625000 0.500000</span><br><span class="line">vt 0.375000 0.750000</span><br><span class="line">vt 0.625000 0.750000</span><br><span class="line">vt 0.375000 1.000000</span><br><span class="line">vt 0.625000 1.000000</span><br><span class="line">vt 0.875000 0.000000</span><br><span class="line">vt 0.875000 0.250000</span><br><span class="line">vt 0.125000 0.000000</span><br><span class="line">vt 0.125000 0.250000</span><br><span class="line">vn 0.000000 0.000000 1.000000</span><br><span class="line">vn 0.000000 0.000000 1.000000</span><br><span class="line">vn 0.000000 0.000000 1.000000</span><br><span class="line">vn 0.000000 0.000000 1.000000</span><br><span class="line">vn 0.000000 1.000000 0.000000</span><br><span class="line">vn 0.000000 1.000000 0.000000</span><br><span class="line">vn 0.000000 1.000000 0.000000</span><br><span class="line">vn 0.000000 1.000000 0.000000</span><br><span class="line">vn 0.000000 0.000000 -1.000000</span><br><span class="line">vn 0.000000 0.000000 -1.000000</span><br><span class="line">vn 0.000000 0.000000 -1.000000</span><br><span class="line">vn 0.000000 0.000000 -1.000000</span><br><span class="line">vn 0.000000 -1.000000 0.000000</span><br><span class="line">vn 0.000000 -1.000000 0.000000</span><br><span class="line">vn 0.000000 -1.000000 0.000000</span><br><span class="line">vn 0.000000 -1.000000 0.000000</span><br><span class="line">vn 1.000000 0.000000 0.000000</span><br><span class="line">vn 1.000000 0.000000 0.000000</span><br><span class="line">vn 1.000000 0.000000 0.000000</span><br><span class="line">vn 1.000000 0.000000 0.000000</span><br><span class="line">vn -1.000000 0.000000 0.000000</span><br><span class="line">vn -1.000000 0.000000 0.000000</span><br><span class="line">vn -1.000000 0.000000 0.000000</span><br><span class="line">vn -1.000000 0.000000 0.000000</span><br><span class="line">s off</span><br><span class="line">g pCube1</span><br><span class="line">usemtl initialShadingGroup</span><br><span class="line">f 1/1/1 2/2/2 4/4/3 3/3/4</span><br><span class="line">f 3/3/5 4/4/6 6/6/7 5/5/8</span><br><span class="line">f 5/5/9 6/6/10 8/8/11 7/7/12</span><br><span class="line">f 7/7/13 8/8/14 2/10/15 1/9/16</span><br><span class="line">f 2/2/17 8/11/18 6/12/19 4/4/20</span><br><span class="line">f 7/13/21 1/1/22 3/3/23 5/14/24</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关于视频中讲到OBJ文件中存储顶点颜色的信息，我个人在用MAYA绘制顶点色后输出查看是不存在的。FBX是可以的，这一点在实践篇中也是有用到。</p>
<p><strong>5.OBJ与FBX格式</strong><br><img src="https://img-blog.csdnimg.cn/20210412164100134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="b-材质基础"><a href="#b-材质基础" class="headerlink" title="b). 材质基础"></a>b). 材质基础</h2><p>在上一篇光的那里讲过，人眼看见的物体颜色是光经过反射或折射后的。现实中，看不同的物体有不同的感觉，其材质的表现也和光密切相关。</p>
<p><strong>1.漫反射</strong><br>最容易也是较基础的。常用的漫反射模型是兰伯特（Lambertian），它简单粗暴地认为光线均匀反射出去。<br>兰伯特是基于法线向量与指向光源的向量点积结果。在向量基础里我们就简单的介绍过兰伯特模型的点积结果与颜色关系。<br><img src="https://img-blog.csdnimg.cn/20210412165101471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.镜面反射</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210412172100173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>光滑镜面反射。镜面反射就是将入射光线根据表面法线进行反射，并且只有在反射方向有能量，其他方向能量均为0。常用的镜面反射模型有Phong和Blinn-Phong。下面两张ShaderForge节点图中，上面的是Phong，下面是Blinn-Phong。<br><img src="https://img-blog.csdnimg.cn/20210412170941548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210412171006177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>3.折射</strong><br><img src="https://img-blog.csdnimg.cn/2021041217250899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>提及折射一般想起的肯定是水面了，一部分光反射出去，另一部分则发生折射。反射和折射分别占多少占比可根据菲涅尔定律决定。<br>关于菲涅尔在实践篇中也做过简单的运用，多是把它作为边缘光来使用。</p>
<p><strong>4.粗糙镜面反射</strong><br><img src="https://img-blog.csdnimg.cn/2021041217281017.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>法线偏移较小，反射集中在一个区域，有磨砂感。<br>关于这个在实践篇中倒是未曾涉猎。为了表现磨砂感，一般用CubeMap调整Mip去处理。</p>
<p><strong>5.粗糙镜面折射</strong><br><img src="https://img-blog.csdnimg.cn/20210412173730174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>与粗糙镜面反射类似，不过比起粗糙镜面反射，粗糙镜面折射中有一部分光可以透过去发生折射。</p>
<p><strong>6.多层材质</strong><br><img src="https://img-blog.csdnimg.cn/20210412174322329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">涂漆的地板上有木纹，有漆面的质感。<br><strong>7.次表面散射</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210412174656156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">如皮肤，牛奶，玉石等，玉石的制作在实践篇中以调子映射制作，皮肤则是用Lut图。</p>
<p><strong>8.关于皮肤</strong><br><img src="https://img-blog.csdnimg.cn/2021041217525293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>皮肤可以看成三层：油脂，表皮，真皮。油脂层直接把光反射出去，所以皮肤上才出现高光，未被反射的光通过折射进入子表面层，进入该层后，部分被吸收和散射，再从皮肤中入射点附近出射点射出从而形成次表面散射效果。参考上图。</p>
<p><strong>9.改变材质表面</strong><br>现实中不存在绝对光滑的表面，且一个模型顶点所带法线有限。而漫反射，镜面反射，折射都有法线参与。改变法线就可以影响光照计算结果。在卡通渲染中，我们可以利用修改法线的方式，对效果进行一定的优化。如《火影忍者：究极风暴》中先膨胀法线，然后计算光照后再用到原模型上，降低三维感。<br><img src="https://img-blog.csdnimg.cn/20210412175944301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>顺带模型和材质都会影响画面是否好看，模型做得好用zbrush直接雕刻一个人像，就可以表现皮肤的皱纹，模型做不好，就算是再好的贴图和渲染方案也拯救不了。</p>
<h2 id="c-模型数据解析"><a href="#c-模型数据解析" class="headerlink" title="c). 模型数据解析"></a>c). 模型数据解析</h2><p><strong>1.模型数据在渲染中的作用</strong></p>
<p>可以用于顶点动画，纹理动画，顶点色，这三点在实践篇中的赛博朋克特效小人里都有所涉及。</p>
<p><strong>2.纹理动画</strong><br>包括UV扰动，UV流动，序列帧播放其实也可以算在UV流动里，个人感觉它是特意规定特殊流动方向的UV流动。</p>
<p>下图的gif里就包括UV扰动，对水面下的纹理进行干扰变换，UV流动，自左往右。<br><img src="https://img-blog.csdnimg.cn/20210412180941887.gif" alt="在这里插入图片描述"><br>关于这俩的实现，都是对UV坐标进行改变进而干涉采样结果。其中UV扰动中还利用GrabPass去获取背后的物体，将其渲染成一张纹理再进行干扰。视频中还使用了法线贴图。</p>
<p>原理1通过对法线改变，从而导致左上角中纹理采样进行改变。</p>
<p><img src="https://img-blog.csdnimg.cn/20210412181830485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原理2就是之前讲的通过改变UV坐标实现动画<br><img src="https://img-blog.csdnimg.cn/20210412181844747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>3.顶点动画</strong></p>
<ul>
<li>通过在顶点着色器中对模型顶点操作，进而产生动画。</li>
<li>顶点着色器计算的是每一个顶点，各点数据不同，进而同一个公司在不同顶点有不同效果。</li>
<li>K帧也可以看做是一种顶点动画，比如在某轴上平移就是对所有顶点数据的某个轴上加上一个值。</li>
<li>顶点动画想要做好看，请尽可能多加顶点，如果顶点不够，其表现就不会如下图这般丝滑，且会效果不明显。<br><img src="https://img-blog.csdnimg.cn/20210401211428481.gif" alt="在这里插入图片描述"><br><strong>4.顶点色</strong><br>我们可以利用绘制顶点色的做法，从而达到类似遮罩的效果。<br>在MAYA中绘制顶点色时可以明显看到是三角面。因为在渲染或导入游戏引擎时，四边面被转成了三角形进行计算。三角形内像素点的色彩会在光栅化时进行插值混合。<br><img src="https://img-blog.csdnimg.cn/20210412182836391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">插值原理：根据重心坐标进行计算。<br><img src="https://img-blog.csdnimg.cn/20210412183129313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">例子<br><img src="https://img-blog.csdnimg.cn/20210412183314680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>5.顶点法线和面法线</strong></li>
</ul>
<p>面法线其实还是顶点法线不过是存储方式不同罢了。<br><img src="https://img-blog.csdnimg.cn/20210412183354402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2021041218343677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">当前像素点的法线是通过周围顶点法线插值获得的，而从下图中可以明显看到面法线与顶点法线因为方向不同，插值结果也不同。其中面法线三个点共用一个法线。</p>
<p><img src="https://img-blog.csdnimg.cn/20210412183709474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjEwMzM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>面法线有多少面存储多少法线，顶点法线则是有多少顶点存多少法线。<br>在卡渲中，描边时，通常使用罪恶装备的Backfacing外扩边描线法。也就是在顶点着色器中将法线方向偏移。该方法在处理硬表面时会出现断裂的情况。这是因为没有对法线进行平滑，导致法线不连续，进而描边不连续。</p>
<h2 id="d-顶点色作用、光滑组对法线的影响"><a href="#d-顶点色作用、光滑组对法线的影响" class="headerlink" title="d). 顶点色作用、光滑组对法线的影响"></a>d). 顶点色作用、光滑组对法线的影响</h2><p><a href="https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/fxvhxl#b4lco">https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/fxvhxl#b4lco</a></p>
<p>光滑组的本质是<strong>改变点法线</strong>，进而影响面法线，进而影响三角线遍历中Normal的插值；</p>
<p><img src="/2023/02/15/HPP_Graphics_2.2%20%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9D%90%E8%B4%A8/Hard_VertexNormal.png" alt="Hard_VertexNormal" style="zoom:25%;"></p>
<p><img src="/2023/02/15/HPP_Graphics_2.2%20%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9D%90%E8%B4%A8/Soft_VertexNormal.png" alt="Soft_VertexNormal" style="zoom: 25%;"></p>
<h2 id="e-法线烘焙原理"><a href="#e-法线烘焙原理" class="headerlink" title="e). 法线烘焙原理"></a>e). 法线烘焙原理</h2><p>烘焙低模时，在切线空间计算低模与高模的法线差异。即低模切线空间中，高模对应位置法线的方向。烘焙为贴图。</p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>材质</tag>
        <tag>模型</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_1.3 纹理的秘密</title>
    <url>/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/</url>
    <content><![CDATA[<h2 id="a-什么是纹理"><a href="#a-什么是纹理" class="headerlink" title="a). 什么是纹理"></a>a). 什么是纹理</h2><p>一种可供着色器读写的结构化存储形式（采样器变量的形式，sampler）</p>
<h2 id="b-纹理管线"><a href="#b-纹理管线" class="headerlink" title="b). 纹理管线"></a>b). 纹理管线</h2><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/纹理管线.png" alt="纹理管线"></p>
<p><strong>模型空间位置</strong>→<strong>投影函数</strong>（不同与摄像机投影矩阵，是展UV其中一步）→<strong>纹理映射</strong>→<strong>纹理坐标</strong>→<strong>通讯函数</strong>→<strong>新纹理坐标</strong>→<strong>纹理采样</strong>（避免<strong>依赖纹理读取</strong>，如果片元着色器中不是使用顶点着色器中传递的数值，而是经过计算，那么就会产生依赖纹理读取，影响性能。<strong>因此，uv的偏移通常在顶点着色器中完成</strong>）→<strong>纹理值</strong></p>
<p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/纹理管线eg.png" alt="纹理管线eg"></p>
<h2 id="c-Wrap-Mode"><a href="#c-Wrap-Mode" class="headerlink" title="c). Wrap Mode"></a>c). Wrap Mode</h2><ul>
<li><strong>简介：</strong><ul>
<li>决定uv[0, 1]以外的表现</li>
<li>OpenGL —— 包装模式（Wrapping Mode）</li>
<li>DirectX —— 纹理寻址模式（Texture Addressing Mode）</li>
</ul>
</li>
<li><strong>类型：</strong><ul>
<li>Repeat</li>
<li>Mirror</li>
<li>Clamp</li>
<li>Border</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/Warp Mode.png" alt="Warp Mode"></p>
<h2 id="d-Filter-Mode"><a href="#d-Filter-Mode" class="headerlink" title="d). Filter Mode"></a>d). Filter Mode</h2><ul>
<li>在不同形状、大小、缩放比时，纹理过滤模式，可由专用硬件实现，也可由软件中实现，也可软硬件搭配完成</li>
</ul>
<h3 id="d-1-放大（Magnification）"><a href="#d-1-放大（Magnification）" class="headerlink" title="d.1) 放大（Magnification）"></a>d.1) 放大（Magnification）</h3><ul>
<li><strong>最近邻</strong>（性能消耗小，放大时每个像素读取最邻近的纹素，可能出现马赛克像素风格）</li>
<li><strong>双线性插值</strong>——对于每一个像素点都寻找邻近的四个像素点（实际），在二维空间进行的线性插值得到的最终混合值<ul>
<li>双线型内插值算法就是一种比较好的图像缩放算法，它充分的利用了<strong>源图</strong>中<strong>虚拟点</strong>四周的<strong>四个真实存在的像素值</strong>来共同决定目标图中的一个像素值，因此缩放效果比简单的最邻近插值要好很多</li>
<li><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/双线性插值.png" alt="双线性插值"></li>
<li>$P(u,v)$是屏幕空间的坐标，屏幕空间左下角为$(0, 0)$，而左下角第一个像素的像素中心坐标为$(0.5, 0.5)$</li>
<li><a href="http://www.realtimerendering.com/blog/the-center-of-the-pixel-is-0-50-5/">The Center of the Pixel is (0.5,0.5)</a></li>
</ul>
</li>
<li><strong>立方卷积插值</strong><ul>
<li><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/立方卷积插值.png" alt="立方卷积插值"></li>
</ul>
</li>
<li><strong>兰索斯插值</strong>（不常见，性能开销大）</li>
<li><strong>Quilez 的光滑曲线插值</strong> —— 在立方卷积插值与双线性插值的一个折中效果，画面表现效果要比双线性插值好，比立方卷积插值差<ul>
<li><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/光滑曲线插值.png" alt="光滑曲线插值"></li>
<li><strong>在纹理坐标带入到双线性插值过程之前再额外进行了一步处理</strong></li>
<li><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/光滑曲线插值eg.png" alt="光滑曲线插值eg"></li>
</ul>
</li>
<li><strong>效果对比：</strong><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/效果对比.png" alt="效果对比"></li>
</ul>
<h3 id="d-2-缩小"><a href="#d-2-缩小" class="headerlink" title="d.2) 缩小"></a>d.2) 缩小</h3><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/FilterMode缩小.png" alt="FilterMode缩小"></p>
<ul>
<li><p><strong>可能出现的问题：</strong>出现颜色丢失与闪烁（奈奎斯特定律）</p>
</li>
<li><p><strong>解决方式：</strong></p>
<ol>
<li>最邻近、双线性插值（有限地增加采样频率）</li>
<li>Mipmap（减小纹理频率）</li>
</ol>
</li>
</ul>
<span id="more"></span>
<h2 id="e-Mipmap"><a href="#e-Mipmap" class="headerlink" title="e). Mipmap"></a>e). Mipmap</h2><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/mipmap.png" alt="mipmap"></p>
<ul>
<li><strong>特点：</strong>每一级纹理的大小都是上一级的1/4,因此整套纹理只比原来的单张多占1/3内存（等比数列）</li>
</ul>
<h3 id="e-1-ddx、ddy-片元着色器指令，注意是在片元着色器中的！"><a href="#e-1-ddx、ddy-片元着色器指令，注意是在片元着色器中的！" class="headerlink" title="e.1) ddx、ddy(片元着色器指令，注意是在片元着色器中的！)"></a>e.1) ddx、ddy(片元着色器指令，注意是在片元着色器中的！)</h3><ul>
<li><p>GPU并不是一个个Pixel执行的，而是分成2*2的组，分块并行执行</p>
<ul>
<li><a href="http://www.aclockworkberry.com/shader-derivative-functions/#footnote_3_1104">通过ddx、ddy可对各种数据（uv、normal……）求偏导</a></li>
</ul>
</li>
<li><p>ddx、ddy是x、y方向上的偏导数，通过ddx、ddy可对各种数据（uv、normal……）求偏导，可用于</p>
<ul>
<li>mipmap：通过ddx、ddy求uv的偏导，得到的<strong>最长边</strong>用于确定mipmap的level</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/mipmap_level.png" alt="mipmap_level"></p>
<ul>
<li>可求法线</li>
</ul>
</li>
<li><p>三线性插值（待看）</p>
</li>
<li><strong>特点：</strong>mipmap内存大<strong>1/3</strong>，但带宽压力变小（有时候只用传输小的贴图就行）</li>
<li><strong>缺点：</strong>假设各向同性，但当缩放不一致（倾斜角过大）时可能模糊</li>
<li><strong>解决方式：</strong>各向异性过滤（Anisotropic Filtering）</li>
</ul>
<h2 id="f-各向异性过滤（Anisotropic-Filtering）"><a href="#f-各向异性过滤（Anisotropic-Filtering）" class="headerlink" title="f). 各向异性过滤（Anisotropic Filtering）"></a>f). 各向异性过滤（Anisotropic Filtering）</h2><ul>
<li><p><strong>作用：</strong>减少模糊，保护在极端观察角度下的细节</p>
</li>
<li><p>当纹理在x坐标方向和在y坐标方向缩放的比例不一样，纹理的缩放是<strong>各异向</strong>的，Pmax/Pmin代表了各异向的程度。举个例子来说，64 x 64的纹理贴到一个开始平行于xy平面的正方形上，但是正方形绕y轴旋转60度，最后投影到屏幕上占了16 x 32的象素矩阵。纹理在x坐标方向上缩放的比例因子为64/16等于4，在y坐标方向缩放的比例因子为64/32等于2，Pmax等于4，Pmin等于2。缩放的<strong>各异向程度</strong>为2。(<a href="https://blog.csdn.net/u013467442/article/details/44466069">https://blog.csdn.net/u013467442/article/details/44466069</a>)</p>
</li>
<li>各向异性过滤是一系列过滤方法，是<strong>搭配其他过滤方式一起使用的</strong>，常见的方法有<strong>Ripmap</strong>、<strong>积分图（SAT, Summed-Area Table）</strong>、<strong>重用mipmap</strong>等</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/各向异性过滤.png" alt="各向异性过滤"></p>
<h3 id="f-1-Ripmap"><a href="#f-1-Ripmap" class="headerlink" title="f.1) Ripmap"></a>f.1) Ripmap</h3><ul>
<li>做各种比例的预处理，<strong>部分解决</strong>问题</li>
<li>内存会大三倍</li>
</ul>
<h3 id="f-2-积分图（SAT-Summed-Area-Table）"><a href="#f-2-积分图（SAT-Summed-Area-Table）" class="headerlink" title="f.2) 积分图（SAT, Summed-Area Table）"></a>f.2) 积分图（SAT, Summed-Area Table）</h3><ul>
<li>每一位以更多位数储存，储存与左上纹素的总和（具体等看GAMES202补充）</li>
</ul>
<p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/SAT.png" alt="SAT"></p>
<ul>
<li>右边表格的数据怎么来的呢？就跟图上上面的公式是一样的 比如2行2列的8 就是 2 + 3 + 3 + 0 再比如一行四列的8 就是 2 + 3 + 2 + 1以此类推</li>
</ul>
<h3 id="f-3-重用Mipmap"><a href="#f-3-重用Mipmap" class="headerlink" title="f.3) 重用Mipmap"></a>f.3) 重用Mipmap</h3><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/重用mipmap.png" alt="重用mipmap"></p>
<ul>
<li>不是用ripmap，而是重用mipmap，屏幕像素反向投影到纹理空间，通过纹理空间中长方形的最短边确定level。缩放的各异向程度后（看前面例子），创建各向异性线，穿过方块中心，根据程度，确定采样次数，并沿线段进行采样、混合</li>
<li>目前GPU一般支持16x的各向异性过滤</li>
<li>一般基于三线性过滤</li>
</ul>
<h2 id="g-CPU渲染优化常见方式"><a href="#g-CPU渲染优化常见方式" class="headerlink" title="g). CPU渲染优化常见方式"></a>g). CPU渲染优化常见方式</h2><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/CPU优化.png" alt="CPU优化"></p>
<ul>
<li>减少DrawCall<ul>
<li>纹理图集、纹理数组</li>
</ul>
</li>
</ul>
<h2 id="h-GPU渲染优化常见方式"><a href="#h-GPU渲染优化常见方式" class="headerlink" title="h). GPU渲染优化常见方式"></a>h). GPU渲染优化常见方式</h2><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/GPU优化.png" alt="GPU优化"></p>
<ul>
<li>降低显存带宽压力<ul>
<li>纹理压缩</li>
</ul>
</li>
</ul>
<h2 id="i-Other-texture"><a href="#i-Other-texture" class="headerlink" title="i). Other texture"></a>i). Other texture</h2><h3 id="i-1-Cubemap"><a href="#i-1-Cubemap" class="headerlink" title="i.1) Cubemap"></a>i.1) Cubemap</h3><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/Cubemap.png" alt="Cubemap"></p>
<ul>
<li>纹理左下角(0, 0)</li>
</ul>
<h3 id="i-2-Bump-Mapping"><a href="#i-2-Bump-Mapping" class="headerlink" title="i.2) Bump Mapping"></a>i.2) Bump Mapping</h3><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/bumpmapping.png" alt="bumpmapping"></p>
<h3 id="i-3-Displacement-Mapping"><a href="#i-3-Displacement-Mapping" class="headerlink" title="i.3) Displacement Mapping"></a>i.3) Displacement Mapping</h3><p><img src="/2023/02/15/HPP_Graphics_1.3%20%E7%BA%B9%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86/位移贴图.png" alt="位移贴图"></p>
<ul>
<li>搭配曲面细分着色器</li>
</ul>
<hr>
<p>【Work】</p>
<p>Filter Mode：</p>
<p>纹理优化方式及其原理：</p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>材质</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Art_3.1 动作理论基础</title>
    <url>/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="a-动画基础知识"><a href="#a-动画基础知识" class="headerlink" title="a). 动画基础知识"></a>a). 动画基础知识</h1><p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/动作01.png" alt="动作01"></p>
<ul>
<li><p><strong>蒙皮：</strong> 定义骨骼数据如何驱动顶点数据；</p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/Skinning.png" alt="Skinning"></p>
<ul>
<li>引擎内不支持双四元数蒙皮，那使用线性混合蒙皮如何改善关节形状：<ol>
<li>JCM(Maya中叫PSD)：性能开销相对大；</li>
<li>RBF：加几根辅助骨骼；</li>
</ol>
</li>
</ul>
</li>
</ul>
<h1 id="b-动画类型"><a href="#b-动画类型" class="headerlink" title="b). 动画类型"></a>b). 动画类型</h1><ul>
<li><p><strong>逐帧动画：</strong>sprite（精灵）动画</p>
</li>
<li><p><strong>骨骼动画：</strong>3D动画、spine动画（2D骨骼）</p>
</li>
<li><p><strong>顶点动画：</strong>物理模拟后的动画数据，不便于用骨骼驱动，如布料，流体、破碎等</p>
<ul>
<li><p><strong>VAT(Vertex Animation Texture)</strong></p>
<blockquote>
<p>VAT（Vertex Animation Texture）通常包括两张纹理：PositionTexture和RotationTexture。他们分别记录了一个Mesh在指定帧数下的位置、旋转变化。VAT的行坐标表示动画帧索引，列坐标表示对应顶点的位移数据。因此，VAT的高度一般对应整个动画的总帧数，而宽度对应着Mesh中根据Animation变化的顶点数。(<a href="https://zhuanlan.zhihu.com/p/585471941">https://zhuanlan.zhihu.com/p/585471941</a>)</p>
</blockquote>
</li>
<li><p>Shader顶点动画</p>
</li>
<li><p>离线顶点动画</p>
</li>
<li><p>…….</p>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="c-动画表现提升点"><a href="#c-动画表现提升点" class="headerlink" title="c). 动画表现提升点"></a>c). 动画表现提升点</h1><h2 id="c-1-IK-和-FK"><a href="#c-1-IK-和-FK" class="headerlink" title="c.1). IK 和 FK"></a>c.1). IK 和 FK</h2><p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/IK_FK.png" alt="IK_FK" style="zoom:50%;"></p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/IK.png" alt="IK" style="zoom:50%;"></p>
<h2 id="c-2-动画质量和流畅度"><a href="#c-2-动画质量和流畅度" class="headerlink" title="c.2). 动画质量和流畅度"></a>c.2). 动画质量和流畅度</h2><p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/动画质量和流畅度.png" alt="动画质量和流畅度"></p>
<ul>
<li>好的动画看起来流畅——<strong>符合运动规律</strong>，运动轨迹是<strong>弧线</strong></li>
</ul>
<h2 id="c-3-打击感"><a href="#c-3-打击感" class="headerlink" title="c.3). 打击感"></a>c.3). 打击感</h2><ol>
<li><p>合理的打击反馈，被打击方在受到攻击时一般会做出相应的受击反馈</p>
<ul>
<li>受击、击退、击飞、浮空等受击反馈，浮空怪物下落的加速度、被击飞呈抛物线飞出</li>
</ul>
</li>
<li><p>打击抽帧/顿帧</p>
<ul>
<li>抽帧：省略动作的中间过程；</li>
<li>顿帧：动作的停顿，画面震动；</li>
</ul>
</li>
<li><p>攻击节奏和按键反馈</p>
<ul>
<li>大技能—小技能—小技能—大技能切换，保持一定节奏的攻击方式</li>
</ul>
</li>
<li><p>硬直和打断</p>
</li>
</ol>
<h2 id="c-4-夸张"><a href="#c-4-夸张" class="headerlink" title="c.4). 夸张"></a>c.4). 夸张</h2><ul>
<li><p>挤压和拉伸</p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/挤压.png" alt="挤压" style="zoom:25%;"></p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/挤压2.png" alt="挤压2" style="zoom:25%;"></p>
</li>
<li><p>拖尾和变形</p>
<ul>
<li><p>模仿视觉残留，在写实中是运动模糊。非写实则是模型形变</p>
</li>
<li><p>三维动画实现上比较麻烦，美式卡通更倾向于做模型上的挤压拉伸，但日式更多会做像速度线，色块残留的OBAKE（OBAKE：日式作画中表现高速运动的作画技巧）</p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/拖尾.png" alt="拖尾"></p>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/拖尾2.png" alt="拖尾2"></p>
</li>
</ul>
</li>
<li><p>不正确的透视</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1o7411v7sD">【动画原画笔记】透视不对？透视不对就对了！</a></li>
</ul>
<p><img src="/2023/02/15/HPP_Art_03.1%20%E5%8A%A8%E4%BD%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/透视01.png" alt="透视01"></p>
</li>
<li><p>时间操控</p>
</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>美术</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Graphics_1.2.3 MVP矩阵运算</title>
    <url>/2023/02/15/HPP_Graphics_1.2.3%20MVP%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="a-简介"><a href="#a-简介" class="headerlink" title="a). 简介"></a>a). 简介</h2><p><strong>MVP矩阵</strong>分别是<strong>模型(Model)</strong>、<strong>观察(View)</strong>、<strong>投影(Projection)</strong>三个矩阵。我们的顶点坐标起始于<strong>局部空间(Local Space)</strong>,在这里它称为局部坐标(Local Coordinate),它在之后会变为世界坐标(World Coordinate),观察坐标(View Coordinate),<strong>裁剪坐标(Clip Coordinate)</strong>,并最后以屏幕坐标(Screen Coordinate)的形式结束。下面的这张图展示了整个流程以及各个变换过程做了什么：<img src="/2023/02/15/HPP_Graphics_1.2.3%20MVP%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/MVP.png" alt="MVP"></p>
<h2 id="b-M-模型空间→世界空间"><a href="#b-M-模型空间→世界空间" class="headerlink" title="b). M: 模型空间→世界空间"></a>b). M: 模型空间→世界空间</h2><ul>
<li><p>变换顺序</p>
<ol>
<li>缩放</li>
<li>旋转</li>
<li>平移</li>
</ol>
<script type="math/tex; mode=display">
\mathbf{M_{model}}=\left[\begin{array}{llll}
1 & 0 & 0 & t x \\
0 & 1 & 0 & t y \\
0 & 0 & 1 & t z \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
\cos \theta & 0 & \sin \theta & 0 \\
0 & 1 & 0 & 0 \\
-\sin \theta & 0 & \cos \theta & 0 \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
k x & 0 & 0 & 0 \\
0 & k y & 0 & 0 \\
0 & 0 & k z & 0 \\
0 & 0 & 0 & 1
\end{array}\right]</script></li>
</ul>
<h2 id="c-V-世界空间→观察空间"><a href="#c-V-世界空间→观察空间" class="headerlink" title="c). V: 世界空间→观察空间"></a>c). V: 世界空间→观察空间</h2><ul>
<li>变换顺序：<ol>
<li>平移</li>
<li>旋转</li>
<li>Z分量取反（观察空间采用的是右手坐标系，而Unity则是左手坐标系）</li>
</ol>
</li>
</ul>
<script type="math/tex; mode=display">
V=\left[\begin{array}{cccc}
1 & 0 & 0 & 0 \\
0 & \cos \theta & -\sin \theta & 0 \\
0 & \sin \theta & \cos \theta & 0 \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
1 & 0 & 0 & t x \\
0 & 1 & 0 & t y \\
0 & 0 & 1 & t z \\
0 & 0 & 0 & 1
\end{array}\right]</script><h2 id="d-P-观察空间→裁剪空间"><a href="#d-P-观察空间→裁剪空间" class="headerlink" title="d). P: 观察空间→裁剪空间"></a>d). P: 观察空间→裁剪空间</h2><ul>
<li>不是真正的投影，为投影做准备</li>
<li><strong>目的：</strong>判断顶点是否在可见范围内</li>
<li><strong>P矩阵：</strong>对x,y,z分量进行缩放，用w分量做范围值。如果x,y,z都在w范围内，那么该点在裁剪空间内。</li>
</ul>
<h3 id="d-1-正交矩阵"><a href="#d-1-正交矩阵" class="headerlink" title="d.1) 正交矩阵"></a>d.1) 正交矩阵</h3><h3 id="d-2-透视矩阵"><a href="#d-2-透视矩阵" class="headerlink" title="d.2) 透视矩阵"></a>d.2) 透视矩阵</h3><font color="red">TODO: 推导各项矩阵</font>



<h2 id="e-光栅化补充"><a href="#e-光栅化补充" class="headerlink" title="e). 光栅化补充"></a>e). 光栅化补充</h2><ul>
<li>三角形设置：得到图元的边界条件，并对边进行插值；</li>
<li>三角形遍历：对单行进行插值</li>
</ul>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-5 Non-Photorealistic Rendering (NPR)</title>
    <url>/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/</url>
    <content><![CDATA[<h1 id="a-Photorealistic-vs-Non-Photorealistic"><a href="#a-Photorealistic-vs-Non-Photorealistic" class="headerlink" title="a). Photorealistic vs. Non-Photorealistic"></a>a). Photorealistic vs. Non-Photorealistic</h1><p><strong>Photorealistic Rendering</strong></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/PhotorealisticRendering01.png" alt="PhotorealisticRendering01"></p>
<p><strong>Non-Photorealistic Rendering</strong></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/NPR01.png" alt="NPR01"></p>
<ul>
<li>描边</li>
<li>色块（量化Quantization 颜色）</li>
<li>风格化阴影</li>
</ul>
<h1 id="b-Outline-Rendering"><a href="#b-Outline-Rendering" class="headerlink" title="b). Outline Rendering"></a>b). Outline Rendering</h1><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Outline01.png" alt="Outline01"></p>
<ul>
<li>边界（B, 属于剪影的线，但只属于一个面）</li>
<li>折痕（C）</li>
<li>材质的边界（M）</li>
<li>轮廓（CS, 属于剪影的线，且有多个面共享）</li>
</ul>
<span id="more"></span>
<h2 id="shading"><a href="#shading" class="headerlink" title="shading"></a>shading</h2><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Outline_Shading01.png" alt="Outline_Shading01"></p>
<ul>
<li>法线和摄影机夹角：即轮廓都是grazing angle</li>
</ul>
<h2 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h2><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Outline_Geo01.png" alt="Outline_Geo01"></p>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Outline_img01.png" alt="Outline_img01"></p>
<ul>
<li>Soble算子做卷积</li>
</ul>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Outline_img02.png" alt="Outline_img02"></p>
<ul>
<li>综合多种信息，如法线和深度等</li>
</ul>
<h1 id="c-Color-blockers"><a href="#c-Color-blockers" class="headerlink" title="c). Color blockers"></a>c). Color blockers</h1><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Color_Blockers01.png" alt="Color_Blockers01"></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Color_Blockers02.png" alt="Color_Blockers02"></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/Color_Blockers03.png" alt="Color_Blockers03"></p>
<h1 id="d-Strokes-Surface-Stylization"><a href="#d-Strokes-Surface-Stylization" class="headerlink" title="d). Strokes Surface Stylization"></a>d). Strokes Surface Stylization</h1><p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/StrokesSurfaceStylization01.png" alt="StrokesSurfaceStylization01"></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/StrokesSurfaceStylization02.png" alt="StrokesSurfaceStylization02"></p>
<p><img src="/2023/02/10/Games202_05_Non-Photorealistic%20Rendering%20(NPR)/StrokesSurfaceStylization03.png" alt="StrokesSurfaceStylization03"></p>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Materials</tag>
        <tag>Games202</tag>
        <tag>NPR</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-4 Real-time Global Illumination(Screen Space)</title>
    <url>/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/</url>
    <content><![CDATA[<h1 id="a-Screen-Space-Ambient-Occlusion-SSAO"><a href="#a-Screen-Space-Ambient-Occlusion-SSAO" class="headerlink" title="a). Screen Space Ambient Occlusion(SSAO)"></a>a). Screen Space Ambient Occlusion(SSAO)</h1><h2 id="a-1-Introduction"><a href="#a-1-Introduction" class="headerlink" title="a.1). Introduction"></a>a.1). Introduction</h2><ul>
<li><strong>SSAO:</strong> 在<strong>屏幕空间</strong>中，对全局光照的近似；</li>
</ul>
<ul>
<li><p><strong>Key idea:</strong></p>
<ol>
<li><p>假设各方向间接光照的强度相同（类似于Phong模型中的Ambition light）</p>
</li>
<li><p>考虑不同着色点，有<strong>不同的Visibility</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Intro01.png" alt="SSAO_Intro01" style="zoom:50%;"></p>
</li>
<li><p>假设材质为<strong>diffuse</strong></p>
</li>
<li><p>假设间接光照来自于比较远的地方。因此，橙色的光线，即一定范围内不被遮挡的光线会贡献间接光。（如假设间接光来自比较近的地方，则是红色射线方向贡献间接光）</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Intro02.png" alt="SSAO_Intro02" style="zoom:50%;"></p>
</li>
</ol>
</li>
</ul>
<h2 id="a-2-Theory"><a href="#a-2-Theory" class="headerlink" title="a.2). Theory"></a>a.2). Theory</h2><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory01.png" alt="SSAO_Theory01" style="zoom:50%;"></p>
<ul>
<li><p>通过不等式，拆分渲染方程为：</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory02.png" alt="SSAO_Theory02" style="zoom:50%;"></p>
<ul>
<li>$k_A$ 项代表<strong>不同方向Visibility的（加权）平均</strong></li>
<li><p>黄色框可用一个Constant color表示</p>
<ul>
<li>假设了间接光 $L_i^{indir}$ 各方向强度相同，因此为常数；</li>
<li>假设了材质为Diffuse，因此BRDF为常数；</li>
<li>$cos\theta$ 半球积分为$\pi$</li>
</ul>
</li>
<li><p>同样，因为黄色框，即$g(x)$为常数，其Support极小。因此，应用该不等式是<strong>精确</strong>的</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>A deeper understanding 1:</strong><ul>
<li><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory03.png" alt="SSAO_Theory03" style="zoom:50%;"></li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>A deeper understanding 2:（为什么Visibility项会有$cos\theta$）</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory04.png" alt="SSAO_Theory04" style="zoom:50%;"></p>
<ul>
<li><p>加上 $cos\theta$ 的含义是<strong>把积分域从单位半球投影到单位圆上</strong>(Projected solid angle)；</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory05.png" alt="SSAO_Theory05" style="zoom:50%;"></p>
</li>
<li><p><strong><font color="red">为什么要这么做呢？</font></strong></p>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="a-2-1-Simpler-understanding"><a href="#a-2-1-Simpler-understanding" class="headerlink" title="a.2.1). Simpler understanding"></a>a.2.1). Simpler understanding</h3><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory06.png" alt="SSAO_Theory06" style="zoom:50%;"></p>
<ul>
<li>那么，我们怎么算 $k_A$ 项（不同方向Visibility的（加权）平均）呢？这就是AO算法实现的，如SSAO；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_Theory07.png" alt="SSAO_Theory07" style="zoom:50%;"></p>
<ul>
<li>在计算AO时，我们计算的Visibility是<strong>限制在一定半径内的一个半球的局部遮挡</strong>。如在封闭的区域，如室内，如不限制半径，那Visibility将会为0。因此需要限制半径。</li>
</ul>
<h2 id="a-3-实现"><a href="#a-3-实现" class="headerlink" title="a.3). 实现"></a>a.3). 实现</h2><ul>
<li><p>屏幕空间环境光遮蔽，全称Screen Space Ambient Occlusion，一种用于计算机图形中实时实现近似环境光遮蔽效果的渲染技术。通过获取像素的<strong>深度缓冲</strong>、<strong>法线缓冲</strong>以及<strong>像素坐标</strong>来计算实现，来近似的表现物体在间接光下产生的阴影。</p>
</li>
<li><p><strong>做法总览（详情见<em>百人计划图形4.2 SSAO</em>）：</strong> </p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO原理.png" alt="SSAO原理"></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/法向半球.png" alt="法向半球"></p>
</li>
</ul>
<ul>
<li><p>在法向半球内随机采样，采样点 $p$ 的深度$Z_p$与 点$p$ 在屏幕空间中对应位置 点$p’$ 的Z-Buffer中的深度$Z_{p’Zbuffer}$比较。</p>
<ul>
<li>如 $Z_p&gt;Z_{p’Zbuffer}$，说明该采样点被遮蔽（红点），Visibility为0；</li>
<li>如 $Z_p&lt;Z_{p’Zbuffer}$，说明该采样点可见（绿点），Visibility为1；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_How01.png" alt="SSAO_How01"></p>
</li>
</ul>
<ul>
<li><p><strong>Cons：</strong></p>
<ol>
<li><p>由于是通过屏幕空间像素坐标和Z-Buffer取近似场景，只模拟了离屏幕最近的表面，对于一些点（如箭头所指的红点）的Visibility会误判；（从着色点看向该点可以看到，但SSAO中却将该点视为被遮蔽）</p>
</li>
<li><p>没有$cos\theta $ 项的加权，因此在物理上是不准确的；</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_How02.png" alt="SSAO_How02" style="zoom: 33%;"></p>
</li>
</ol>
</li>
</ul>
<pre><code> [^SSAO]: 经过滤波后的SSAO

 $$
 k_&#123;A&#125;=\frac&#123;\int_&#123;\Omega^&#123;+&#125;&#125; V\left(\mathrm&#123;p&#125;, \omega_&#123;i&#125;\right) \cos \theta_&#123;i&#125; \mathrm&#123;~d&#125; \omega_&#123;i&#125;&#125;&#123;\pi&#125;
 $$

 - 采用了$cos\theta $ 项的加权的算法：Horizon based ambient occlusion(HBAO)
</code></pre><ol>
<li><p>由于SSAO中未考虑深度比较时采样点深度和Z-Buffer深度的差值，造成相距比较远的物体之间也会存在AO (HBAO解决了)</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSAO_How03.png" alt="SSAO_How03" style="zoom:50%;"></p>
</li>
</ol>
<hr>
<h1 id="b-Screen-Space-Directional-Occlusion-SSDO"><a href="#b-Screen-Space-Directional-Occlusion-SSDO" class="headerlink" title="b). Screen Space Directional Occlusion(SSDO)"></a>b). Screen Space Directional Occlusion(SSDO)</h1><h2 id="b-1-Introduction"><a href="#b-1-Introduction" class="headerlink" title="b.1). Introduction"></a>b.1). Introduction</h2><ul>
<li>An imporovement over SSAO;</li>
<li>考虑了更准确的间接光照（不再假设各方向的间接光照相同）</li>
</ul>
<ul>
<li><strong>Key idea:</strong><ul>
<li>考虑了更准确的间接光照</li>
<li>使用已知的间接光源信息<ul>
<li>如RSM得到的Secondary Light Source 的flux等；</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>效果：</strong> 间接光照更为准确，<strong>出现了color blooding</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_ColorBlooding.png" alt="SSDO_ColorBlooding"></p>
</li>
</ul>
<ul>
<li><p><strong>做法</strong>：（与Path Tracing非常相似）</p>
<ul>
<li>着色 $p$点 时，发射随机光线；<ul>
<li><strong>如未被遮挡（无交点）：</strong> 该点受<strong>直接光照</strong>影响（如Ambient Light）；</li>
<li><strong>如被遮挡（有交点）：</strong> 该点受<strong>间接光照</strong>影响；</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_How00.png" alt="SSDO_How00" style="zoom:50%;"></p>
</li>
</ul>
<h2 id="b-2-实现"><a href="#b-2-实现" class="headerlink" title="b.2). 实现"></a>b.2). 实现</h2><ul>
<li><p><strong>与SSAO相比：</strong> SSAO为被遮挡的光线的方向为间接光照贡献方向，SSDO则是被遮挡的光线方向为间接光照贡献方向；</p>
<blockquote>
<p>（SSAO）假设间接光照来自于比较远的地方。因此，橙色（被红圈圈起来的）的光线，即一定范围内不被遮挡的光线会贡献间接光。（如假设间接光来自比较近的地方（SSDO），则是红色射线（被橙圈圈起来的）方向贡献间接光）</p>
</blockquote>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_vsSSAO.png" alt="SSDO_vsSSAO" style="zoom:50%;"></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_Func.png" alt="SSDO_Func" style="zoom:50%;"></p>
<ul>
<li>间接光照的计算则可采用RSM、或者LPV、VXGI等；</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>具体做法：</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_How01.png" alt="SSDO_How01"></p>
<ul>
<li><p>和SSAO类似，在<strong>着色点P</strong>周围，一定半径的<strong>法向半球</strong>内进行随机给出采样点（A、B、C、D……），并和Z-Buffer中的深度进行比较；</p>
<ul>
<li><p>如$Z_{sample} &gt; Z_{sample\, Z-buffer}$ ，说明该点（A、B、D）<strong>被遮挡</strong>，该点则会对点P贡献间接光；</p>
<ul>
<li><p><strong>判断：</strong> 贡献间接光的Patch的方向是否会能贡献到，如点A ，${Normal_A}\cdot \vec{AP} &lt; 0$ ，则该点不贡献间接光；</p>
<blockquote>
<p>Reflector的反射方向只在法向半球上，法向半球的方向覆盖不到的Shading Point自然不受该Reflector的影响</p>
</blockquote>
</li>
</ul>
</li>
<li><p>如$Z_{sample} &lt; Z_{sample\, Z-buffer}$ ，说明该点（A、B、D）<strong>未被遮挡</strong>，该点则不会对点P贡献间接光，而是贡献直接光（Ambition Light）；</p>
</li>
</ul>
</li>
<li><p><strong>缺点：</strong> 如上图最右</p>
</li>
</ul>
</li>
</ul>
<h2 id="b-3-Issues"><a href="#b-3-Issues" class="headerlink" title="b.3). Issues"></a>b.3). Issues</h2><ol>
<li><p>只能计算小范围的AO；</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_issues2.png" alt="SSDO_issues2"></p>
</li>
<li><p>是通过采样点深度和Z-buffer比较得出Visibility，而不是从P点出射光线计算交点，导致Visibility不精准；</p>
</li>
<li><p><strong>屏幕空间的通病：</strong> 失去了屏幕中<strong>未被显示（如屏幕外）</strong>的表面的信息；</p>
<ul>
<li>屏幕空间只能表现场景最表面(Depth最小)的一层“壳”；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSDO_issues.png" alt="SSDO_issues" style="zoom:50%;"></p>
</li>
</ol>
<h1 id="c-Screen-Space-Reflection-SSR"><a href="#c-Screen-Space-Reflection-SSR" class="headerlink" title="c). Screen Space Reflection(SSR)"></a>c). Screen Space Reflection(SSR)</h1><h2 id="c-1-Introduction"><a href="#c-1-Introduction" class="headerlink" title="c.1). Introduction"></a>c.1). Introduction</h2><p><strong>What is SSR?</strong></p>
<ul>
<li>Still, one way to introduce Global Illumination in RTR;</li>
<li>执行上为光线追踪；</li>
<li>光线追踪的求交并不要求3D图元，而是屏幕空间的一层“壳”（通过Z-Buffer还原的场景）</li>
</ul>
<p><strong>Two fundamental tasks of SSR：</strong></p>
<ul>
<li>求交：任何光线和场景；</li>
<li>着色：交点对Shading point的贡献；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_Intro01.png" alt="SSR_Intro01"></p>
<ul>
<li><p><strong>效果：</strong> 可实现Specular reflection和Gloosy reflection；</p>
<ul>
<li>对于Specular只用追踪镜面反射方向即可；</li>
<li>对于Gloosy知道BRDF后需追踪入射方向的Lobe；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_Intro02.png" alt="SSR_Intro02"></p>
</li>
</ul>
<h2 id="c-2-实现"><a href="#c-2-实现" class="headerlink" title="c.2). 实现"></a>c.2). 实现</h2><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How01.png" alt="SSR_How01"></p>
<blockquote>
<p><strong>Two fundamental tasks of SSR：</strong></p>
<ul>
<li>求交：任何光线和场景；</li>
<li>着色：交点对Shading point的贡献；</li>
</ul>
</blockquote>
<h3 id="c-2-1-Intersection（求交）"><a href="#c-2-1-Intersection（求交）" class="headerlink" title="c.2.1). Intersection（求交）"></a>c.2.1). Intersection（求交）</h3><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How_Intersection01.png" alt="SSR_How_Intersection01"></p>
<ul>
<li><p>使用<strong>光线步进（Raymarch）</strong>，那么如何确定步进的步长？</p>
<ul>
<li><p>Hierarchical tracing</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How_Intersection02.png" alt="SSR_How_Intersection02" style="zoom: 25%;"></p>
<ul>
<li>不想一层一层步进，而是允许时步长变大；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Hierarchical-tracing"><a href="#Hierarchical-tracing" class="headerlink" title="Hierarchical tracing"></a>Hierarchical tracing</h4><ul>
<li><p><strong>Step1: Generate Depth Mip-Map</strong>(使用<strong>最小</strong>池化，而不是平均)</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How_Intersection03.png" alt="SSR_How_Intersection03"></p>
<ul>
<li><p><strong>取最小：</strong> 如2x2的像素中，取最小深度值作为下一层该位置的深度；</p>
</li>
<li><p>最小池化构造出类似与KD-tree的结构；</p>
</li>
<li><p><strong>逻辑：</strong> 取最小后，如果光线不和父（更大的）节点相交，那就不会和子节点相交；</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How_Intersection04.png" alt="SSR_How_Intersection04"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>P-Code</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_How02.png" alt="SSR_How02"></p>
<ul>
<li>开始在Mip0层步进<ul>
<li>没交点则进入下一层Mip（父节点）；</li>
<li>有交点则进入上一层Mip（子节点），并在交点对应位置的子节点继续求交；</li>
<li>直到找到Mip0层的交点，结束循环；（演示看PPT）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="c-2-2-Shading"><a href="#c-2-2-Shading" class="headerlink" title="c.2.2). Shading"></a>c.2.2). Shading</h3><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_Shading01.png" alt="SSR_Shading01"></p>
<p>Shading过程和Path tracing相似；</p>
<ul>
<li><strong>假设：</strong> <font color="red">Reflectors(反射物)/ Secondary light source是Diffuse的</font><ul>
<li><strong>原因：</strong> 生成Shaded场景时，只知道屏幕空间下一个点的Radiance（即Shading Point到Camera的Radiance）。如假设Reflector为Diffuse，那么该点的$L_i$就为framebuffer中的颜色；</li>
</ul>
</li>
</ul>
<h3 id="c-2-3-效果"><a href="#c-2-3-效果" class="headerlink" title="c.2.3). 效果"></a>c.2.3). 效果</h3><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_Show01.png" alt="SSR_Show01"></p>
<ul>
<li><p>可实现锐利或模糊的反射；</p>
</li>
<li><p>Contact hardening（接触的地方反射较为锐利，类似PCSS）</p>
</li>
<li><p>Specular elongation</p>
<ul>
<li><p>类似雨天红绿灯反射垂直拉长的效果；</p>
</li>
<li><p>给定视角后，各项同性的法线分布，造成的反射Lobe为垂直方向椭圆的Lobe；</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/MicrofacetBRDF.png" alt="MicrofacetBRDF"></p>
</li>
</ul>
</li>
<li><p>每个像素不同的Roughness和Normal</p>
</li>
</ul>
<h2 id="c-3-Issues"><a href="#c-3-Issues" class="headerlink" title="c.3). Issues"></a>c.3). Issues</h2><ul>
<li><p>Edge Cutoff</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_issue01.png" alt="SSR_issue01" style="zoom:50%;"></p>
<ul>
<li><p>缓解方法：根据反射长度进行Fade off</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_issue02.png" alt="SSR_issue02"></p>
</li>
</ul>
</li>
</ul>
<h1 id="d-Pros-And-Cons"><a href="#d-Pros-And-Cons" class="headerlink" title="d). Pros And Cons"></a>d). Pros And Cons</h1><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(Screen%20Space)/SSR_ProsAndCons.png" alt="SSR_ProsAndCons"></p>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
        <tag>GI</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-4 Real-time Global Illumination(in 3D)</title>
    <url>/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/</url>
    <content><![CDATA[<h1 id="a-Introduction"><a href="#a-Introduction" class="headerlink" title="a). Introduction"></a>a). Introduction</h1><ul>
<li>In RTR, people seek simple and fast solutions to <strong>one bounce indirect illumination</strong></li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/GI00b.png" alt="GI00b"></p>
<ul>
<li><p><strong>Primary LIght Source（真正的光源，太阳）</strong></p>
</li>
<li><p><strong>Secondary Light Source(次级光源，Q点)</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/GI00a.png" alt="GI00a"></p>
</li>
</ul>
<ul>
<li><strong>观察（要得到$p$点的间接光照我们需要做什么）：</strong><ol>
<li>得到<strong>Secondary light source</strong>（哪些点被光源照射到）<ul>
<li><strong>方法：</strong> Shadow Mapping</li>
</ul>
</li>
<li>得到各个<strong>Secondary light source对 $p$点 Radiance的贡献</strong><ul>
<li><strong>方法：</strong> 解渲染方程</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>以下是实时渲染中常用的在3D空间中（意为渲染效果不取决于相机位置/屏幕空间）的GI方法（<strong>主要针对one bounce indirect illumination</strong>）：<ul>
<li>Reflective Shadow Maps (RSM)</li>
<li>Light Propagation Volumes (LPV)</li>
<li>Voxel Global Illumination (VXGI)</li>
</ul>
</li>
</ul>
<hr>
<h1 id="b-Reflective-Shadow-Maps-RSM"><a href="#b-Reflective-Shadow-Maps-RSM" class="headerlink" title="b). Reflective Shadow Maps (RSM)"></a>b). Reflective Shadow Maps (RSM)</h1><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/GI00a.png" alt="GI00a"></p>
<ul>
<li>得到<strong>Secondary light source</strong>（哪些点被光源照射到）<ul>
<li>Shadow map中每一个Texel都是一个作为Secondary light sourc的面片（Surface patch）<ul>
<li>Shadow map做阴影中是光源视角的$Depth$，和相机视角的比较；这里是光源视角的$Depth$和 点$p$ 视角比较</li>
</ul>
</li>
</ul>
</li>
<li>得到各个<strong>Secondary light source对 $p$点 Radiance的贡献</strong><ul>
<li>但是，对于不同的 点$p$ 次级光源入射方向是不一定的。即，即使观察角度固定，同一个Shadow map中的Surface patch，对不同的 $p$ 贡献不同；</li>
</ul>
</li>
</ul>
<ul>
<li><strong>假设：</strong><ul>
<li><strong>次级光源均为Diffuse</strong>（观察角度固定，同一个次级光源对不同 点$p$ 的贡献相同）</li>
<li>Therefore, outgoing radiance is uniform toward all directions</li>
</ul>
</li>
</ul>
<h2 id="b-1-得到各个Secondary-light-source对-p-点-Radiance的贡献"><a href="#b-1-得到各个Secondary-light-source对-p-点-Radiance的贡献" class="headerlink" title="b.1). 得到各个Secondary light source对 $p$点 Radiance的贡献"></a>b.1). 得到各个Secondary light source对 $p$点 Radiance的贡献</h2><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/RSM_01a.png" alt="RSM_01a"></p>
<script type="math/tex; mode=display">
\begin{aligned}
L_{o}\left(\mathrm{p}, \omega_{o}\right) & =\int_{\Omega_{\mathrm{patch}}} L_{i}\left(\mathrm{p}, \omega_{i}\right) V\left(\mathrm{p}, \omega_{i}\right) f_{r}\left(\mathrm{p}, \omega_{i}, \omega_{o}\right) \cos \theta_{i} \mathrm{~d} \omega_{i} \\
& =\int_{A_{\mathrm{patch}}} L_{i}(\mathrm{q} \rightarrow \mathrm{p}) V\left(\mathrm{p}, \omega_{i}\right) f_{r}\left(\mathrm{p}, \mathrm{q} \rightarrow \mathrm{p}, \omega_{o}\right) \frac{\cos \theta_{p} \cos \theta_{q}}{\|q-p\|^{2}} \mathrm{~d} A
\end{aligned}</script><ul>
<li><p>对于每个diffuse reflective patch(点$q$)</p>
<ul>
<li><p><strong>点$q$</strong> 的BRDF: $f_{rq} = \rho/\pi$ </p>
</li>
<li><p>$L_i(q\rightarrow p) = f_{rq} \cdot \frac{\Phi}{d A}$ ( $\Phi$ 是光源的辐射通量，将该式带入渲染方程，${d A}$ 被消除)</p>
</li>
<li><script type="math/tex; mode=display">
E_{q}(x,n)=\Phi_{q}\frac{\mathrm{max}\{0,\langle n_{q}|x-x_{q}\rangle\}\mathrm{max}\{0,\langle n|x_{q}-x\rangle\}}{||x-x_{q}||^{4}}.</script><ul>
<li>${||x-x_{q}||^{4}}$ 是因为分子上$x-x_{q}$是未归一化的向量；</li>
<li>$\Phi_p$ 为 $f_{rq} \cdot {\Phi}$</li>
<li>将$E_p(x,n)$ 乘上 点$p$ 的BRDF即可得出$L_o$</li>
<li>$V$：Visibility项就不算了</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Not all pixels in the RSM can contribute</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/RSM_04.png" alt="RSM_04"></p>
<ul>
<li><p>Visibility (难处理，不管了)</p>
</li>
<li><p>Orientation（方向，Reflector的反射方向只在法向半球上，法向半球的方向覆盖不到的Shading Point自然不受该Reflector的影响）</p>
</li>
<li><p>Distance（只有和Shading Point近的Reflector才做贡献）</p>
<ul>
<li><p><strong>假设：</strong> 世界坐标下，两点接近 $\rightarrow$ Shadow Map（世界空间转换到光源空间）中距离比较近，且深度相差不大；</p>
</li>
<li><p>进一步加速（类似于Step 1 and 3 in PCSS），在shading point转换到Shadow Map后对应点$(s,t)$ 的一定范围内，做随机采样</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/RSM_Distance.png" alt="RSM_Distance"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="b-2-光源视角下储存的信息（Shadow-Map）"><a href="#b-2-光源视角下储存的信息（Shadow-Map）" class="headerlink" title="b.2). 光源视角下储存的信息（Shadow Map）"></a>b.2). 光源视角下储存的信息（Shadow Map）</h2><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/RSM_Record.png" alt="RSM_Record"></p>
<ul>
<li>深度</li>
<li>世界坐标</li>
<li>法线</li>
<li>辐射通量（flux）</li>
<li>etc.</li>
</ul>
<h2 id="b-3-Pros-And-Cons"><a href="#b-3-Pros-And-Cons" class="headerlink" title="b.3). Pros And Cons"></a>b.3). Pros And Cons</h2><ul>
<li>Pros:<ul>
<li>好写（类似于Shadow Map）</li>
</ul>
</li>
<li>Cons:<ul>
<li>计算量随光源（Primary Light Source）数量增多线性增加</li>
<li>Visibility无法处理</li>
<li>很多假设：diffuse reflectors, depth as distance, etc.<ul>
<li>只能处理次级光源为Diffuse</li>
</ul>
</li>
<li>质量依赖于采样率</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="c-Light-Propagation-Volumes-LPV"><a href="#c-Light-Propagation-Volumes-LPV" class="headerlink" title="c). Light Propagation Volumes(LPV)"></a>c). Light Propagation Volumes(LPV)</h1><ul>
<li>CryEngine3 里用到了，在孤岛危机里应用<ul>
<li>快而且质量好</li>
<li>同样也只能处理次级光源为Diffuse</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_CryEngine.png" alt="LPV_CryEngine"></p>
<ul>
<li><strong>Key idea:</strong> 光线直线传播中，Radiance大小不变；</li>
<li><strong>Key solution:</strong> 通过3D网格<strong>(体素，Voxel)</strong>，传播Secondary Light Source/dirctly illminated surfaces的Radiance到其他地方；</li>
</ul>
<ul>
<li><strong>Steps:</strong><ol>
<li><strong>生成</strong>场景中被直接光照照射到的<strong>Radiance point</strong>(即Secondary light source)；</li>
<li>将Radiance point<strong>注入到体素</strong>中；</li>
<li>Radiance在体素中<strong>传播</strong>；</li>
<li>传播稳定后（一般迭代4、5次），通过体素中储存的Radiance进行Shading；</li>
</ol>
</li>
</ul>
<h2 id="c-1-做法"><a href="#c-1-做法" class="headerlink" title="c.1). 做法"></a>c.1). 做法</h2><h3 id="Step-1-Generation"><a href="#Step-1-Generation" class="headerlink" title="Step 1: Generation"></a>Step 1: Generation</h3><ul>
<li>找到Secondary light source</li>
<li>使用Reflective Shadow Maps (RSM)；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_Step01.png" alt="LPV_Step01" style="zoom: 50%;"></p>
<h3 id="Step-2-Injection-注入"><a href="#Step-2-Injection-注入" class="headerlink" title="Step 2: Injection(注入)"></a>Step 2: Injection(注入)</h3><ul>
<li>预先划分好3D网格（体素）；</li>
<li>对于每一个体素，找到其内部的Secondary light source；</li>
<li>将他们出射的Radiance大小和方向看做是球面函数，<strong>投影到2阶（4个）的球谐函数上</strong>；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_Step02.png" alt="LPV_Step02" style="zoom:33%;"></p>
<h3 id="Step-3-Propagation-传播"><a href="#Step-3-Propagation-传播" class="headerlink" title="Step 3: Propagation(传播)"></a>Step 3: Propagation(传播)</h3><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_Step03.png" alt="LPV_Step03" style="zoom:50%;"></p>
<ul>
<li>对于每一个Voxel，都会传播到相邻的6个面（3D，前后左右上下，不会斜向传播），也会接收6个面的Radiance；</li>
<li>接收6个面的Radiance并相加后，再次使用SH表示；</li>
<li>重复上述步骤，直至传播接近稳定（一般整体迭代4-5次）</li>
</ul>
<h3 id="Step4-Rendering"><a href="#Step4-Rendering" class="headerlink" title="Step4: Rendering"></a>Step4: Rendering</h3><ul>
<li>对于每一个着色点，找到他们所处的Voxel；</li>
<li>使用该Voxel中存储的Radiance<strong>（from all direction, 是一个SH表达的球面函数）</strong>，进行Shading；<ul>
<li>因为存储的是球面函数形式的Radiance，所以既可以做Diffuse也可以做Gloosy</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_Step04.png" alt="LPV_Step04" style="zoom:67%;"></p>
<ul>
<li><p><strong>造成的问题：</strong> 由于同一个Voxel中Radiance相同，对于薄的几何体可能造成<strong>Light leaking</strong></p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/LPV_LightLeaking.png" alt="LPV_LightLeaking"></p>
</li>
</ul>
<h1 id="d-Voxel-Global-Illumination-VXGI"><a href="#d-Voxel-Global-Illumination-VXGI" class="headerlink" title="d). Voxel Global Illumination (VXGI)"></a>d). Voxel Global Illumination (VXGI)</h1><ul>
<li>与RSM两点主要的不同<ul>
<li>将被光源直接照射的像素变为<strong>带有层级的体素（hierarchical voxels）</strong>（即Secondary light source不再看成surface patch，而是hierarchical voxels）</li>
<li>光线传播方式：<ul>
<li>从摄像机开始传播，进行锥形传播（Cone tracing，比如光线在Gloosy表面弹射，出射方向为一个锥形），计算锥体相交的Voxel对该点的Radiance贡献；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="d-1-做法"><a href="#d-1-做法" class="headerlink" title="d.1). 做法"></a>d.1). 做法</h2><p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/VXGI_00.png" alt="VXGI_00"></p>
<hr>
<h3 id="Pass-1-from-the-light"><a href="#Pass-1-from-the-light" class="headerlink" title="Pass 1: from the light"></a>Pass 1: from the light</h3><ul>
<li>储存每个点的入射Radiance，并储存到对应的Voxel中；</li>
<li>Voxel中存储Incident lighting和normal的分布，以便支持Gloosy等材质；<ul>
<li>存储Lobe分布的基础：Cone Trace</li>
</ul>
</li>
<li>根据这两个分布，即可得出 出射Radiance 的分布情况；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/VXGI_Pass01.png" alt="VXGI_Pass01"></p>
<h3 id="Pass-2-from-the-camera"><a href="#Pass-2-from-the-camera" class="headerlink" title="Pass 2: from the camera"></a>Pass 2: from the camera</h3><ul>
<li>对于Gloosy的表面，追踪1个朝向反射方向的圆锥；</li>
<li>根据圆锥的（grow）大小，查询相应层级；</li>
</ul>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/VXGI_Pass02.png" alt="VXGI_Pass02"></p>
<ul>
<li><p>对于Diffuse，追踪多个Cones</p>
<p><img src="/2023/02/10/Games202_04_Real-time%20Global%20Illumination(in%203D)/VXGI_Pass02_Diffuse.png" alt="VXGI_Pass02_Diffuse"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
        <tag>GI</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Art_2.7 Metallic与Speculer流程</title>
    <url>/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="a-PBR模型"><a href="#a-PBR模型" class="headerlink" title="a). PBR模型"></a>a). PBR模型</h1><p>基于物理的渲染模型，是当前主流游戏引擎使用的真实感3D渲染模型。</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/PBR_model.png" alt="PBR_model" style="zoom:50%;"></p>
<h2 id="a-1-两种工作流"><a href="#a-1-两种工作流" class="headerlink" title="a.1). 两种工作流"></a>a.1). 两种工作流</h2><p><a href="https://zhuanlan.zhihu.com/p/260973533">游戏资源中常见的贴图类型</a></p>
<p><a href="https://substance3d.adobe.com/tutorials/courses/the-pbr-guide-part-1-zh">PBR Guide</a></p>
<p>PBR流程中，常用的有两种工作流程：</p>
<ul>
<li>金属/粗糙度工作流(Metal/Roughness)<ul>
<li>符合直觉，容易调参</li>
<li>更不容易打破能量守恒</li>
</ul>
</li>
<li>高光（镜面反射）/光泽度（Specular/Glossiness）工作流<ul>
<li>可自由调节$F_0$（零度菲涅尔反射）值</li>
<li>容易打破能量守恒</li>
</ul>
</li>
</ul>
<h2 id="a-2-F0反射率值"><a href="#a-2-F0反射率值" class="headerlink" title="a.2). F0反射率值"></a>a.2). F0反射率值</h2><p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/F0.png" alt="F0"></p>
<p>大多数常用的电介质的F0范围从0.02-0.05（线性值）。对于导体，F0值 范围为0.5-1.0。因此表面的反射率由折射率决定，正如下面的方程式所示（Lagarde 2011）。</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/F0a.png" alt="F0a"></p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/F0_eg.png" alt="F0_eg" style="zoom:50%;"></p>
<blockquote id="fn_图1">
<sup>图1</sup>. 金属和非金属的$F_0$​值<a href="#reffn_图1" title="Jump back to footnote [图1] in the text."> &#8617;</a>
</blockquote>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/F0_D_M.png" alt="F0_D_M"></p>
<blockquote id="fn_图2">
<sup>图2</sup>. 电介质$F_0$值和金属反射率值<a href="#reffn_图2" title="Jump back to footnote [图2] in the text."> &#8617;</a>
</blockquote>
<ul>
<li>通用贴图：法线贴图、AO贴图、高度贴图等</li>
</ul>
<span id="more"></span>
<h1 id="b-Metal-Roughness工作流"><a href="#b-Metal-Roughness工作流" class="headerlink" title="b). Metal/Roughness工作流"></a>b). Metal/Roughness工作流</h1><h2 id="b-1-Base-color-RGB-sRGB"><a href="#b-1-Base-color-RGB-sRGB" class="headerlink" title="b.1). Base color(RGB-sRGB)"></a>b.1). Base color(RGB-sRGB)</h2><p><strong>储存数据：</strong></p>
<ul>
<li><strong>非导体</strong> 的<strong>漫反射颜色</strong>/反照率颜色（Diffuse Reflected Color/Albedo）</li>
<li><strong>金属导体</strong> 的镜面反射$F_0$值<ul>
<li><strong>非导体</strong>使用<strong>4%(0.04)</strong> 的$F_0$反射值（在一些软件中可以自定义）</li>
<li><strong>混合材质</strong>（即非导体和金属导体混合材质，如锈蚀）则可以认为同时储存了两种数据</li>
</ul>
</li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li><p><strong>非导体（即电介质，非金属）：</strong> 暗色值，尽量不要低于30-50sRGB，严格控制下应不低于50sRGB。对于亮色值，贴图中不应高于240sRGB；</p>
</li>
<li><p><strong>导体（金属）：</strong> 金属一般会有70-100%的镜面反射，映射到sRGB大概为180-255；</p>
</li>
<li><p>在SP中，可通过滤镜中的PBR检查；SD可通过PBR BaseColor/Metallic Validate节点验证是否在合适范围内；</p>
</li>
<li><p>BaseColor中除了<strong>微观遮蔽信息（Micro-occlusion）</strong>以外，不应包含任何光照信息；</p>
</li>
</ol>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Micro-occlusion.png" alt="Micro-occlusion" style="zoom:50%;"></p>
<h2 id="b-2-Metallic-Grey-Linear"><a href="#b-2-Metallic-Grey-Linear" class="headerlink" title="b.2). Metallic(Grey-Linear)"></a>b.2). Metallic(Grey-Linear)</h2><p><strong>储存数据：</strong></p>
<ul>
<li>对应区域的<strong>金属度</strong>。<strong>0.0纯黑代表非金属，1.0纯白代表纯金属</strong>。</li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li><strong>纯金属</strong>灰度范围在<strong>235-255 sRGB</strong>，其对应的反射率范围为<strong>70%-100%（180-255sRGB）</strong></li>
</ol>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Metallic_RawMetal.png" alt="Metallic_RawMetal" style="zoom: 50%;"></p>
<ol>
<li><p>在Metallic贴图中，纯黑(0.0)代表了非金属，纯白(1.0)代表了金属，我们可以用过渡的灰阶来表示不同程度氧化和污垢；</p>
</li>
<li><p>对于<strong>金属</strong>，<strong>如Metallic低于235 sRGB，在BaseColor中反射率值应降低</strong>。（如一个地方锈蚀特别严重，Metallic低于235sRGB，那么需要降低BaseColor）；</p>
</li>
</ol>
<h2 id="b-3-Roughness-Grey-Linear"><a href="#b-3-Roughness-Grey-Linear" class="headerlink" title="b.3). Roughness(Grey-Linear)"></a>b.3). Roughness(Grey-Linear)</h2><p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Metallic_roughness.png" alt="Metallic_roughness"></p>
<p>Roughness中，<strong>纯黑（0.0）代表平滑表面，纯白（1.0）代表粗糙平面</strong>。</p>
<p>这改变了光的方向，但是光强度保持恒定不变。表面越粗糙，高光越散越暗。表面越光滑，高光反射集中，尽管反射的光的总量是一点的，表面也会更亮，光会更强。</p>
<h1 id="c-Specular-Glossiness工作流"><a href="#c-Specular-Glossiness工作流" class="headerlink" title="c). Specular/Glossiness工作流"></a>c). Specular/Glossiness工作流</h1><h2 id="c-1-Diffuse-RGB-sRGB"><a href="#c-1-Diffuse-RGB-sRGB" class="headerlink" title="c.1). Diffuse(RGB-sRGB)"></a>c.1). Diffuse(RGB-sRGB)</h2><p><strong>储存数据：</strong></p>
<ul>
<li><strong>漫反射颜色（Albedo）</strong></li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li>Diffuse贴图表示的是漫反射颜色，<strong>Raw Metal</strong>没有漫反射，因此为<strong>纯黑（0.0）</strong>。如果发生氧化现象，金属区域就会有颜色；</li>
</ol>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Specular_Diffuse01a.png" alt="Specular_Diffuse01a" style="zoom:50%;"></p>
<ol>
<li>Diffuse中除了<strong>微观遮蔽信息（Micro-occlusion）</strong>以外，不应包含任何光照信息；</li>
<li>除了表示金属的纯黑（0.0）外，暗色值不应低于30sRGB，严格上说，不应该低于50sRGB；</li>
<li>亮色值不应该高于240sRGB；</li>
</ol>
<h2 id="c-2-Specular-RGB-sRGB"><a href="#c-2-Specular-RGB-sRGB" class="headerlink" title="c.2). Specular(RGB-sRGB)"></a>c.2). Specular(RGB-sRGB)</h2><p><strong>储存数据：</strong></p>
<ul>
<li>$F_0$（0度菲涅尔反射值）</li>
</ul>
<p><strong>注意事项：</strong></p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/电介质F0.png" alt="电介质F0" style="zoom:50%;"></p>
<ol>
<li>镜面反射贴图包含$F_0$值；</li>
<li><strong>普遍非导体</strong>的反射值为<strong>2-5%（线性）</strong>，对应<strong>40-75 sRGB</strong>；</li>
<li><strong>普通宝石</strong>的反射值范围在<strong>0.05-0.17（线性）</strong>；</li>
<li><strong>普通液体</strong>的反射值范围在<strong>0.02-0.04（线性）</strong>；</li>
<li>而<strong>原始金属（Raw Metal）</strong>的反射值则可以高达<strong>70-100%的镜面反射，sRGB约为180-255</strong>；</li>
<li>如果你无法找到某个材质的折射率(IOR)，可以先假设F0为4%，也就是塑料的F0。</li>
</ol>
<h2 id="c-3-Glossiness-Grey-Linear"><a href="#c-3-Glossiness-Grey-Linear" class="headerlink" title="c.3). Glossiness(Grey-Linear)"></a>c.3). Glossiness(Grey-Linear)</h2><p><strong>储存数据：</strong></p>
<ul>
<li>对应区域的<strong>光泽度</strong>。<strong>0.0纯黑代表粗糙，1.0纯白代表光滑</strong>。和金属工作流的Roughness为反相的关系；</li>
</ul>
<h1 id="d-Metallic-vs-Specular"><a href="#d-Metallic-vs-Specular" class="headerlink" title="d). Metallic vs. Specular"></a>d). Metallic vs. Specular</h1><ul>
<li><p><strong>边缘效应：</strong></p>
<ul>
<li><p>金属工作流导致金属和非金属的边缘出现白色边界</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/M_R_edge.png" alt="M_R_edge" style="zoom: 50%;"></p>
</li>
<li><p>高光工作流导致金属和非金属边缘出现黑色伪影</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/S_G_edge.png" alt="S_G_edge" style="zoom:50%;"></p>
</li>
<li><p><strong>原因：</strong> 纹理插值（放大），贴图分辨率和Texel密度直接影响边界伪影的可见度</p>
</li>
<li><p><strong>解决方法：</strong> 尽可能使纹理的UV利用率高；</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/M_R_Solve.png" alt="M_R_Solve" style="zoom: 50%;"></p>
</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left">Metallic/Roughness流程</th>
<th style="text-align:left">Specular/Glossiness流程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>优势</strong></td>
<td style="text-align:left">1. 在M/R工作流中，由于非导体（电介质）的FO都是规定好的所以设计师在对非导体FO赋值时不易出错。<br>2. 纹理的缓存压力更小，因为金属贴图和粗糙度贴图都是灰度贴图。<br>3. 目前来说是兼容性最广的工作流。</td>
<td style="text-align:left">1. 边缘效应不会那么明显。<br><br>2. 可以在镜面反射贴图中对非导体（电介质）材质的F0值自由调整。</td>
</tr>
<tr>
<td style="text-align:center"><strong>劣势</strong></td>
<td style="text-align:left">1. 非导体（电介质）F0的值固定为4%，无法调整。然而，在大多是实现流程中都有控制器可以直接复写这个值，所以也不能算硬伤。<br><br>2.白色边缘问题较明显，尤其在低分辨率的情况下问题突出。</td>
<td style="text-align:left">1. 由于在S/G工作流的镜面反射贴图中，非导体（电介质）材质的℉0值是可以自由调整的，所以也会导致设计师容易输入错误的值。而这些错误的值被着色器误读后可能会打破能量守恒定律，从而造成不正确的渲染效果。<br><br>2.由于新增了一张RGB通道的镜面反射贴图，所以对性能消耗会更大。<br><br>3. S/G工作流有些名词和传统的工作流太相似，但是实质所对应的数据可能是不样的，因此会导致设计师容易误解或误操作。这种情况下就要求设计师有更好的PBR理论知识，例如了解非导体（电介质）的正确FO值，金属在漫反射色下表现为纯黑，以及在着色器没有自动校正情况下，能量守恒相关的基础知识。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="e-Metallic和Specular流程的贴图转换（PS演示）"><a href="#e-Metallic和Specular流程的贴图转换（PS演示）" class="headerlink" title="e). Metallic和Specular流程的贴图转换（PS演示）"></a>e). Metallic和Specular流程的贴图转换（PS演示）</h1><p><strong>金属工作流各贴图含义：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">贴图</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Base color</strong></td>
<td style="text-align:center">漫反射颜色+镜面反射$F_0$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Metallic</strong></td>
<td style="text-align:center">材质区分，辅助解读Base color</td>
</tr>
<tr>
<td style="text-align:center"><strong>Roughness</strong></td>
<td style="text-align:center">表面状态参数</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p><strong>高光工作流各贴图含义：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">贴图</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Diffuse</strong></td>
<td style="text-align:center">漫反射颜色</td>
</tr>
<tr>
<td style="text-align:center"><strong>Specular</strong></td>
<td style="text-align:center">镜面反射$F_0$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Glossiness</strong></td>
<td style="text-align:center">表面状态参数（Roughness反相）</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/SD_node.png" alt="SD_node" style="zoom: 33%;"></p>
<h2 id="e-1-Metallic流程-→-Specular流程"><a href="#e-1-Metallic流程-→-Specular流程" class="headerlink" title="e.1). Metallic流程 → Specular流程"></a>e.1). Metallic流程 → Specular流程</h2><h3 id="BaseColor-Metallic-→-Diffuse"><a href="#BaseColor-Metallic-→-Diffuse" class="headerlink" title="BaseColor + Metallic → Diffuse"></a>BaseColor + Metallic → Diffuse</h3><ul>
<li><strong>方法：</strong> 去掉Base Color中金属和混合材质的$F_0$数据</li>
<li><strong>实操：</strong><ol>
<li>打开BaseColor和Metallic，RGB模式</li>
<li>新建Diffuse图层，纯黑填充；</li>
<li>选择Metallic任一通道，得到带灰度的区域$a$；</li>
<li>Diffuse图层新建区域 $a$ 的蒙版，底层为BaseColor；</li>
</ol>
</li>
</ul>
<h3 id="BaseColor-Metallic-→-Specular"><a href="#BaseColor-Metallic-→-Specular" class="headerlink" title="BaseColor + Metallic → Specular"></a>BaseColor + Metallic → Specular</h3><ul>
<li><strong>方法：</strong> 去掉BaseColor中的漫反射数据，并加上非导体和混合材质的$F_0$ （默认0.04，56 sRGB，#383838）</li>
<li><strong>实操：</strong><ol>
<li>打开BaseColor和Metallic，RGB模式</li>
<li>新建Specular图层，填充#383838（0.04对于22-Linear，对应56 sRGB，即#383838）；</li>
<li>反相Metallic，选择Metallic任一通道，得到带灰度的区域$b$；</li>
<li>Specular图层新建区域 $b$的蒙版，底层为BaseColor；</li>
</ol>
</li>
</ul>
<h3 id="Roughness-→-Glossiness"><a href="#Roughness-→-Glossiness" class="headerlink" title="Roughness → Glossiness"></a>Roughness → Glossiness</h3><ul>
<li><strong>方法：</strong> 反相</li>
</ul>
<h2 id="e-2-Specular流程-→-Metallic流程"><a href="#e-2-Specular流程-→-Metallic流程" class="headerlink" title="e.2). Specular流程 → Metallic流程"></a>e.2). Specular流程 → Metallic流程</h2><h3 id="Diffuse-Specular-→-BaseColor-Metallic"><a href="#Diffuse-Specular-→-BaseColor-Metallic" class="headerlink" title="Diffuse + Specular → BaseColor + Metallic"></a>Diffuse + Specular → BaseColor + Metallic</h3><ul>
<li><strong>方法：</strong> 找出金属区域对应的数据，金属的特性是$F_0$在0.7-1.0之间，而非金属一般不超过0.04（宝石最高0.17），差异明显。</li>
<li><strong>实操：</strong><ol>
<li>Specular,菜单选择，色彩范围，选择阴影，灰度预览，调整参数。（也可以使用Diffuse图层)(效果不好的话可以将阴影换为取样颜色，选择纯黑，调整容差)shift+ctrl+i反选，创建蒙版。</li>
<li>alt+左键拖动蒙版到Diffuse图层，选择蒙版，ctrl+i反相。<strong>Base color完成</strong></li>
<li>新建Metallicl图层，填充黑色，ctrl+左键点击Specular蒙版进行选区，填充白色。<strong>Metallic完成</strong></li>
</ol>
</li>
</ul>
<h3 id="Glossiness-→-Roughness"><a href="#Glossiness-→-Roughness" class="headerlink" title="Glossiness → Roughness"></a>Glossiness → Roughness</h3><ul>
<li><strong>方法：</strong> 反相</li>
</ul>
<h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><p><strong>高光工作流转金属工作流</strong> 对比：</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/M_vs_S.png" alt="M_vs_S"></p>
<p><strong>金属工作流转高光工作流</strong> 对比：</p>
<p><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/S_vs_M.png" alt="S_vs_M"></p>
<hr>
<p>乍一看，经过两次转换（原资源为高光工作流，经过PS转为金属工作流后又转到高光工作流），表面上看起来区别不大，但其实已经有所变化，因此，需要在PS中多次尝试；</p>
<table frame="void">
    <tr>
    <td><center><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Sci-Fi Structure 24_4K_Specular.jpg" alt="Sci-Fi Structure 24_4K_Specular" width="600"></center></td>
    <td><center><img src="/2023/02/03/HPP_Art_02.7_Metallic%E4%B8%8ESpeculer%E6%B5%81%E7%A8%8B/Specular_Convert.png" alt="Specular_Convert" width="600"></center></td>
    </tr>
</table>

<blockquote id="fn_图3">
<sup>图3</sup>. 左侧为原Specular贴图，右侧为转换两次后的Specular贴图，可以看到已经丢失了许多细节；<a href="#reffn_图3" title="Jump back to footnote [图3] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>美术</tag>
        <tag>模型制作流程</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Art_2.5 模型常见问题及规范</title>
    <url>/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="a-布线合理性"><a href="#a-布线合理性" class="headerlink" title="a). 布线合理性"></a>a). 布线合理性</h1><ul>
<li><p><strong>动画角度：</strong></p>
<p>横平竖直，均匀清晰，结构线密度足够（动画线一般为三根）（动画线即关节线：脖子，肩膀，肘关节，腰，膝关节，踝关节），由于肘关节和膝关节一般是单向弯曲，所以在面数有限的情况下，也可以使用前三后二的布线</p>
</li>
<li><p><strong>模型角度：</strong></p>
<p>尽量把线使用在体现剪影上，单纯的在平面上加线是没有意义的，平面上的细节会在之后的制作中用法线来体现</p>
</li>
</ul>
<h2 id="注意事项1：多星点"><a href="#注意事项1：多星点" class="headerlink" title="注意事项1：多星点"></a>注意事项1：多星点</h2><p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/多星点.png" alt="多星点"></p>
<p><strong>多星点（度大于4的顶点）：</strong>如果是在中模阶段，减少使用多星点，因为会在细分时出现凸点的问题，<strong>如果要使用多星点，请通过布线技巧把它移动至平面处，不要让它出现在倒角边缘</strong>。</p>
<p>在模型上挖洞，且要保证都是四边面的情况下，是必然会出现五星点的，五星点不可避免，但可以优化。也有把五星点转换为假四边的方法（模型师把这种布线叫做假四边）</p>
<p><strong>五星点同样会影响点法线。</strong> 如使用了面积权重，那可能会导致点法线发生偏移。</p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/五星点_点法线.png" alt="五星点_点法线" style="zoom: 50%;"></p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/五星点_点法线2.png" alt="五星点_点法线2"></p>
<h2 id="注意事项1：预连接"><a href="#注意事项1：预连接" class="headerlink" title="注意事项1：预连接"></a>注意事项1：预连接</h2><p>对于<strong>”不在同一个平面“的四边形</strong>，不同软件的预连接是不同的。 <strong>所以如果四边形的四个点不在一个平面里时，请连接对角线</strong>，否则会出现如下图情况，这个同样会影响到之后的法线烘焙。</p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/预连.png" alt="预连"></p>
<hr>
<span id="more"></span>
<h1 id="b-UV合理性"><a href="#b-UV合理性" class="headerlink" title="b). UV合理性"></a>b). UV合理性</h1><ol>
<li><strong>UV基础规范：</strong>如果是使用UDIM（多象限UV），从【0,1】框开始依次摆放，正常情况下全部UV放于【0,1】框内，虽然UV是平铺的，但是我们常用的软件，例如SP，绘制过程中，只能在【0,1】框中绘制</li>
</ol>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/UV01.png" alt="UV01"></p>
<ol>
<li><p><strong>提高UV利用率：</strong></p>
<ul>
<li><p>打直UV</p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/打直UV.png" alt="打直UV"></p>
</li>
<li><p>可进行均匀缩放（但非均匀缩放大部分情况是不允许的）</p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/UV缩放.png" alt="UV缩放"></p>
</li>
</ul>
</li>
</ol>
<ol>
<li><p><strong>公用UV注意事项：</strong> 对于公用的UV（比如一条左右纹理相同的裤子，为了节省UV空间，使得左半边和右半边UV重叠），在烘焙时，如果有公用的UV需要挪出【0,1】框，如果不挪出去烘焙时会识别不了你需要烘哪一边作为结果，导致得到的法线贴图出现错误</p>
</li>
<li><p><strong>硬边的地方UV必须断开</strong>，否则会出现接缝</p>
</li>
<li><p>UV接缝的两侧对最好是对齐状态，特别是使用Tiling贴图时</p>
<p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/Tile.png" alt="Tile"></p>
</li>
</ol>
<h1 id="c-光滑组（软硬边）"><a href="#c-光滑组（软硬边）" class="headerlink" title="c). 光滑组（软硬边）"></a>c). 光滑组（软硬边）</h1><p><img src="/2023/02/03/HPP_Art_02.5_%E6%A8%A1%E5%9E%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%84%E8%8C%83/光滑组.png" alt="光滑组"></p>
<p>值得注意的是，<strong>在三维软件中（maya，max）导出模型法线会处于锁定状态，而导入模型后解锁法线，由于maya和max定义软硬边的方式不同（maya直接对边定义软硬边，max通过定义面的光滑组定义软硬边），会导致光滑组/软硬边丢失</strong>，可以通过插件实现在保持软硬边的情况下解锁法线，也就是先记录软硬边信息再去解锁，解锁后重新赋予即可</p>
<p>由于定义了软硬边，后期的烘焙过程中，烘焙时拾取的是你最后使用的模型的点的法线，如果你在烘焙结束后又去修改了软硬边信息，正常情况下软硬边信息不对等的地方法线会出现错误。简而言之就是，<strong>烘焙的信息是对于当前光滑组的信息，光滑组修改了就要重新烘焙。</strong></p>
<h1 id="d-检查"><a href="#d-检查" class="headerlink" title="d). 检查"></a>d). 检查</h1><p>1.该合并的点全部合完了</p>
<p>2.没有非法面，N边面等不规范面的存在</p>
<p>3.有UV，用于贴图</p>
<p>4.不出现镂空面穿帮</p>
<p>5.场景大小设置正确</p>
<p>6.拥有规范命名，方便资产整理（模型一般前缀使用“SM_”，及static mesh）</p>
<p>7.Maya模型请检查历史清除干净没有，Max模型请塌陷编辑器</p>
<p>8.模型的坐标轴归零（习惯问题，否则进入引擎后你可能法线坐标轴不在你模型的周围）</p>
<p>9.进入引擎前最好三角面化</p>
<h1 id="e-命名及存储规范"><a href="#e-命名及存储规范" class="headerlink" title="e). 命名及存储规范"></a>e). 命名及存储规范</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">规范内容</th>
<th style="text-align:center">修改建议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">文件及文件夹命名</td>
<td style="text-align:center">统一命名规范，方便管理；分类整理，不同用途的文件在不同的文件夹中（可详细定制）</td>
</tr>
<tr>
<td style="text-align:center">存放文件夹</td>
<td style="text-align:center">角色模型-/char 场景模型-/scene 道具模型-/prop 动画-/anim</td>
</tr>
<tr>
<td style="text-align:center">命名规范之前后缀（导出后）</td>
<td style="text-align:center">特效_vfx 带通道图_al 模型SM_</td>
</tr>
<tr>
<td style="text-align:center">命名规范（模型）（导出前）</td>
<td style="text-align:center">Door-red-01</td>
</tr>
<tr>
<td style="text-align:center">命名规范（贴图）（导出前）</td>
<td style="text-align:center">Door-red-01-cm/sm/nm</td>
</tr>
<tr>
<td style="text-align:center">命名规范（材质球）（导出前）</td>
<td style="text-align:center">Door-red-01-mat</td>
</tr>
<tr>
<td style="text-align:center">贴图命名</td>
<td style="text-align:center">无中文、不重名，带有A通道的导出TGA或PNG（后缀_al）</td>
</tr>
</tbody>
</table>
</div>
<h1 id="f-制作规范"><a href="#f-制作规范" class="headerlink" title="f). 制作规范"></a>f). 制作规范</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">规范内容</th>
<th style="text-align:center">修改建议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">单位</td>
<td style="text-align:center">在建模软件中正确的设置单位</td>
</tr>
<tr>
<td style="text-align:center">方向</td>
<td style="text-align:center">根据不同的使用场景（如从Max到unity）保持方向统一</td>
</tr>
<tr>
<td style="text-align:center">顶点数与面数</td>
<td style="text-align:center">建模时的数量信息可能和导出后不一致（例如1个点对应不同UV点后，会在Unity中变成2个点），注意减少面数</td>
</tr>
<tr>
<td style="text-align:center">面数控制</td>
<td style="text-align:center">设定一个具体的面数范围（针对不同的性能需求），我没经验我也不知道</td>
</tr>
<tr>
<td style="text-align:center">顶点属性</td>
<td style="text-align:center">建模中清除掉不必要的顶点属性信息（如删除没用到的UV2，UV3，只保留一套）</td>
</tr>
<tr>
<td style="text-align:center">骨骼绑定</td>
<td style="text-align:center">IK、CAT、BIP，其他Unity不认，单个物体骨骼数量限制为具体个数</td>
</tr>
<tr>
<td style="text-align:center">动画帧数</td>
<td style="text-align:center">约定每秒多少帧，一个动画多少秒</td>
</tr>
<tr>
<td style="text-align:center">贴图格式和尺寸</td>
<td style="text-align:center">文件尺寸为2的n次方、确定具体最大的贴图尺寸</td>
</tr>
<tr>
<td style="text-align:center">UV</td>
<td style="text-align:center">打直UV，提高利用率，减少不均匀的拉伸，烘焙时，共用的UV移出01框（如重叠的UV），断开硬边避免接缝，接缝处的UV两边对齐，避免Tiling时出现错误</td>
</tr>
<tr>
<td style="text-align:center">布线合理性</td>
<td style="text-align:center">低模中减少不必要的线，增加关节处的线，避免五星线出现在卡线上，连接好边再导出，注意布线导致的法线方向错误</td>
</tr>
<tr>
<td style="text-align:center">光滑组</td>
<td style="text-align:center">展UV时断开硬边，注意法线的锁定问题</td>
</tr>
</tbody>
</table>
</div>
<h1 id="g-完成导出检查"><a href="#g-完成导出检查" class="headerlink" title="g). 完成导出检查"></a>g). 完成导出检查</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">规范内容</th>
<th style="text-align:center">修改建议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">坐标归零</td>
<td style="text-align:center">制作完成后坐标轴归零，根据实际场景选择不同的零点</td>
</tr>
<tr>
<td style="text-align:center">检查模型</td>
<td style="text-align:center">检查反面、废点、废线、废面、不规范面，完成后重置变换</td>
</tr>
<tr>
<td style="text-align:center">优化模型</td>
<td style="text-align:center">删除不必要的面、合并顶点、在特定部位进行修改（关节处增加线）</td>
</tr>
<tr>
<td style="text-align:center">模型导出</td>
<td style="text-align:center">清除场景中不必要的物件，清除历史记录、塌陷编辑器</td>
</tr>
<tr>
<td style="text-align:center">贴图支持</td>
<td style="text-align:center">检查使用场景下，导出的贴图是否被支持</td>
</tr>
<tr>
<td style="text-align:center">蒙皮、动作调节</td>
<td style="text-align:center">见动画规范表（暂无）</td>
</tr>
<tr>
<td style="text-align:center">动画导出</td>
<td style="text-align:center">导出只有动画的fbx</td>
</tr>
<tr>
<td style="text-align:center">导入法线锁定</td>
<td style="text-align:center">注意重新设置软硬边或光滑组</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>美术</tag>
        <tag>模型制作流程</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Art_2.3 硬表面基础</title>
    <url>/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="a-什么是硬表面"><a href="#a-什么是硬表面" class="headerlink" title="a). 什么是硬表面"></a>a). 什么是硬表面</h1><p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/硬表面01.png" alt="硬表面01"></p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/硬表面02.png" alt="硬表面02"></p>
<ol>
<li><p><strong>从外表/建模来说：</strong>有着重工业质感、该平滑的时候平滑，该硬朗的时候硬朗。即平的平，弯的弯。</p>
</li>
<li><p><strong>从光影来说：</strong>光影变化均匀，硬朗，有经过打磨的感觉。</p>
</li>
</ol>
<p>需要区别于LowPoly，Lowpoly有种纸片的拼凑感，更像是纸膜，主要是倒角所给予硬表面的厚度。即缺少最重要的倒角。</p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/Lowpoly.jpg" alt="Lowpoly"></p>
<h1 id="b-如何制作硬表面（高模上倒角方法）"><a href="#b-如何制作硬表面（高模上倒角方法）" class="headerlink" title="b). 如何制作硬表面（高模上倒角方法）"></a>b). 如何制作硬表面（高模上倒角方法）</h1><p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/硬表面_倒角01.png" alt="硬表面_倒角01"></p>
<ul>
<li><p>在游戏中硬表面通常是使用低模进行体现。因为硬表面的质感很大程度上取决于倒角。倒角会很大的增加模型面数。对于一些较小的结构，小凹槽，实际在低模上进行倒角或者卡边做出结构是不太划算的。本质上是<strong>要让高光的呈现更加集中</strong>，如果高光过于散开，就会显得较软，漂亮的高光边会表现很强的质感。</p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/硬表面_倒角02.png" alt="硬表面_倒角02"></p>
</li>
</ul>
<h2 id="b-1-卡双线"><a href="#b-1-卡双线" class="headerlink" title="b.1). 卡双线"></a>b.1). 卡双线</h2><p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/卡双线.png" alt="卡双线"></p>
<p><strong>第一对线用于Smooth后形成倒角，第二对线用于收敛高光</strong></p>
<h2 id="b-2-方倒角"><a href="#b-2-方倒角" class="headerlink" title="b.2). 方倒角"></a>b.2). 方倒角</h2><p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/方倒角.png" alt="方倒角"></p>
<p>对两个倒角卡双线</p>
<h2 id="b-3-直接倒角"><a href="#b-3-直接倒角" class="headerlink" title="b.3). 直接倒角"></a>b.3). 直接倒角</h2><p>效果最好，可得到漂亮的高光边，但是因为增加的边数很多，过于密集，修改起来麻烦。</p>
<h2 id="b-4-光滑组（软硬边）-卡单线"><a href="#b-4-光滑组（软硬边）-卡单线" class="headerlink" title="b.4). 光滑组（软硬边）+ 卡单线"></a>b.4). 光滑组（软硬边）+ 卡单线</h2><p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/光滑组00.png" alt="光滑组00"></p>
<p>通过将两个面设为同一光滑组（Maya里则将连接边设为软边）+ 两边各卡一条线用于收敛高光区域</p>
<h1 id="光滑组的本质：-改变点法线"><a href="#光滑组的本质：-改变点法线" class="headerlink" title="光滑组的本质： 改变点法线"></a>光滑组的本质： <font color="red">改变点法线</font></h1><p>光滑组的本质是<strong>改变点法线</strong>，进而影响面法线，进而影响三角线遍历中Normal的插值；</p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/Hard_VertexNormal.png" alt="Hard_VertexNormal"></p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/Soft_VertexNormal.png" alt="Soft_VertexNormal"></p>
<span id="more"></span>
<h1 id="c-烘焙（低模）"><a href="#c-烘焙（低模）" class="headerlink" title="c). 烘焙（低模）"></a>c). 烘焙（低模）</h1><ul>
<li><strong>事先准备：</strong><ul>
<li>准备好低模（在中模的基础上简化）</li>
<li>展UV</li>
<li>分好光滑组（软硬边）</li>
</ul>
</li>
</ul>
<h2 id="c-1-烘焙过程中，光滑组注意事项"><a href="#c-1-烘焙过程中，光滑组注意事项" class="headerlink" title="c.1). 烘焙过程中，光滑组注意事项"></a>c.1). 烘焙过程中，光滑组注意事项</h2><p>对于倒角的部分，烘焙前需要设置好光滑组，对于硬边需要断开UV，否则会出现接缝；</p>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/低模_光滑组.png" alt="低模_光滑组"></p>
<ul>
<li><strong>即：</strong>对于<strong>需要烘焙的低模</strong>，同一光滑组（软边），UV需相连；对于不同光滑组（硬边），UV需断开且隔开一定距离</li>
</ul>
<hr>
<p><img src="/2023/02/03/HPP_Art_02.3_%E7%A1%AC%E8%A1%A8%E9%9D%A2%E5%9F%BA%E7%A1%80/低模_光滑组02.png" alt="低模_光滑组02"></p>
<ul>
<li>如低模中，本需硬边烘焙的Normal使用了软边，那烘焙时会通过用反相的Normal把Normal复原（在法线本应改在（0,0,1）时）</li>
</ul>
<h1 id="d-硬表面其他制作方法"><a href="#d-硬表面其他制作方法" class="headerlink" title="d). 硬表面其他制作方法"></a>d). 硬表面其他制作方法</h1><p>假高模</p>
<p>用图片转normal</p>
<p>在SP里面印normal</p>
<p>使用OpenSubdiv</p>
<p>使用ZBrush做倒角</p>
<p>使用点法线</p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>美术</tag>
        <tag>模型制作流程</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP_Art_1 美术理论基础(角色/场景设计精要)</title>
    <url>/2023/02/03/HPP_Art_01_%E7%BE%8E%E6%9C%AF%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/pfo9oz">https://www.yuque.com/sugelameiyoudi-jadcc/okgm7e/pfo9oz</a></p>
]]></content>
      <categories>
        <category>百人计划</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>百人计划</tag>
        <tag>美术</tag>
        <tag>美术理论</tag>
      </tags>
  </entry>
  <entry>
    <title>相机概述</title>
    <url>/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在搭建完整的PBR环境时，用到了挺多相机的知识。借此机会重新温习了下大一写摄影技术的词条，同时为了适应博客删掉了很多不必要的内容。</p>
<p>不过既然是大一写的，想必难免会有一些疏漏，而且当初的目标形式是词条，相应知识也不会过于深入，但大体上还是没问题的。</p>
<h1 id="a-摄影机成像原理"><a href="#a-摄影机成像原理" class="headerlink" title="a). 摄影机成像原理"></a>a). 摄影机成像原理</h1><h2 id="一、小孔成像"><a href="#一、小孔成像" class="headerlink" title="一、小孔成像"></a>一、小孔成像</h2><p>​        光线沿直线传播。用一个带小孔的板遮挡在物体与成像面间，物体反射的光线经过小孔，在成像面上形成倒立的像。在一定范围内，小孔越小，成像越清晰，但小孔过小会导致发生衍射，使成像模糊。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机成像原理_小孔成像原理-16767225475721.png" alt="摄影技术_摄影机成像原理_小孔成像原理" style="zoom: 50%;"></p>
<span id="more"></span>
<h2 id="二、透镜成像"><a href="#二、透镜成像" class="headerlink" title="二、透镜成像"></a>二、透镜成像</h2><h3 id="1-凸透镜-正透镜、汇聚透镜"><a href="#1-凸透镜-正透镜、汇聚透镜" class="headerlink" title="1. 凸透镜(正透镜、汇聚透镜)"></a>1. 凸透镜(正透镜、汇聚透镜)</h3><p>​        中间厚、两边薄的透镜。平行于光轴的方向入射的光线会汇聚于光轴上的一点，这个点称为焦点，焦点到透镜中心点的距离称为焦距。</p>
<p> <img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机成像原理_透镜成像_凸透镜（正透镜、汇聚透镜）-16767225475732.png" alt="摄影技术_摄影机成像原理_透镜成像_凸透镜（正透镜、汇聚透镜）" style="zoom:67%;"></p>
<h3 id="2-凹透镜-负透镜、发散透镜"><a href="#2-凹透镜-负透镜、发散透镜" class="headerlink" title="2. 凹透镜(负透镜、发散透镜)"></a>2. 凹透镜(负透镜、发散透镜)</h3><p>​        中间薄、两边厚的透镜。平行于光轴的方向入射的光线穿过镜身后会发散。发散后的光线的反向延长线会交于光轴上的一点，这个点称为虚焦点，虚焦点到透镜中心点的距离的负值为凹透镜的焦距。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机成像原理_透镜成像_凹透镜（负透镜、发散透镜）-16767225475733.png" alt="摄影技术_摄影机成像原理_透镜成像_凹透镜（负透镜、发散透镜）" style="zoom:67%;"></p>
<h1 id="b-光学镜头"><a href="#b-光学镜头" class="headerlink" title="b). 光学镜头"></a>b). 光学镜头</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>​        由一块或多块(一般在三块以上)光学玻璃组成的透镜组，用于使物体成像在照相胶片、电子传感器或其他能以化学或电子方式储存图象的媒体上。光学镜头也称摄影物镜。</p>
<h2 id="二、构造"><a href="#二、构造" class="headerlink" title="二、构造"></a>二、构造</h2><h3 id="1-镜头筒"><a href="#1-镜头筒" class="headerlink" title="1. 镜头筒"></a>1. 镜头筒</h3><p>​        摄影机物镜镜片的支撑体。镜头筒上附有调节光圈、焦距等参数的装置。现代变焦镜头具有多重的镜头组合和复杂的手动或自动调节系统。这些调节装置设计得越精细，使用者操作起来就越方便。[1]</p>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:144.</p>
<h3 id="2-镜片"><a href="#2-镜片" class="headerlink" title="2. 镜片"></a>2. 镜片</h3><p>​        构成物镜成像系统的光学玻璃。</p>
<h2 id="三、镜头分类"><a href="#三、镜头分类" class="headerlink" title="三、镜头分类"></a>三、镜头分类</h2><p>​        镜头按是否具备变焦能力，可分为变焦镜头和定焦镜头。按焦距的长短(视角的大小)，可分为远摄镜头、标准镜头、广角镜头、鱼眼镜头等。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_镜头分类.jpg" alt="摄影技术_摄影机的基本结构_光学镜头_镜头分类" style="zoom:67%;"></p>
<h3 id="1-标准镜头"><a href="#1-标准镜头" class="headerlink" title="1. 标准镜头"></a>1. 标准镜头</h3><p>​        学名为标准摄影物镜。指接近人眼观察视角的镜头。</p>
<p>​        在摄影中，标准镜头的焦距大致与底片或传感器对角线的长度大致相等，其视角约为53度。如将由标准镜头拍摄出的图像，放置于观察者前方约等于图像对角线长度的距离，观察者看到的图像的大小将会与在拍摄地用肉眼观察到的真实场景相同。对于全画幅相机，标准镜头焦距通常为50mm。</p>
<p>​        在电影中，电影的标准镜头的镜头焦距近似于图像对角线的2倍。SMPTE(the Society of Motion Picture and Television Engineers，电影和电视工程师协会)在几乎一个世纪前制定了此标准。他们认为这符合当时人们的观影习惯，可给观众席中央(处于屏幕和投影仪之间的位置)的观众提供更自然的视野。[1]这是因为人们对电影和照片有着不同的观看习惯，在当时观众观看电影时，与电影屏幕的距离通常是电影屏幕对角线两倍。</p>
<p>[1] 参考自<a href="https://neiloseman.com/the-normal-lens/">https://neiloseman.com/the-normal-lens/</a></p>
<h3 id="2-长焦镜头"><a href="#2-长焦镜头" class="headerlink" title="2.长焦镜头"></a>2.长焦镜头</h3><p>​        又称长焦距镜头、远摄镜头、望远镜头。焦距大于标准镜头焦距的镜头。具有焦距长、视角小、景深小的特点。</p>
<h3 id="3-广角镜头"><a href="#3-广角镜头" class="headerlink" title="3.广角镜头"></a>3.广角镜头</h3><p>​        又称短焦镜头。焦距小于标准镜头焦距的镜头。具有焦距短、视角大、景深大的特点。根据视场角大小可分为普通广角镜头和超广角镜头。</p>
<h3 id="4-鱼眼镜头"><a href="#4-鱼眼镜头" class="headerlink" title="4.鱼眼镜头"></a>4.鱼眼镜头</h3><p>​        又称全景摄影镜。视角为180°左右到220°。全画幅中，焦距在16mm及以下的镜头通常可被称为鱼眼镜头。</p>
<h2 id="四、镜头卡口-表格来自Wikipedia"><a href="#四、镜头卡口-表格来自Wikipedia" class="headerlink" title="四、镜头卡口(表格来自Wikipedia)"></a>四、镜头卡口(表格来自Wikipedia)</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">机身像场定位距离（mm）</th>
<th style="text-align:center">卡口环直径（mm）</th>
<th style="text-align:center">卡口环类型</th>
<th style="text-align:center">旋转方向</th>
<th style="text-align:center">常见相机品牌</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4/3</td>
<td style="text-align:center">38.6</td>
<td style="text-align:center">46.5</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/奧林巴斯">奥林巴斯</a>、<a href="https://zh.wikipedia.org/wiki/松下">松下</a>、<a href="https://zh.wikipedia.org/wiki/Leica">Leica</a></td>
</tr>
<tr>
<td style="text-align:center">AR</td>
<td style="text-align:center">40.5</td>
<td style="text-align:center">47.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/柯尼卡">柯尼卡</a></td>
</tr>
<tr>
<td style="text-align:center">FD/FL</td>
<td style="text-align:center">42.1</td>
<td style="text-align:center">48.0</td>
<td style="text-align:center">外三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/佳能">佳能</a>T、A、F</td>
</tr>
<tr>
<td style="text-align:center">MD/MC</td>
<td style="text-align:center">43.5</td>
<td style="text-align:center">45.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/美能达">美能达</a>、海鸥</td>
</tr>
<tr>
<td style="text-align:center">AX</td>
<td style="text-align:center">43.5</td>
<td style="text-align:center">49.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center">Fujica</td>
</tr>
<tr>
<td style="text-align:center">EF</td>
<td style="text-align:center">44.0</td>
<td style="text-align:center">54.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/佳能EOS系列">佳能EOS系列</a></td>
</tr>
<tr>
<td style="text-align:center">SA</td>
<td style="text-align:center">44.0</td>
<td style="text-align:center">48.5</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/适马">适马</a></td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">44.5</td>
<td style="text-align:center">50.0</td>
<td style="text-align:center">内外三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/索尼">索尼</a>、<a href="https://zh.wikipedia.org/wiki/柯尼卡美能达">柯尼卡美能达</a>、美能达AF</td>
</tr>
<tr>
<td style="text-align:center">C/Y</td>
<td style="text-align:center">45.5</td>
<td style="text-align:center">48.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/Contax">Contax</a>、<a href="https://zh.wikipedia.org/w/index.php?title=Yashica&amp;action=edit&amp;redlink=1">Yashica</a>、凤凰</td>
</tr>
<tr>
<td style="text-align:center">Kyocera/Yashica AF</td>
<td style="text-align:center">45.5</td>
<td style="text-align:center">50.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/Kyocera">Kyocera</a>、Yashica AF</td>
</tr>
<tr>
<td style="text-align:center">K/PK/RK</td>
<td style="text-align:center">45.5</td>
<td style="text-align:center">48.5</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/賓得">宾得</a>、<a href="https://zh.wikipedia.org/wiki/理光">理光</a>、Chinon、Cosina、凤凰</td>
</tr>
<tr>
<td style="text-align:center">M42</td>
<td style="text-align:center">45.5</td>
<td style="text-align:center">50.0</td>
<td style="text-align:center">螺纹</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Mamiya</td>
<td style="text-align:center">45.5</td>
<td style="text-align:center">49.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center">Mamiya NC/ZE系列照相机</td>
</tr>
<tr>
<td style="text-align:center">OM</td>
<td style="text-align:center">46.0</td>
<td style="text-align:center">47.5</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center">奥林巴斯</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">46.5</td>
<td style="text-align:center">47.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/尼康">尼康</a>、凤凰</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">46.9</td>
<td style="text-align:center">49.0</td>
<td style="text-align:center">螺纹</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center">Leica R</td>
</tr>
<tr>
<td style="text-align:center">Kyocera Contax-N</td>
<td style="text-align:center">48.0</td>
<td style="text-align:center">55.0</td>
<td style="text-align:center">内三爪</td>
<td style="text-align:center">顺时针</td>
<td style="text-align:center">Contax N</td>
</tr>
</tbody>
</table>
</div>
<h2 id="五、镜头的光圈"><a href="#五、镜头的光圈" class="headerlink" title="五、镜头的光圈"></a>五、镜头的光圈</h2><p>​        系指摄影物镜中的可变光阑，由若干薄片构成，用于控制镜头的孔径大小，与快门协同控制进光量。照相机和摄影机中都装有可变的孔径光阑，俗称光圈。[1]</p>
<p>​        光圈的大小用F值或T值表示，普通照相机镜头通常使用F值，电影镜头则使用T值</p>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:146.</p>
<h3 id="1-F值光圈系数"><a href="#1-F值光圈系数" class="headerlink" title="1. F值光圈系数"></a>1. F值光圈系数</h3><p>​        又称F光圈数。F值等于相对孔径的倒数，即镜头焦距与摄影物镜的入瞳之比。这样定义的原因是，在忽略镜头玻璃对光线的吸收的情况下，快门速度不变，F值恒定可保持曝光量(像平面照度与曝光时间的乘积)相等，而不受镜头焦距影响。</p>
<script type="math/tex; mode=display">
F值={f\over D}，其中f为镜头焦距，D为入瞳孔径</script><p>​        国际通用的F值为根号2的等比级数分级，即1、1.4、2、2.8、4、5.6、8、11、16、22。两级之间曝光量相差一倍。F值越大，相对孔径越小，通光越少；F值越小，相对孔径越大，通光越多。</p>
<h3 id="2-T值光圈系数"><a href="#2-T值光圈系数" class="headerlink" title="2. T值光圈系数"></a>2. T值光圈系数</h3><p>​        T值表征摄影物镜实际透光能力的参数，简称T光圈或T值。T值等于相对孔径的倒数除以物镜透光率的开平方。理想条件下，即一个镜头的透光率为100%时，其T值与F值相等。但在实际情况中，同一个镜头的T值一定大于它的F值。</p>
<p>​        </p>
<script type="math/tex; mode=display">
T值={F值光圈系数\over\sqrt{物镜透光率}}</script><p>​        一般在专业摄影机镜头上，F值用白色刻度标明，T值用红色刻度标明。</p>
<h2 id="六、模糊圈与景深"><a href="#六、模糊圈与景深" class="headerlink" title="六、模糊圈与景深"></a>六、模糊圈与景深</h2><h3 id="1-弥散圆-Circle-of-Confusion-CoC"><a href="#1-弥散圆-Circle-of-Confusion-CoC" class="headerlink" title="1. 弥散圆(Circle of Confusion, CoC)"></a>1. 弥散圆(Circle of Confusion, CoC)</h3><p>​        也称模糊圆。</p>
<p>​        点光源发射出的光线经过镜头折射汇聚于一点，经过此点放置一块垂直于光轴的屏幕，并沿平行于光轴的方向移动点光源一定距离。此时，点光源在屏幕上会呈现出一个可辨认为圆形的像，这个圆形的像被称为<strong>弥散圆</strong>。当点光源向最初始的位置移动时，弥散圆逐渐变小，当它小到一定程度而人眼不可辨认时，我们将其视为一个清晰的点像，此时弥散圆被称作<strong>容许弥散圆</strong>（<strong>最小弥散圆</strong>）。        </p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_模糊圈与景深_模糊圈.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       图片引自Wikipedia      </div> </center>

<p>​        <strong>传感器或底片上最小弥散圆直径与拍摄照片的机器的传感器或底片对角线的长度一般成正比。</strong>假设在我们正前方距离<strong><em>L</em></strong>的地方放置一个屏幕，屏幕对角线长度为<strong><em>a</em></strong>，这种情况我们观看屏幕的最小弥散圆直径为<strong><em>d</em></strong>（或可引入人眼最小分辨角<strong><em>θ</em></strong>，计算得最小弥散圆直径为2L*tan(θ/2)）。摄影机的传感器对角线长度为<strong><em>b</em></strong>,将摄影机拍得的照片投影到屏幕上，照片的放大倍数<strong><em>K</em></strong>=<strong><em>a/b</em></strong>，那传感器上最小弥散圆直径就为<strong><em>d/K</em></strong>,即<strong><em>b\</em>d/a*</strong>，其中<strong><em>d/a</em></strong>为常数。但由于最小弥散圆直径还受许多主客观因素影响，不同相机厂商所给定的弥散圆直径会略微不同。</p>
<h3 id="2-景深"><a href="#2-景深" class="headerlink" title="2. 景深"></a>2. 景深</h3><p>​        景深是一个空间范围，凡在此范围内的被摄物体都能够在成像元件上形成足够清晰的影像。</p>
<p>​        在临界焦点前后两侧各存在一个区域，在这两个区域合起来的区域范围内，被摄物体上各个点在影片上都能呈现为等于或小于最小弥散圆的一个圆，这个区域称之为景深。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_模糊圈与景深_景深.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       图片引自http://www2.xitek.com/info/showarticle.php?id=1148      </div> </center>

<p>​        聚焦的被摄物的前后景深并非是一样的，一般估计后景深为前景深的两倍。因此，如果两个物体距离镜头远近不同，要想使两者都再现得清晰，应当把聚焦点取在从较近物体算到较远物体距离1/3处。[1]</p>
<p>​        景深随焦距、对焦距离、光圈值的变化而变化。焦距和对焦距离不变时，光圈值越小，即光孔越大，景深越浅。</p>
<p>​        附景深计算公式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>δ</td>
<td>容许弥散圆直径</td>
</tr>
<tr>
<td>f</td>
<td>镜头焦距</td>
</tr>
<tr>
<td>F</td>
<td>镜头的拍摄光圈值</td>
</tr>
<tr>
<td>L</td>
<td>对焦距离</td>
</tr>
<tr>
<td>ΔL1</td>
<td>前景深</td>
</tr>
<tr>
<td>ΔL2</td>
<td>后景深</td>
</tr>
<tr>
<td>ΔL</td>
<td>景深</td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
ΔL1={FδL^2\over f^2+FδL},ΔL2={FδL^2\over f^2-FδL}</script><script type="math/tex; mode=display">
ΔL={2f^2FδL^2\over f^4-F^2δ^2L^2}</script><p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:147.</p>
<h2 id="七、超焦距"><a href="#七、超焦距" class="headerlink" title="七、超焦距"></a>七、超焦距</h2><p>​        给定光圈和焦距，逐渐调大对焦距离，当景深后界被扩展到无穷远时，景深前界到镜头中心点的距离即为超焦距。当调焦到超焦距时，从超焦距的二分之一处到无穷远的景物都可在感光元件上呈现清晰的像。超焦距计算公式：</p>
<script type="math/tex; mode=display">
H={f^2\over FE},f为焦距，F为光圈系数，E为容许弥散圆直径</script><h2 id="八、沙姆定律"><a href="#八、沙姆定律" class="headerlink" title="八、沙姆定律"></a>八、沙姆定律</h2><p>​        沙姆定律最初是由奥地利军官沙姆发现的，用于航空摄影中校正透视变形。沙姆定律的内容为：如果像平面与镜头平面不平行，而是交与一条直线<strong><em>l</em></strong>，那么能清晰成像于像平面上的物平面(即合焦平面)同样经过直线<strong><em>l</em></strong>。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_沙姆定律1.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       图片引自Wikipedia      </div> </center>

<p>​        沙姆定律常用于移轴摄影。(图片引自<a href="https://www.smashingmagazine.com/2008/11/beautiful-examples-of-tilt-shift-photography/">50 Beautiful Examples Of Tilt-Shift Photography</a>)</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_沙姆定律2.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       移轴摄影      </div> </center>

<h2 id="九、主点和主面-引自Wikipedia"><a href="#九、主点和主面-引自Wikipedia" class="headerlink" title="九、主点和主面(引自Wikipedia)"></a>九、主点和主面(引自Wikipedia)</h2><p>​        主点(Principal points)，是厚透镜光轴上的一对共轭点。平行于光轴的一条入射光线穿过透镜后的折射光线会经过焦点,两条光线之延长线会相交于一点,<strong>所有这类的交点(</strong>主点为其中特例<strong>)构成一个曲面</strong>。</p>
<p>​        就接近光轴附近而言，该曲面近似一个平面，称之为<strong>主面</strong>(Principal plane)主面与光轴的交点,即为主点。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_主点.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       P 为前侧主点、 P' 为后侧主点      </div> </center>





<h2 id="十、节点"><a href="#十、节点" class="headerlink" title="十、节点"></a>十、节点</h2><p>​        节点(Nodal points)，是厚透镜光轴上的一对共轭点。一条朝节点方向射入的光线，经透镜折射后的折射光线的反向延长线经过另一条节点，且两条光线于光轴所成的夹角大小相等(角向放大率为+1)。如果光学系统两侧的介质相同(如空气)，则前后节点分别与前后主点重合。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_节点1.png" width="30%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">       N, N' 分别是厚透镜的前后节点      </div> </center>

<p>​        当相机绕着镜头节点旋转时，物体的透视关系不会发生变化，利用此特点，我们在拼接照片时可以保证拼接的精度。定焦镜头只有一个固定的节点，而变焦镜头在不同的焦段有不同的节点。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_节点2.png" width="66%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      当相机绕着镜头节点旋转时，物体的透视关系不会发生变化。图片引自http://www.xiletuphoto.com/zx/20160928/36.html      </div> </center>

<p>​        </p>
<h2 id="十一、MTF曲线"><a href="#十一、MTF曲线" class="headerlink" title="十一、MTF曲线"></a>十一、MTF曲线</h2><p>​        MTF(Modulation Transfer Function,调制传递函数，模量传递函数)是衡量镜头性能的一个重要指标，可用于评价镜头还原调制度(对比度)的能力。</p>
<p>​        MTF所表示的是镜头实际成像与理想成像之间调制度之比随空间频率和像场位置变化的函数。</p>
<script type="math/tex; mode=display">
MTF={输出图像调制度\over输入图像调制度}</script><h3 id="1-调制度"><a href="#1-调制度" class="headerlink" title="1. 调制度"></a>1. 调制度</h3><p>​        在研究摄影镜头成像质量时，调制度等于景物最大亮度和景物最小亮度之差于景物最大亮度和景物最小亮度之和的比值。</p>
<script type="math/tex; mode=display">
M={L_{max}-L_{min}\over L_{max}+L_{min}}</script><h3 id="2-像场-待补充"><a href="#2-像场-待补充" class="headerlink" title="2. 像场(待补充)"></a>2. 像场(待补充)</h3><h3 id="3-MTF曲线图-图片待补充"><a href="#3-MTF曲线图-图片待补充" class="headerlink" title="3. MTF曲线图(图片待补充)"></a>3. MTF曲线图(图片待补充)</h3><p>​        MTF曲线图的纵坐标为调制传递函数值，根据横坐标的不同最主要分为两种类型，即以空间频率为横坐标绘制的频幅曲线和以到像场中心的距离为横坐标绘制的场幅曲线。</p>
<h2 id="十二、透镜像差"><a href="#十二、透镜像差" class="headerlink" title="十二、透镜像差"></a>十二、透镜像差</h2><p>​        在光学系统中，<strong>像差</strong>指实际成像与理想成像的偏差。普通的像差有如下几种：</p>
<h3 id="1-球面像差"><a href="#1-球面像差" class="headerlink" title="1. 球面像差"></a>1. 球面像差</h3><p>​        简称球面差、球差，镜头不能使被摄物体中一个光点重现为一个点像。[1]这是因近轴光线和远轴光线经过透镜后折射的程度不同而造成的。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_透镜像差_球面像差1.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自https://en.wikipedia.org/wiki/Spherical_aberration      </div> </center>

<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:148.</p>
<h3 id="2-像散"><a href="#2-像散" class="headerlink" title="2. 像散"></a>2. 像散</h3><p>​        发光物体不处于主光轴时，子午方向入射光线与和弧矢方向的入射光线汇聚于不同平面。像散常会使一个点光源在画面上形成一个十字。它表现为在分辨率(解像力)测试标板上的可分辨的横竖线条的不同。[1]</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_透镜像差_像散.png" width="33%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      蓝色子午方向入射光线经过透镜汇聚于S1，红色弧矢方向入射光线经透镜汇聚于T1    图片引自https://zh.wikipedia.org/wiki/%E5%83%8F%E6%95%A3      </div> </center>

<h3 id="3-像场弯曲"><a href="#3-像场弯曲" class="headerlink" title="3. 像场弯曲"></a>3. 像场弯曲</h3><p>​        简称场曲，垂直于主光轴的被摄物体经过透镜折射后，最清晰的实像面不是一个平面，而是一个弯曲的曲面。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_透镜像差_像场弯曲.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自Wikipedia      </div> </center>

<h3 id="4-彗星像差"><a href="#4-彗星像差" class="headerlink" title="4. 彗星像差"></a>4. 彗星像差</h3><p>​        简称彗差，不处于主光轴上的点光源经过透镜后成像变形，产生出类似彗星的尾部。且点光源离视野中心越远，慧差越明显。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_透镜像差_彗星像差.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自Wikipedia      </div> </center>

<h3 id="5-色差"><a href="#5-色差" class="headerlink" title="5. 色差"></a>5. 色差</h3><p>​        不同波长( 不同颜色)的光线在同一介质中折射率不同，使镜头无法将不同波长的色光汇聚于一点，从而形成色差。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_摄影机的基本结构_光学镜头_透镜像差_色差.png" width="40%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自Wikipedia      </div> </center>

<h2 id="十三、电影镜头与相机镜头的几个主要区别"><a href="#十三、电影镜头与相机镜头的几个主要区别" class="headerlink" title="十三、电影镜头与相机镜头的几个主要区别"></a>十三、电影镜头与相机镜头的几个主要区别</h2><h3 id="1-对焦"><a href="#1-对焦" class="headerlink" title="1. 对焦"></a>1. 对焦</h3><h3 id="2-无极光圈"><a href="#2-无极光圈" class="headerlink" title="2. 无极光圈"></a>2. 无极光圈</h3><h3 id="3-齐焦-parfocal"><a href="#3-齐焦-parfocal" class="headerlink" title="3. 齐焦(parfocal)"></a>3. 齐焦(parfocal)</h3><h3 id="4-呼吸效应的控制"><a href="#4-呼吸效应的控制" class="headerlink" title="4. 呼吸效应的控制"></a>4. 呼吸效应的控制</h3><h1 id="c-快门"><a href="#c-快门" class="headerlink" title="c). 快门"></a>c). 快门</h1><p>​        又称为<strong>光闸</strong>，是照相机中控制曝光时间的重要部件。快门时间越短，即快门速度越快，曝光时间越短。总体可分为机械快门和电子快门。一些电影摄影机使用的快门称为旋转快门，又称叶子板。</p>
<h2 id="一、机械快门"><a href="#一、机械快门" class="headerlink" title="一、机械快门"></a>一、机械快门</h2><p>根据机械快门在相机中的位置，可分为：</p>
<h3 id="1-镜前快门"><a href="#1-镜前快门" class="headerlink" title="1. 镜前快门"></a>1. 镜前快门</h3><p>​        最早的快门就是镜前盖。由于早期感光材料的效率低，需要的曝光时间较长，在当时直接采用摘除镜头盖进行曝光的方法。后来改进为气动二叶快门，多用于微型相机。</p>
<h3 id="2-镜间快门"><a href="#2-镜间快门" class="headerlink" title="2. 镜间快门"></a>2. 镜间快门</h3><p>​        结构与光圈类似，由金属叶片组成，位于镜头内部，现今不少中画幅及大画幅相机仍采用镜间快门。使用镜间快门可减小拍摄时的相机震动，防止果冻效应，且在所有快门速度下都可做到闪灯同步，但缺点是由于采用的是弹簧结构，受弹簧特性影响最高快门速度较低(一般不超过1/500)，且每一个镜头都需一个快门。    </p>
<h3 id="3-镜后快门"><a href="#3-镜后快门" class="headerlink" title="3. 镜后快门"></a>3. 镜后快门</h3><p>​        结构与镜间快门类似，较镜间快门位置更靠后。</p>
<h3 id="4-焦平面快门"><a href="#4-焦平面快门" class="headerlink" title="4. 焦平面快门"></a>4. 焦平面快门</h3><p>​        位于胶片或感光元件前方，接近焦平面，因此得名。根据运动方向不同，焦平面快门可分为纵走式和横走式。现今绝大多数单反相机和微单采用焦平面快门。焦平面快门由两块快门帘组成，分别为前帘和后帘。在大多数单反相机中，单个帘幕越过胶片的时间最短时间约为1/60秒或1/125秒。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_快门_机械快门_焦平面快门1.gif" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      单反相机中焦平面快门的工作过程 图片引自Wikipedia      </div> </center>

<p>​        为了实现更高的快门速度，焦平面快门采用了逐行曝光的方法。以纵走式为例，对于单反相机，在单反相机未拍照时，反光镜降落，焦平面快门闭合。按下快门后，反光镜升起，后帘上升，之后前帘下降，开始曝光，在前帘下降一段距离后后帘下降，此时前帘和后帘之间的区域进行曝光。待所有像素曝光完成后前、后帘回到初始位置。对于微单，微单未拍照时，焦平面快门为了电子取景处于开放状态。按下快门后，前帘上升，待传感器上电荷清空后前帘下降，开始曝光，在前帘下降一段距离后后帘下降。通过逐行曝光的方法，焦平面快门甚至可实现1/16000秒的快门速度。但采用逐行曝光的方法也带来了果冻效应，以及搭配高速闪光灯时闪光同步的问题。（一些相机在不使用闪光灯高速同步时，会限制最高快门速度）</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_快门_机械快门_焦平面快门2.gif" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      不同快门速度下焦平面快门的表现 图片引自Wikipedia      </div> </center>

<h2 id="二、电子快门"><a href="#二、电子快门" class="headerlink" title="二、电子快门"></a>二、电子快门</h2><p>​        在胶片时代，电子快门是指驱动动力由马达或电磁铁提供，或是快门速度由石英计时电路来控制的快门。现今，电子快门多指<strong>电子断流快门</strong>，它是“以电子方式控制摄像机曝光时间的装置”。以下电子快门均指<strong>电子断流快门</strong>。电子快门不存在任何机械结构，本质上是电路控制，控制传感器的积分时间。在传感器通电时受到光信号可积累电荷，断电时受到光信号不可积累电荷。</p>
<p>​        因此，使用电子快门时，可以得到比机械快门大得多的快门速度，并不会引起机器震动，可实现静音拍摄。但由于缺乏机械遮光，容易产生暗电流校准不良，导致成片曝光错误。为了缓解这种情况，常会搭配电子元件进行“电荷清零”。但“电荷清零”会导致一定的快门延时。电子快门常用于手机和部分数码相机。</p>
<p>​        电子快门通常有两种快门方式：卷帘式快门(Rolling Shutter)和全局式快门(Global Shutter)。</p>
<h3 id="3-卷帘式快门-Rolling-Shutter"><a href="#3-卷帘式快门-Rolling-Shutter" class="headerlink" title="3. 卷帘式快门(Rolling Shutter)"></a>3. 卷帘式快门(Rolling Shutter)</h3><p>​        通过快速扫描来捕获画面的技术，画面中的部分并不是在同一个瞬间记录的。</p>
<p>​        卷帘式快门于全局快门不同，它是通过控制芯片逐行曝光的方式实现的。卷帘式快门是通过通断电控制传感器，使其不同部分在不同时间下对光的敏感度不同。逐行进行曝光，直至所有像素点都被曝光。一般情况为1/48至1/60秒。[1]</p>
<p>​        由于使用卷帘式快门时，其扫描速度比焦平面快门慢，常会引起相较于焦平面快门更严重的果冻效应。卷帘式快门多用于CMOS。</p>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:142.</p>
<h3 id="4-全局式快门-Global-Shutter"><a href="#4-全局式快门-Global-Shutter" class="headerlink" title="4. 全局式快门(Global Shutter)"></a>4. 全局式快门(Global Shutter)</h3><p>​        全局快门可使整幅图片在同一时间曝光。传感器所有像素点在同一时间收集光线，积累电荷，使曝光同时开始。曝光时间到时，传感器断电，同时停止曝光。</p>
<p>​        使用全局快门可防止果冻效应。全局快门多用于CCD，但现今也有使用全局快门的CMOS出现。</p>
<h2 id="三、电子前帘快门"><a href="#三、电子前帘快门" class="headerlink" title="三、电子前帘快门"></a>三、电子前帘快门</h2><p>​        通过控制芯片来模拟前帘，并使用机械后帘。电子前帘快门通过类似于卷帘式快门的方式开始逐行曝光，并用机械后帘结束曝光。相比于卷帘式快门，它的果冻效应更轻微；相比于焦平面快门，它造成的机器震动更小。</p>
<h2 id="四、叶子板（图片待补充）"><a href="#四、叶子板（图片待补充）" class="headerlink" title="四、叶子板（图片待补充）"></a>四、叶子板（图片待补充）</h2><p>​        又称旋转快门。在以前使用胶片拍摄时，一秒会记录24帧，即一秒曝光24格胶片。为了控制曝光时间，并防止胶片移动时持续曝光形成拖尾，胶片摄影机引入了叶子板。叶子板为有着一定开角的圆形，通过不断的旋转控制胶片曝光的时长。当开口移动到胶片前方时，胶片进行曝光。当开口移开后，胶片停止曝光，并前进一格。</p>
<p>​        通过控制叶子板的开角大小，可调整胶片的曝光时间。例如，在拍摄24帧每秒时，当叶子板开角为180°时，叶子板旋转一周的时间内有1/2的时间胶片进行曝光，因此胶片曝光时间为1/48。</p>
<p>​        一些数字摄影机也采用机械式叶子板作为快门，如ARRI ALEXA Studio。</p>
<h2 id="五、快门速度与快门角度"><a href="#五、快门速度与快门角度" class="headerlink" title="五、快门速度与快门角度"></a>五、快门速度与快门角度</h2><h3 id="1-快门速度"><a href="#1-快门速度" class="headerlink" title="1. 快门速度"></a>1. 快门速度</h3><p>​        快门速度是摄影中用于表达曝光时间的术语，表示胶片或传感器整体进行曝光的等效时间。光圈一定时，总的曝光量和快门速度呈正比。对待运动物体时，高速的快门可凝固具有一定速度的物体，减少画面中的运动模糊；慢速的快门则可使运动模糊更明显。常见的快门速度标准有：1，1/2，1/4，1/8，1/15，1/30，1/60，1/125，1/250，1/500，1/1000，1/2000。</p>
<p>​        在进行长时间曝光时，除呈数值的快门速度外，还有两个另外的设置：</p>
<ul>
<li><p>B门：快门按下后开始曝光，释放后结束曝光。</p>
</li>
<li><p>T门：快门按下开始曝光，再次按下结束曝光。</p>
</li>
</ul>
<h3 id="2-快门角度"><a href="#2-快门角度" class="headerlink" title="2. 快门角度"></a>2. 快门角度</h3><p>​        在以前，快门角度是在胶片摄像机中用于表达曝光时间的术语，即用叶子板的开角角度表示曝光时间。但现今一些不使用叶子板的数字摄像机仍用快门角度来表达曝光时间，如BMPCC 4K。</p>
<p>​        快门角度与快门速度的转换公式：</p>
<script type="math/tex; mode=display">
快门速度={快门角度\over360°}×帧率</script><h1 id="d-电子感光器件"><a href="#d-电子感光器件" class="headerlink" title="d). 电子感光器件"></a>d). 电子感光器件</h1><p>​        又称作光电成像器件(photo-electronic imaging device)。是利用光电效应将景物或图像转换为可进行记录、传输、存储、显示以及处理等操作的器件系列的总称。或简述为完成图像信息光电转换的功能器件。</p>
<p>​        光电成像器件的类型众多，在影视技术应用中主要有：</p>
<ul>
<li><p>固体图像传感器，包括CCD图像传感器和CMOS图像传感器；</p>
</li>
<li><p>摄像管，包括光电发射摄像管和光电导摄像管。[1]</p>
<p>下面给出CCD和CMOS中几个具有相似工作原理的工作环节：</p>
</li>
</ul>
<h2 id="一、光电转换"><a href="#一、光电转换" class="headerlink" title="一、光电转换"></a>一、光电转换</h2><p>​    将光信号转换为电信号。一定通量的光子以高于半导体带隙(导带能量最低点与价带能量最高点的能量只差)的能量进入半导体，使处于价带的电子被激发到导带，成为自由电子。这些电子就成为转换后的信号电荷。</p>
<h2 id="二、电荷的收集与积累"><a href="#二、电荷的收集与积累" class="headerlink" title="二、电荷的收集与积累"></a>二、电荷的收集与积累</h2><h3 id="1-传感器的电荷积分模式-图片待补充"><a href="#1-传感器的电荷积分模式-图片待补充" class="headerlink" title="1. 传感器的电荷积分模式(图片待补充)"></a>1. 传感器的电荷积分模式(图片待补充)</h3><p>​        数码相机的CMOS和CCD图像传感器将光电二极管用作电荷收集器件。例如，二极管P型区域接低电势，N型区域首先被复位到高电势。之后光电二极管保持反偏并进入悬空状态。由于P型区域和N型区域的多数载流子的扩散作用，二极管内产生由N型区域指向P型区域的内建电场。被光子激发出的电子受内建电场作用，在N型区域聚集。在这种情况下，电子就是信号电荷。</p>
<h2 id="三、信号电荷的检测与变换"><a href="#三、信号电荷的检测与变换" class="headerlink" title="三、信号电荷的检测与变换"></a>三、信号电荷的检测与变换</h2><h3 id="1-电荷检测"><a href="#1-电荷检测" class="headerlink" title="1. 电荷检测"></a>1. 电荷检测</h3><p>​        即将信号电荷转变为信号电压。其原理在CCD图像传感器和大部分CMOS图像传感器是基本相同的。<strong>但CCD和CMOS进行电荷检测的位置不相同，CCD在输出放大器中实现电荷检测，而CMOS是在像素内实现电荷检测。实际上，CCD中有着专门的放大器和模数转换芯片，而CMOS的每一个感光元件都整合了放大器和模数转换逻辑</strong>。电荷检测与变换的基本过程为：电压放大器连接势阱以监测阱中信号电荷的变化，若有电荷Q<sub>sig</sub>进入阱中，则其引起的电压变化为</p>
<script type="math/tex; mode=display">
ΔV_{FD}={Q_{sig}\over C_{FD}}(1.1)</script><p>式中，C<sub>FD</sub>是放大器所连接到的势阱的电容，并充当电荷到电压的转换电容。输出电压的变化如下：</p>
<script type="math/tex; mode=display">
ΔV_{OUT}=A_VΔV_{FD}(1.2)</script><p>式中，A<sub>V</sub>代表电压放大器的电压增益。<sup>[2]</sup></p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_电子感光元件_信号电荷的检测与变换.png" alt="摄影技术_感光材料与电子传感器_信号电荷的检测与变换" style="zoom:80%;"></p>
<h3 id="2-转换增益-Conversion-Gain"><a href="#2-转换增益-Conversion-Gain" class="headerlink" title="2. 转换增益(Conversion Gain)"></a>2. 转换增益(Conversion Gain)</h3><p>​        转换增益(Conversion Gain)表面了在电荷检测节点处，一个电子引起的电压变化大小。由式(1.1)可求得增益如下<sup>[1]</sup>：    </p>
<script type="math/tex; mode=display">
C.G={q\over C_{FD}}(2.1)</script><p>​        式中，<em>q</em>表示元电荷，<em>C<sub>FD</sub></em>表示输出放大器所连接到的势阱的电容。</p>
<hr>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:137.</p>
<p>[2] Junichi Nakamura.数码相机中的图像传感器和信号处理[M].北京:清华大学出版社,2015:40.</p>
<h1 id="e-像元"><a href="#e-像元" class="headerlink" title="e). 像元"></a>e). 像元</h1><p>​        像元即像素点，是组成传感器的最小单元。下图为简化的像素结构</p>
<p>​        </p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元.png" width="40%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      简化的像素结构 图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>



<h2 id="一、彩色滤光阵列"><a href="#一、彩色滤光阵列" class="headerlink" title="一、彩色滤光阵列"></a>一、彩色滤光阵列</h2><p>​        为使图像传感器能够还原出彩色图像，必须采用分离颜色的技术。对于消费领域的数码相机来说，可以在光敏二极管上用片上<strong>彩色滤光阵列(color filter array,CFA)</strong>,这是一种经济合算的解决方案，可以将色彩信息分离并满足数码相机的微小化需求。</p>
<p>​        根据彩色滤光阵列使用的色彩模式的不同，可分为<strong>RGB基色滤光阵列</strong>和<strong>CMY互补色滤光阵列</strong>。RGB滤光阵列有着更优的色彩再现能力和更高的彩色信噪比，因为它具有良好的波长敏感性;CMY互补色滤光阵列由于采用的模式的各个互补色滤光片的光穿透范围较宽，可以获得更高的色彩敏感度，量子效率较高。然而，为了输出显示而将互补色成分转换成RGB的减法操作会带来信噪比的下降，色彩再现也通常没有RGB基色滤光那么准确。<sup>[1]</sup></p>
<h3 id="1-拜尔阵列"><a href="#1-拜尔阵列" class="headerlink" title="1. 拜尔阵列"></a>1. 拜尔阵列</h3><p>​        最常用的RGB基色滤光模式叫做“拜尔”模式，采用这种模式的阵列也叫<strong>拜尔阵列</strong>。拜尔阵列是一种马赛克彩色滤色阵列，由Bryce Edward Bayer提出。考虑到人眼对绿光最敏感的生理特性，这种滤色阵列中，绿色滤光器占50%，红色和蓝色滤光器分别占25%，这种排列方式称为RGGB。要从拜耳阵列传感器采样生成的图像得到全色彩图像必须要去马赛克，进行反马赛克运算。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元_彩色滤光阵列.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      拜尔阵列 图片引自Wikipedia      </div> </center>

<p>​        在带拜耳阵列的传感器中，当输入信号的最高频率超过一定值(奈奎斯特频率)，接近于感光元件里像素的空间频率时，就会产生信号的混叠。根据差拍原理，即两个频率接近的等幅正弦波叠加，合成信号的幅度将按照两个频率之差变化。在这种情况下，图像上就会产生<strong>摩尔纹</strong>。                        </p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元_彩色滤光阵列_摩尔纹.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      透过重叠两相似图样（转动α度）得到之摩列 图片引自Wikipedia      </div> </center>        

<h3 id="2-Foveon-X3感光元件"><a href="#2-Foveon-X3感光元件" class="headerlink" title="2. Foveon X3感光元件"></a>2. Foveon X3感光元件</h3><p>​        Foveon X3利用可见光不同的波长拥有不同的穿透力的原理感光元件，在每个像素具有三层感光元件所以可以同时侦测红、蓝、绿三种波长的强度。Foveon X3解决了摩尔纹的问题，其采样频率和色彩还原度远高于传统的拜耳阵列。</p>
<p>​        但由于图像传感器是垂直叠起的，导致许多电路层设计问题。往往会使信噪比和动态范围下降。Foveon X3用于部分sigma旗下的数码相机。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元_彩色滤光阵列_Foveon X3感光元件.png" alt="摄影技术_感光材料与电子传感器_像元_彩色滤光阵列_Foveon X3感光元件" style="zoom:67%;"></p>
<hr>
<p>​        传统的拜尔阵列以及一些拜耳阵列的改良型(如富士的X-Trans),这类能在单片结构上感测彩色影像的成像器件属于<strong>单片成像器件</strong>。Foveon X3这类使用三片成像器件分别感测红、绿、蓝三种原色的器件属于<strong>三片成像器件</strong>。广播级摄影机多采用三片成像器件。</p>
<h2 id="二、微型透镜阵列"><a href="#二、微型透镜阵列" class="headerlink" title="二、微型透镜阵列"></a>二、微型透镜阵列</h2><p>​        <strong>片上微型透镜阵列(on-chipmicrolens array,OMA)</strong>是由众多片上微透镜组成，用于将入射光汇聚到光电二极管的结构。</p>
<h2 id="三、MOS二极管-图片待补充"><a href="#三、MOS二极管-图片待补充" class="headerlink" title="三、MOS二极管(图片待补充)"></a>三、MOS二极管(图片待补充)</h2><p>​        <strong>MOS(Metal Oxide Semiconductor)二极管</strong>是由金属—氧化物—半导体构成的光电管。这种结构最上层是金属(常用铝或铝化合物)，中间是氧化物(一般为SiO<sub>2</sub>),下层为半导体，半导体的基础材料是硅晶体，根据使用的半导体的多数载流子的类型的不同分为P(positive)型衬底和N(negative)型衬底。由于电子迁移率高，所以大多数CCD选用P型硅衬底。[1]当在金属端加上一个偏置电压(栅极电压)，使MOS二极管处于反偏状态时，P型硅衬底的多数载流子(空穴)从硅表面区域被排斥走，随之在硅表面区域形成耗尽层，这样耗尽区就可以收集自由电子。</p>
<h2 id="四、结构"><a href="#四、结构" class="headerlink" title="四、结构"></a>四、结构</h2><h3 id="1-前照式结构"><a href="#1-前照式结构" class="headerlink" title="1. 前照式结构"></a>1. 前照式结构</h3><p>​        如图左侧，光子由像素正面入射。使用正面照明的像素结构又被称为<strong>前照式结构</strong>。光子到达光电二极管前需要经过金属线路，易被阻挡或反射串扰邻近像素。正面入射时量子效率为40%左右。为了解决前照式的开口率小以及光串扰问题，佳能将微透镜阵列进行优化，造出无缝微透镜阵列。而索尼则实现了背照式结构。</p>
<h3 id="2-背照式结构"><a href="#2-背照式结构" class="headerlink" title="2. 背照式结构"></a>2. 背照式结构</h3><p>​        如图右侧，光子由像素背面入射。使用背面照明的像素结构又被称为<strong>背照式结构</strong>。背照式结构将金属线路放到光电二极管下面，使传感器可更好地利用入射光线。背面照射时，量子效率可达80%以上。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元_前照式与背照式.png" alt="摄影技术_感光材料与电子传感器_像元_前照式与背照式" style="zoom:75%;"></p>
<h3 id="3-堆栈式结构"><a href="#3-堆栈式结构" class="headerlink" title="3. 堆栈式结构"></a>3. 堆栈式结构</h3><p>​        CMOS图像传感器的像素为有源像素，集合了具有信号放大及输出等功能的电路，使得CMOS的像素表面有一部分为处理回路，这部分无法接收光信号。而堆栈式结构则将处理回路安置在像素区域下方。堆栈式结构可实现更小尺寸的传感器，画质方面也得到了一定的优化。</p>
<p><img src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_像元_堆栈式.png" alt="摄影技术_感光材料与电子传感器_像元_前照式与背照式" style="zoom:75%;"></p>
<h2 id="四、有源像素和无源像素"><a href="#四、有源像素和无源像素" class="headerlink" title="四、有源像素和无源像素"></a>四、有源像素和无源像素</h2><p>​        根据电荷包传输出像素时是否经过信号放大，可将像素分为有源像素和无源像素。有源像素即是电荷包在传递出初始像素后，已经经过信号放大。无源像素即是电荷包在传递出初始像素后，未经过信号放大。</p>
<p>​        CCD图像传感器被归类为无源像素的图像传感器，因为光生电荷在从像素传递到寄存器后端的输出放大器时才发生信号放大。CMOS图像传感器<strong>大多</strong>为使用有源像素的图像传感器，其中光生电荷在传递出初始像素后已经经过信号放大，放大后的信号再被读出。采用有源像素可以有效地抑制信号读出路径上产生和引入的噪声，采用无源像素可降低单个像素的大小。</p>
<hr>
<p>[1] Junichi Nakamura.数码相机中的图像传感器和信号处理[M].北京:清华大学出版社,2015:42-43.</p>
<h1 id="势阱"><a href="#势阱" class="headerlink" title="势阱"></a>势阱</h1><h2 id="一、定义及解释"><a href="#一、定义及解释" class="headerlink" title="一、定义及解释"></a>一、定义及解释</h2><p>​        势阱定义：粒子在某立场中运动，势能函数曲线在空间的某一有限范围内势能最小，形如陷阱，称为<strong>势阱</strong>。在MOS管中，当在金属端加上一个偏置电压(即金属端为高电势，P型衬底为低电势)，使MOS二极管处于反偏状态时，P型硅衬底的多数载流子(空穴)从硅表面区域被排斥走，随之在硅表面区域形成耗尽层。对于电子而言，耗尽层是低势能区，因此耗尽层可俘获电子。当使用同一光源的光线照射到MOS管的硅片上时，势阱内俘获的光子数与光强度成正比。</p>
<p>​        势阱的深度与电极上所施加的电压有关，电极上价带电压越高，势阱就越深。一个势阱所收集的光生电荷称为一个<strong>点荷包</strong>。</p>
<h2 id="二、满阱容量"><a href="#二、满阱容量" class="headerlink" title="二、满阱容量"></a>二、满阱容量</h2><p>​        <strong>满阱容量(full-well capacity,FWC)</strong>是一个光电二极管所能积累的最大电荷量，即一个像元所能积累的最大电荷量。满阱容量与势阱的深度有关，下面给出相应公式：</p>
<script type="math/tex; mode=display">
N_{sat}={1\over q}\int_{V_{reset}}^{V_{max}}C_{PD}(V)·dV[electrons]</script><p>​        式中，N<sub>sat</sub>即为满阱容量，q为元电荷，C<sub>PD</sub>为光电二极管的电容，V<sub>reset</sub>与V<sub>max</sub>分别为二极管两侧的初始电压和最大电压。</p>
<h1 id="f-CCD图像传感器"><a href="#f-CCD图像传感器" class="headerlink" title="f). CCD图像传感器"></a>f). CCD图像传感器</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>​        <strong>CCD(charge coupled device，电荷耦合器件)</strong>是一种能够在半导体中以电荷包的形式储存和传输信号电子(少部分传输空穴)的器件。如图4.1(a),CCD的主要结构为MOS电容器。当在金属电极加正电压时，P型硅衬底的多数载流子(空穴)从硅表面区域被排斥走，随之在硅表面区域形成耗尽层，从电极出发的电场线终止于耗尽层中由受主离子形成的负空间电荷区。在这种非热平衡条件下，注入的少数载流子(电子)就会被吸引到电极下的Si-SiO<sub>2</sub>界面，如图4.1(b)所示，这意味着在Si-SiO<sub>2</sub>界面形成了一个电子的势阱。通常，我们用如图4.1(c)的流体模型来描述点荷包储存和转移的情况。<sup>[1]</sup></p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_概念1.png" width="60%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<p>​        之后，我们考虑相邻MOS电容之间的交互作用，即电荷转移。当MOS电容的排列不够紧密时，相临的MOS电容的势阱无法沟通，也就无法转移电荷，如图4.2(a),G1中储存的电荷包无法到达G2。所以，必须使相邻的MOS电容排列更紧密，使其势阱互相沟通。两个MOS电容势阱互相沟通的状态称为<strong>耦合</strong>。在相邻两个MOS电容耦合之后，储存在G1中的电子电荷包将由G1与G2之下耦合势阱共享，如图4.2(b)所示。因为信号电荷总是向势阱深处转移，我们可以通过调整各个MOS电容的栅极电压来调整各个电容的势阱，进而使电荷包在CCD中按照确定方向转移。如图4.2(c)，即通过降低G1上的电压，将G1中的电荷包完全转移到G2中。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_概念2.png" width="70%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<h2 id="二、CCD基本工作流程"><a href="#二、CCD基本工作流程" class="headerlink" title="二、CCD基本工作流程"></a>二、CCD基本工作流程</h2><p>​        CCD的基本工作流程：</p>
<p>​        信号电荷产生，即光子电荷转换；</p>
<p>​        信号电荷储存，即信号电荷的收集与存储，实现光积分；</p>
<p>​        信号电荷转移，即信号电荷的传输；</p>
<p>​        信号电荷的检测与变换，即将信号电荷转换成电信号输出。<sup>[2]</sup></p>
<h2 id="二、电荷转移机制-1-67-68"><a href="#二、电荷转移机制-1-67-68" class="headerlink" title="二、电荷转移机制[1]67-68"></a>二、电荷转移机制<sup>[1]67-68</sup></h2><p>​        CCD中基本电荷的转移取决于3个机制(或者说3个驱动力)：自激漂移(self-induced drift)、热扩散(thermal diffusion)和边缘场效应(fringing field dirft)。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_电荷转移机制.png" width="40%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<h3 id="1-自激漂移"><a href="#1-自激漂移" class="headerlink" title="1. 自激漂移"></a>1. 自激漂移</h3><p>​        如图4.3(a)，当电荷包较大时(例如在电荷转移刚开始的时候)，驱动电荷转移的主要机制为自激漂移。自激漂移是指由载流子的静电排斥作用引起的电荷转移。其中，电荷衰减速度与初始电荷密度大致成正比。</p>
<p>​        下面给出转移t时间之后G2下剩余的电荷的相关公式：</p>
<script type="math/tex; mode=display">
{Q(t)\over Q_0}\approx {t_0\over (t_0+t)}</script><script type="math/tex; mode=display">
t_{0}={\frac{\pi L^{3}W C_{e f f}}{2\mu Q_{0}}}={\frac{\pi}{2}}\cdot{\frac{L^{2}}{\mu(V_{1}-V_{0})}}</script><p>式中，<em>L</em>和<em>W</em>分别表示电极G2的长和宽;<em>μ</em>表示载流子(电子)迁移率;<em>C<sub>eff</sub></em>表示单位面积有效储存电容，它与MOS电容中的栅氧化层有关。<em>V<sub>1</sub>-V<sub>0</sub>=Q<sub>0</sub>/LWC<sub>eff</sub></em>是将载流子移动至相邻电极G3的初始电压。</p>
<h3 id="2-热扩散"><a href="#2-热扩散" class="headerlink" title="2. 热扩散"></a>2. 热扩散</h3><p>​        当MOS电容中的剩余电荷产生的沟道电压低至阈值电压时，如图4.3(b)所示，转移过程的驱动力主要是热扩散，这就使得G2下存储的电荷以指数形式减少。热扩散的时间常量<em>τ<sub>th</sub></em>可以用以下公式表示：</p>
<script type="math/tex; mode=display">
τ_{th}={4L^2\over {\pi}^2D}</script><p>式中，<em>D</em>是载流子扩散系数，<em>L</em>和电极G2的长。</p>
<h3 id="3-边缘场效应"><a href="#3-边缘场效应" class="headerlink" title="3. 边缘场效应"></a>3. 边缘场效应</h3><p>​        在实际情况中，平行电容器的电场线并不都是直线，而是越靠近边缘的地方弯曲程度越大。如图4.3(c),在电荷转移过程中， 边缘场<em>E<sub>y</sub></em>加快了最后阶段的电荷转移。</p>
<p>​        边缘场的强度和形状取决于栅氧化层厚度、硅中杂质分布情况和电极的压差。单位载流子通过长度为<em>L</em>的电极的渡越时间<em>t<sub>tr</sub></em>为</p>
<script type="math/tex; mode=display">
t_{t r}=\frac{1}{\mu} \int_{0}^{L} \frac{1}{E_{y}} d y</script><p>​        在高速操作中，例如时钟频率为10MHz时，边缘场是最重要的一个电荷转移的驱动力。因此，在设计CCD时必须要考虑到如何增强边缘场。</p>
<h2 id="三、转移沟道"><a href="#三、转移沟道" class="headerlink" title="三、转移沟道"></a>三、转移沟道</h2><p>​        根据电荷包在CCD中存储和传输的位置不同，我们可以将CCD分为<strong>表面沟道CCD(SCCD)</strong>和<strong>体沟道CCD(BCCD)</strong>。</p>
<h3 id="1-表面沟道CCD"><a href="#1-表面沟道CCD" class="headerlink" title="1. 表面沟道CCD"></a>1. 表面沟道CCD</h3><p>​        表面沟道CCD(surface CCD,SCCD)是指电荷包在MOS电容的氧化物-半导体分界附近进行存储与传输的CCD。这类CCD的工艺简单，但由于硅表面的晶格极不规则，在硅表面的禁带(在半导体中处于导带与价带之间，禁带宽度及带隙)引入了高密度的载流子陷阱能级，这又被称为表面态或界面态。<sup>[1]69</sup>即2电荷在表面沟道中转移时易被俘获，导致传输过程中会损失较多电子。因此，这种传输方式不适合大规模CCD。</p>
<h3 id="2-体沟道CCD"><a href="#2-体沟道CCD" class="headerlink" title="2.体沟道CCD"></a>2.体沟道CCD</h3><p>​        <strong>体沟道(body CCD,BCCD)</strong>又被称为<strong>掩埋沟道</strong>。体沟道CCD的电荷包存储与传输的地方位于衬底内部，此方式有效解决了表面态对电荷传输的影响，提高了传输效率。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_转移沟道_体沟道.png" width="40%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      CCD掩埋沟道剖面图(参照Walden,R. H. et al. ,BellSyst. Tech. J. ,51,1635-1640,1972.)      </div> </center>

<h2 id="四、成像阵列的扫描"><a href="#四、成像阵列的扫描" class="headerlink" title="四、成像阵列的扫描"></a>四、成像阵列的扫描</h2><p>​        积累的电荷，或者相应的电压或者电流信号需要从图像传感器芯片的像素中读出到外部电路。这些分布在二维空间的信号应该被转换为时序信号，这个过程称为”扫描“。<sup>[1]39</sup></p>
<p>​        CCD的扫描方式主要有以下几种：<strong>帧转移(frame transfer,FT)</strong>、<strong>全帧转移(full-frame transfer,FFT)</strong>、<strong>行间转移(interlinetransfer,IT)</strong>和<strong>帧-行间转移(frame-interline transfer,FIT)</strong>结构。下图展示了FTCCD、ITCCD和FITCCD的结构。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_成像阵列的扫描.png" width="50%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<h3 id="1-帧转移CCD"><a href="#1-帧转移CCD" class="headerlink" title="1. 帧转移CCD"></a>1. 帧转移CCD</h3><h4 id="1-结构及工作方式"><a href="#1-结构及工作方式" class="headerlink" title="(1) 结构及工作方式"></a>(1) 结构及工作方式</h4><p>​        如图4.18(a),<strong>帧转移(frame transfer,FT)CCD</strong>由成像区域、电荷存储区域、水平电荷转移CCD(HCCD)和输出电路组成。成像区和电荷存储区由一个多通道垂直转移CCD(VCCD)组成,可以在垂直方向上转移电荷包。存储区和HCCD被金属覆盖以屏蔽入射光。<sup>[1]76</sup></p>
<p>​        当入射光照射到成像区上，所有像素开始曝光，光子将硅衬底中的电子激发到导带，形成电子-空穴对。这些光生电子被附近的势阱所俘获，形成电荷包，并进行垂直方向上的转移。经过一定的曝光时间后，信号电荷并行传输到存储区。之后，一条水平线上的电荷包转移到水平CCD，并经水平CCD一个一个地转移到输出电路。</p>
<h4 id="2-特点"><a href="#2-特点" class="headerlink" title="(2) 特点"></a>(2) 特点</h4><p>​        像素结构简单，可以相对容易地做成小面积的像素。但由于电荷包在成像区中转移时，光生载流子会叠加到信号中，会产生许多杂散信号，这种现象也叫漏光(在CCD中，漏光现象即是拖尾)。</p>
<h3 id="2-全帧转移CCD"><a href="#2-全帧转移CCD" class="headerlink" title="2. 全帧转移CCD"></a>2. 全帧转移CCD</h3><p>​        <strong>全帧转移(full-frame transfer,FFT)CCD</strong>的结构与帧转移CCD相似，但没有存储区域。适用于仅使用机械快门拍摄静止图像，且连拍速度不太快的情况。</p>
<h3 id="3-行间转移CCD"><a href="#3-行间转移CCD" class="headerlink" title="3. 行间转移CCD"></a>3. 行间转移CCD</h3><h4 id="1-结构及工作方式-1"><a href="#1-结构及工作方式-1" class="headerlink" title="(1) 结构及工作方式"></a>(1) 结构及工作方式</h4><p>​        <strong>行间转移(interlinetransfer,IT)CCD</strong>是使用CCD的摄像机和数码相机中最常用的类型。如图4.18(b)所示，ITCCD中光电二极管和垂直转移CCD(VCCD)隔行分布。其中VCCD被遮挡不受光，不作为信号电荷的产生源，而是作为存储区和电荷垂直转移的通道。</p>
<p>​        当光电二极管接收到光信号时，其中电子被激发，形成电子-空穴对。这些光生电子被附近的势阱所俘获，形成电荷包。经过极短的时间，光电二极管中的电荷包被转移到VCCD。之后，一条水平线上的电荷包转移到水平CCD，并经水平CCD一个一个地转移到输出电路。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_成像阵列的扫描_行间转移CCD.png" width="35%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      ITCCD像素横截图 图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<h4 id="2-特点-1"><a href="#2-特点-1" class="headerlink" title="(2) 特点"></a>(2) 特点</h4><p>​        大大减轻了漏光现象。且因为光电二极管和VCCD分离，不用过多考虑集成问题，因此各自可被设计成最优结构从而提高传感器的性能。</p>
<h3 id="4-帧-行间转移CCD"><a href="#4-帧-行间转移CCD" class="headerlink" title="4. 帧-行间转移CCD"></a>4. 帧-行间转移CCD</h3><p>​        <strong>帧-行间转移(frame-interline transfer,FIT)CCD</strong>即有如FTCCD的存储区域，也有如ITCCD光电二极管和VCCD隔行排列的结构。</p>
<p>​        尽管以及减轻了许多，但在ITCCD中仍存在漏光现象(转移过程中光电二极管产生光生电子)，而FITCCD则进一步减轻了漏光现象。但由于实现FITCCD需要一块额外的存储区以及较高的时钟频率，导致传感器的面积增大、功耗增大、成本也相应增大。</p>
<h2 id="五、拖尾"><a href="#五、拖尾" class="headerlink" title="五、拖尾"></a>五、拖尾</h2><p>​        拖尾是CCD图像传感器的一个特殊现象，它是由那些多余电子产生的，例如在ITCCD电荷转移的过程中，由光电二极管产生扩散到VCCD中的干扰电荷。</p>
<p>​        拖尾被定义为低于像素阵列中心有效成像像素10%高度照射下的拖尾信号比，表现为白色垂直条纹图像。当强光照射时，造成造成高光溢出，使拖尾现象尤为明显。        </p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CCD图像传感器_拖尾.png" width="35%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      拖尾现象      </div> </center>

<hr>
<p>[1] Junichi Nakamura.数码相机中的图像传感器和信号处理[M].北京:清华大学出版社,2015:66.</p>
<p>[2] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:137.    </p>
<h1 id="g-CMOS图像传感器"><a href="#g-CMOS图像传感器" class="headerlink" title="g). CMOS图像传感器"></a>g). CMOS图像传感器</h1><h2 id="一、概念-图片待补充-1-141"><a href="#一、概念-图片待补充-1-141" class="headerlink" title="一、概念(图片待补充[1]141)"></a>一、概念(图片待补充[1]141)</h2><p>​        <strong>CMOS(Complementary Metal-Oxide-Semiconductor,互补式金属氧化物半导体)</strong>是用于数字信号、模拟信号和混合信号应用的主流技术。CMOS图像传感器即是使用这项材料制作的传感器，其在数码相机、摄影机中尤为常见。</p>
<p>​        CMOS图像传感器的原理组成如图所示，通常由光(像)敏单元阵列、行驱动器、列时序控制逻辑、A/D转换器(模拟数字转换器,ADC)、数据总线输出接口、控制接口等几部分组成，这几部分通常都被集成在同一块硅片上。<sup>[1]</sup></p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CMOS图像传感器_概念.png" width="60%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      图片引自《电影制作技术手册》       </div> </center>

<h2 id="二、CMOS基本工作流程"><a href="#二、CMOS基本工作流程" class="headerlink" title="二、CMOS基本工作流程"></a>二、CMOS基本工作流程</h2><ul>
<li>光电转换</li>
<li>行选择逻辑单元选通相应的行像素单元；</li>
<li>信号通过各自所在列的信号总线传输到对应的模拟信号处理单元以及ADC；</li>
<li>电压输出。<sup>[2]141-142</sup></li>
</ul>
<h2 id="三、CMOS的扫描方式"><a href="#三、CMOS的扫描方式" class="headerlink" title="三、CMOS的扫描方式"></a>三、CMOS的扫描方式</h2><p>​        CMOS图像传感器常用的扫描方式为<strong>X-Y寻址方案</strong>(下图b)。CMOS中，视频信号是通过行(垂直)扫描器和列(水平)扫描器对像素阵列进行光栅扫描获得的。一般情况下，行扫描器在每一帧时间内产生一个行选择脉冲和一个复位脉冲并送入选定行的像素中，列扫描器在每一个行周期扫描各列。CMOS 图像传感器中两种常见的扫描器是<strong>移位寄存器</strong>和<strong>解码器</strong>。移位寄存器的优点是结构简单，翻转噪声低，在一些改进结构中读出更加灵活。而解码器具有比移位寄存器更大的扫描灵活性，可以应用窗选读出或跳跃式读出。<sup>[2]</sup>扫描后，时序信号进入ADC，进行模数转换。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/2023/02/01/%E7%9B%B8%E6%9C%BA%E6%A6%82%E8%BF%B0/摄影技术_感光材料与电子传感器_CMOS图像传感器_CMOS的扫描方式.png" width="60%" alt>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      ITCCD的扫描方式与CMOS的X-Y寻址扫描方式的对比     图片引自《数码相机中的图像传感器和信号处理》 Junichi Nakamura 著      </div> </center>

<h2 id="四、CMOS图像传感器与CCD图像传感器的对比"><a href="#四、CMOS图像传感器与CCD图像传感器的对比" class="headerlink" title="四、CMOS图像传感器与CCD图像传感器的对比"></a>四、CMOS图像传感器与CCD图像传感器的对比</h2><h3 id="1-读出灵活性"><a href="#1-读出灵活性" class="headerlink" title="1. 读出灵活性"></a>1. 读出灵活性</h3><p>​        基于CMOS使用的X-Y寻址方案可进行行选择，X-Y寻址方案提供了多个读出方式，如窗选读出和跳跃式读出等。这使CMOS的读出灵活性高于CCD。</p>
<h3 id="2-能耗"><a href="#2-能耗" class="headerlink" title="2. 能耗"></a>2. 能耗</h3><p>​        CMOS在读出时具有行选择，且只有选中的像素才会被激活。此外，CMOS电路的工作电压可低于CCD电路的工作电压及片上功能实现都可降低系统功耗。这些使得CMOS的能耗要远小于CCD。</p>
<h3 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h3><p>​        灵敏度：<strong>在像素尺寸相同时</strong>，因为CMOS有源像素中至少需要3个晶体管(复位晶体管、源跟随器晶体管和行选择晶体管),且它们被遮光金属所覆盖。<sup>[2]42</sup>这使像素的感光面积减小，填充因子(像素中感光区域与像素面积的比率)小，最终导致<strong>CMOS灵敏度低于CCD</strong>。</p>
<p>​        分辨率：<strong>在传感器具有相同尺寸时，CMOS分辨率低于CCD</strong>。CMOS单个像素中集成较多元件，使面积增大。</p>
<p>​        噪声：CCD的随机噪声较高，CMOS的固定噪声较高。</p>
<p>​        读取速度：<strong>CMOS读取速度快于CCD</strong>。由于所有的电荷都要通过统一的电路转换并输出，因此CCD传感器的读取速度比较慢。当然新一代的CCD在这方面有改善，但是是以牺牲灵敏度为代价的。</p>
<h3 id="4-成本"><a href="#4-成本" class="headerlink" title="4. 成本"></a>4. 成本</h3><p>​        相同尺寸下，CMOS成本一般远低于CCD。</p>
<hr>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:141.    </p>
<p>[2] Junichi Nakamura.数码相机中的图像传感器和信号处理[M].北京:清华大学出版社,2015:105.</p>
<h1 id="h-动态范围"><a href="#h-动态范围" class="headerlink" title="h). 动态范围"></a>h). 动态范围</h1><p>​        <strong>动态范围(Dynamic range,DR)</strong>定义为满阱容量与本底噪声之间的比值(等效于传感器中不过曝下的最大输出与无光子照射时的输出的比值),用于衡量感光元件记录景物亮度范围的大小。动态范围的公式如下：</p>
<script type="math/tex; mode=display">
DR=20lg({N_{sat}\over n_{read}})[dB]</script><p>式中，<em>N<sub>sat</sub></em>为满阱容量的电子数，<em>n<sub>read</sub></em>为本底噪声的电子数。</p>
<h1 id="i-噪声-分类方式暂定"><a href="#i-噪声-分类方式暂定" class="headerlink" title="i). 噪声(分类方式暂定)"></a>i). 噪声(分类方式暂定)</h1><p>​        噪声为接收信号并输出后的图像中的不均匀部分，会导致图像质量的下降。噪声大致可分为：<strong>固定模式噪声(fixed-pattern noise,FPN)</strong>和<strong>暂态噪声</strong>。</p>
<p>​        固定模式噪声(fixed-pattern noise,FPN)主要由暗信号非一致性、像素随机、阴影、暗电流的非一致性、光响应的非一致性等因素导致。</p>
<p>​        暂态噪声主要由读出噪声、放大器噪声、光子散粒噪声等组成。</p>
<h1 id="j-信噪比"><a href="#j-信噪比" class="headerlink" title="j). 信噪比"></a>j). 信噪比</h1><p>​        <strong>信噪比(Signal-to-noise ratio,STR)</strong>是给定输入电压下信号和噪声的比值，可以衡量噪声对图像的干扰程度。信噪比越高，图像质量越好。信噪比的公式如下：</p>
<script type="math/tex; mode=display">
SNR=20lg({N_{sig}\over n})[dB]</script><p>式中，<em>N<sub>sig</sub></em>为信号电平，<em>n</em>为信号电平为<em>N<sub>sig</sub></em>时的总暂态噪声。</p>
<h1 id="k-感光度-ISO"><a href="#k-感光度-ISO" class="headerlink" title="k). 感光度(ISO)"></a>k). 感光度(ISO)</h1><p>​        感光度是指底片或感光元件对光线的灵敏程度。现感光度用<strong>ISO</strong>表示，感光度又叫ISO值。国际标准组织(International Organization for Standardization ,ISO)制定的胶卷生产标准，现也用于感光元件。在传感器中，ISO的改变实际上是改变电信号的放大程度，并没改变实际曝光量。过度地提高ISO会导致动态范围、色彩灵敏度、信噪比的大幅度下降。</p>
<h2 id="一、原生ISO"><a href="#一、原生ISO" class="headerlink" title="一、原生ISO"></a>一、原生ISO</h2><p>​        在CMOS中，由于初始模拟信号过弱，在输出时一般会先经过模拟信号放大，再进行模拟数字信号转换。</p>
<p>​        原生ISO(native ISO)是由满阱容量决定的，指电子感光元件在特定的转换增益下，模拟信号不经过数字放大所得到的原始ISO。</p>
<h1 id="l-增益-Gain"><a href="#l-增益-Gain" class="headerlink" title="l). 增益(Gain)"></a>l). 增益(Gain)</h1><p>​        信号强度的改变，ISO的改变实际上就是改变可编程增益放大器中信号的放大程度。模拟增益的对象是模拟信号，处于模数转换之前，因此模拟增益不会造成色阶、亮度断层。在模数转换之后，对数字信号进行的增益为数字增益(数字放大)，后期调整曝光即为数字增益。</p>
<h2 id="一、转换增益-Conversion-Gain"><a href="#一、转换增益-Conversion-Gain" class="headerlink" title="一、转换增益(Conversion Gain)"></a>一、转换增益(Conversion Gain)</h2><p>​        转换增益(Conversion Gain)表面了在电荷检测节点处，一个电子引起的电压变化大小。<sup>[1]</sup>增益可由下式求得(公式详见信号电荷的检测与变换-转换增益)：    </p>
<script type="math/tex; mode=display">
C.G={q\over C_{FD}}</script><p>​        当输入的光信号导致积累的电荷达到满阱容量时，其对应的输出即为纯白，因此，满阱容量实际也会影响增益(可以从动态范围的定义理解)。<strong>增益（Gain）</strong>实际上是就通过改变施加给光电二极管的电压，进而改变该像素的满阱容量，起到增益的效果。大阱容可以提高动态范围，但是也意味着低增益，导致的后果就是在弱光情况下，难以压制本底噪声，即对于暗部，本底噪声在信号中占较大比例，造成暗部细节丢失、信噪比低。为了解决这个问题，一些传感器上采用了双增益(Dual Gain)。</p>
<hr>
<p>[1] Junichi Nakamura.数码相机中的图像传感器和信号处理[M].北京:清华大学出版社,2015:41.</p>
<h1 id="m-双增益和双原生ISO"><a href="#m-双增益和双原生ISO" class="headerlink" title="m). 双增益和双原生ISO"></a>m). 双增益和双原生ISO</h1><p>​        为了兼顾高感光度和低感光度，主要有两种解决方案，分别为<strong>双增益(Dual Gain)</strong>和<strong>双原生ISO(Dual ISO)</strong>。</p>
<h2 id="一、双转换增益-Dual-Gain"><a href="#一、双转换增益-Dual-Gain" class="headerlink" title="一、双转换增益(Dual Gain)"></a>一、双转换增益(Dual Gain)</h2><p>​        即在不同光线情况下使用不同的转换增益。在光线强时增大传感器的满阱容量，即低ISO模式，以提高传感器保留高光的能力；在光线弱时减小满阱容量，即高ISO模式，压制本底噪声，以获得更好的暗部细节。</p>
<h2 id="二、双原生ISO-Dual-ISO"><a href="#二、双原生ISO-Dual-ISO" class="headerlink" title="二、双原生ISO(Dual ISO)"></a>二、双原生ISO(Dual ISO)</h2><p>​        <strong>双原生ISO(Dual ISO)</strong>也被称为双电路增益。双原生ISO并没有改变传感器的阱容，而是在高ISO和低ISO下使用不同的放大电路，放大模拟信号后进行模数转换。双原生ISO不仅可兼顾高低感，还可用来进行HDR合成。比如小米手机中使用的双原生ISO Fusion技术，即将两条放大电路同时打开，高增益的电路用于还原暗部细节，低增益的电路用于保护高光细节，之后再进行像素的合成。</p>
<h1 id="n-取景器"><a href="#n-取景器" class="headerlink" title="n). 取景器"></a>n). 取景器</h1><p>​        取景器是摄影机上用来给摄影师提供正确选择被摄景物、检查和修改画面构图以及验证画面清晰程度的必要装置。[1]取景器大体可分为<strong>光学取景器</strong>和<strong>电子取景器</strong>两大类，每一大类下又可分为若干小类。</p>
<h2 id="一、光学取景器-Optical-View-Finder"><a href="#一、光学取景器-Optical-View-Finder" class="headerlink" title="一、光学取景器(Optical View Finder)"></a>一、光学取景器(Optical View Finder)</h2><h3 id="1-旁轴取景器"><a href="#1-旁轴取景器" class="headerlink" title="1. 旁轴取景器"></a>1. 旁轴取景器</h3><p>​    旁轴取景器一般用于胶片袖珍相机、早期的消费级卡片型数码相机。具有光学取景的无延迟、无拖影、基本不耗电等特点。但因为取景窗与镜头之间有一段距离，导致拍摄者在取景器中观察到的画面与最终得到的影像有着一定的视差。</p>
<h3 id="2-反射式取景器-TTL取景器"><a href="#2-反射式取景器-TTL取景器" class="headerlink" title="2. 反射式取景器(TTL取景器)"></a>2. 反射式取景器(TTL取景器)</h3><p>​    反射式取景器多用于单反相机，利用反光镜和五棱镜(或五面镜)，将通过镜头的光线反射到取景器的目镜。反射式取景器不光有光学取景的优点，还解决了视差问题。但反光式取景器也有着结构复杂、体积较大等缺点，且因为在按下快门后反光镜升起，相较与无反相机会产生较大的机器震动。<br>​    在部分使用机械式叶子板的摄影机中，会将叶子板的一侧制成反光材质。在叶子板遮挡胶片时，将叶子板作为反射系统的一部分用于取景。这种方式同样做到了实时、无视差。但由于叶子板存在开口会使取景目镜看到的影像交替出现，出现闪烁感。一些摄影机使用无光黑的反射扇面，将反射镜面分为两部分，使目镜中的影像出现的次数增加为49次/秒，以达到减弱闪烁感的目的。[2]</p>
<h3 id="3-侧面取景器"><a href="#3-侧面取景器" class="headerlink" title="3. 侧面取景器"></a>3. 侧面取景器</h3><p>​    与旁轴取景器类似，取景器位于摄影机机体侧面用于部分胶片摄影机。<br>机体侧移式取景器<br>​    这种取景方式用于部分胶片摄影机。取景器位于摄影机机体的侧面，摄影机的机体则安装在一个可侧移到滑轨上。当取景时，将摄影机侧移，使取景器镜头位于原先摄影物镜的位置。取景完成后，将摄影机复位，使摄影物镜位于初始位置。这种取景方式可解决视差问题，当无法做到实时取景，因此不适合拍摄运动物体。</p>
<h3 id="4-焦平面式取景器"><a href="#4-焦平面式取景器" class="headerlink" title="4. 焦平面式取景器"></a>4. 焦平面式取景器</h3><p>​    将一块磨砂玻璃置于焦平面处，取景时用它来代替胶片，由被摄物体反射来的光线在其上聚焦并形成影像，然后通过棱镜光学系统，观看磨砂玻璃上的取景景物。这种取景器因为取景器是通过拍摄镜头观看被摄景物的，因此不存在视差问题。但是，它不能在拍摄时取景，只能在拍摄前取景，所以也不适于运动拍摄。[3]</p>
<h3 id="5-分光式取景器"><a href="#5-分光式取景器" class="headerlink" title="5. 分光式取景器"></a>5. 分光式取景器</h3><p>​        多用于小型胶片摄影机。在叶子板前方安装一个分光镜，将进入镜头的光线的一部分反射到取景器。这类取景方式看到的画面是实时且无闪烁的，但由于分光镜会分走一部分光线，导致削减了到达胶片的光线强度。</p>
<h2 id="二、电子取景器-Electronic-View-Finder"><a href="#二、电子取景器-Electronic-View-Finder" class="headerlink" title="二、电子取景器(Electronic View Finder)"></a>二、电子取景器(Electronic View Finder)</h2><p>​        电子取景器将一块微型显示屏放在取景器目镜的内部。根据放置显示器的类型的不同可分为LCD取景器和OLED取景器。取景时快门开启，传感器接收光线，再显示到电子取景器上。相较于光学取景器，电子取景器中看到的画面即是传感器上的实际成像，可以实时查看调节光圈、快门速度等参数给画面带来的影响。但也存在着场景还原度不如光学取景器、耗电较大、不利于传感器的保护等缺点。</p>
<p>​        </p>
<p>[1] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:137.</p>
<p>[2] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:153.</p>
<p>[3] 常乐，车欣等.电影制作技术手册[M].北京:北京联合出版公司,2017:153.</p>
]]></content>
      <categories>
        <category>相机</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>相机</tag>
        <tag>物理</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-3 Real-time Environment Mapping</title>
    <url>/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/</url>
    <content><![CDATA[<p><a href="https:/docs.unrealengine.com/en-US/BuildingWorlds/LightingAndShadows/MeshDistanceFields/index.html">Mesh Distance Fields</a>，<a href="https:/cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf">Real Shading in Unreal Engine 4</a></p>
<h1 id="a-Shading-from-Environment-Lighting-IBL"><a href="#a-Shading-from-Environment-Lighting-IBL" class="headerlink" title="a). Shading from Environment Lighting(IBL)"></a>a). Shading from Environment Lighting(IBL)</h1><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/EnvironmentLight01a.png" alt="EnvironmentLight01a"></p>
<ul>
<li>通过环境贴图着色的方式，又被命名为 <strong>Image-Based Lighting (IBL)</strong></li>
</ul>
<h2 id="a-1-How"><a href="#a-1-How" class="headerlink" title="a.1). How"></a>a.1). How</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/EnvironmentLight01b.png" alt="EnvironmentLight01b"></p>
<ul>
<li>对于IBL，可以看做是上半球（可以联想下UE中的HDRI）的光照和BRDF的积分；</li>
</ul>
<ul>
<li><p><strong>Observation：</strong></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_BRDF.png" alt="IBL_BRDF"></p>
<ul>
<li><p>对于Glossy，其BRDF支持集很小（Lobe范围小）；</p>
</li>
<li><p>对于Diffuse，其BRDF非常平滑；</p>
</li>
<li><p>联想到上节课渲染方程不等式成立的条件（拆出乘积积分的那个）</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_BRDF02.png" alt="IBL_BRDF02"></p>
<ul>
<li><p>这里$\Omega_{G}$ 指积分域上，$g(x)$有值的区域。</p>
<ul>
<li><p>如$g(x)$ 为BRDF，$\Omega_{G}$ 即为原点向Lobe各点出发，与积分半球相交的区域集合</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_BRDF02b.png" alt="IBL_BRDF02b"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="We-can-safely-take-the-lighting-term-out"><a href="#We-can-safely-take-the-lighting-term-out" class="headerlink" title="We can safely take the lighting term out!"></a>We can safely take the lighting term out!</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_BRDF03.png" alt="IBL_BRDF03"></p>
<p>我们把渲染方程分为了两部分积分，分别是：</p>
<ul>
<li>在$\Omega_{fr}$(即Lobe对应的半球区域)，对<strong>光照Radiance积分</strong></li>
<li>在半球内对BRDF积分；</li>
</ul>
<span id="more"></span>
<h2 id="a-2-Lighting（对Radiance积分）"><a href="#a-2-Lighting（对Radiance积分）" class="headerlink" title="a.2). Lighting（对Radiance积分）"></a>a.2). Lighting（对Radiance积分）</h2><ul>
<li><p><strong>Lighting：</strong> </p>
<script type="math/tex; mode=display">
\frac{\int_{\Omega_{f_{r}}} L_{i}\left(p, \omega_{i}\right) \mathrm{d} \omega_{i}}{\int_{\Omega_{f_{r}}} \mathrm{~d} \omega_{i}}</script><ul>
<li><p>即在$\Omega_{fr}$(即Lobe对应的半球区域)，对光照Radiance积分，再归一化（normalize，分母用于归一化）；</p>
</li>
<li><p>类比于PCF，就是对Environment Map做滤波；</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_Prefiltering.png" alt="IBL_Prefiltering"></p>
<ul>
<li><strong>滤波方法：Mipmap</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_Prefiltering02.png" alt="IBL_Prefiltering02"></p>
<ul>
<li><p>在Shading中，需要获得Lighting项的值，只需要求得<strong>Environment Map对应Mipmap层</strong>，<strong>Lobe中点(镜面反射方向)方向</strong>的结果</p>
<ul>
<li>和百人计划图形2.5中，做Relief Mapping时在Unity用到的texCUBElod()，对Mipmap采样联系上了；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fixed3 Reflection = ACESToneMapping(texCUBElod(_CubeMap, float4(worldRef, (255-_Gloss)*8/255)).rgb, 1) * SpecularTint * _EnvIntensity;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="a-3-对BRDF积分（Split-Sum）"><a href="#a-3-对BRDF积分（Split-Sum）" class="headerlink" title="a.3). 对BRDF积分（Split Sum）"></a>a.3). 对BRDF积分（Split Sum）</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SplitSum_2.png" alt="SplitSum_2"></p>
<script type="math/tex; mode=display">
\int_{\Omega^+}f_r(p,w_i,w_o)cos\theta_i d\omega_i</script><h3 id="假设使用微表面理论的BRDF"><a href="#假设使用微表面理论的BRDF" class="headerlink" title="假设使用微表面理论的BRDF"></a>假设使用<strong>微表面理论的BRDF</strong></h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/MicrofacetBRDF.png" alt="MicrofacetBRDF"></p>
<ul>
<li><strong>做法：</strong> <strong>预计算</strong>考虑进所有变量（roughness、color等）的可能值的积分；</li>
<li>但是，维度过高，存储成本过高，因此需要降维；</li>
</ul>
<ul>
<li><p><strong>降维过程：</strong></p>
<ol>
<li><p>对应微表面BRDF，只考虑Fresnel term($F(i,h)$)和distribution of normals($D(h)$)</p>
</li>
<li><p>Fresnel term采用<strong>the Schlick’s approximation</strong></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SplitSum_2b.png" alt="SplitSum_2b"></p>
<ul>
<li>至此，积分降维为三维<ul>
<li>$R_0$ ：零度菲涅尔值</li>
<li>$\alpha$ ：可表示为roughness，$\alpha$ 越大，越粗糙；</li>
<li>$\theta(\theta_h)$ ：在实时渲染中，我们认为<strong>出射角</strong>、<strong>入射角</strong>以及<strong>入射角/出射角与半程向量的夹角</strong>，这三者是相同性质的（不是说值近似相等，而是<strong>指作为积分的元素效果相同</strong>）</li>
</ul>
</li>
</ul>
</li>
<li><p>在对BRDF的积分式中，通过Schlick’s approximation，将$R_0$拆出，即写成下列式子</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SplitSum_3.png" alt="SplitSum_3"></p>
<ul>
<li>积分现在被降维为二维（$R_0$被拆出，$f_r$中的菲涅尔项被分母抵消）<ul>
<li>$\alpha$ </li>
<li>$\theta$ </li>
</ul>
</li>
</ul>
</li>
<li><p>至此，我们对积分的两项分别进行预计算，储存在表格或者图片中（R、G通道分别两项积分结果）通过LUT查询即可</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SplitSum_4.png" alt="SplitSum_4"></p>
<ul>
<li>而$R_0$ 则可通过BaseColor（Metallic Workflow）、Specular（Specular Workflow）贴图或软件内置（一般默认为4%）即可获得；（看百人计划美术 2.7 Metallic与Speculer流程）</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>名字由来：</strong> Split sum</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SplitSum_0.png" alt="SplitSum_0"></p>
</li>
</ul>
<h3 id="假设使用Lambert的BRDF"><a href="#假设使用Lambert的BRDF" class="headerlink" title="假设使用Lambert的BRDF"></a>假设使用Lambert的BRDF</h3><script type="math/tex; mode=display">
\int_{\Omega^+}f_r(p,w_i,w_o)cos\theta_i d\omega_i</script><ul>
<li>$f_r = {1\over \pi}$</li>
<li>$\int_{\Omega^+}cos\theta_i d\omega_i = \pi$ （看Games101 Lecture 17-18 Materials二重积分）</li>
<li>所以正好BRDF积分为1</li>
</ul>
<hr>
<h1 id="b-Shadow-from-Environment-Light"><a href="#b-Shadow-from-Environment-Light" class="headerlink" title="b). Shadow from Environment Light"></a>b). Shadow from Environment Light</h1><ul>
<li><p>在实时渲染中，没有完美的解决方案；</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/IBL_Shadow.png" alt="IBL_Shadow"></p>
<ul>
<li>难以用实时渲染方程（那个不等式）来近似：<ul>
<li>Support大，为整个半球</li>
<li>带有Gloosy项，不够smooth</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>工业界方法：</strong></p>
<ul>
<li>只计算最亮的灯光（如UE中HDRI带一个Direction Light）</li>
</ul>
</li>
<li>Related research <ul>
<li>Imperfect shadow maps</li>
<li>Light cuts</li>
<li>RTRT (Real-Time Ray Tracing, might be the ultimate solution)</li>
<li><strong>Precomputed radiance transfer(PRT)</strong></li>
</ul>
</li>
</ul>
<h1 id="c-Spherical-Harmonics-SH-球面谐波函数"><a href="#c-Spherical-Harmonics-SH-球面谐波函数" class="headerlink" title="c). Spherical Harmonics(SH, 球面谐波函数)"></a>c). Spherical Harmonics(SH, 球面谐波函数)</h1><h2 id="c-1-前置知识"><a href="#c-1-前置知识" class="headerlink" title="c.1). 前置知识"></a>c.1). 前置知识</h2><h3 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/FourierTransform.png" alt="FourierTransform"></p>
<ul>
<li><p>这里是偶函数，所以 $sin$ 项系数都为0</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/FourierTransform_Freq.png" alt="FourierTransform_Freq"></p>
</li>
</ul>
<h3 id="Convolution-Theorem"><a href="#Convolution-Theorem" class="headerlink" title="Convolution Theorem"></a>Convolution Theorem</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/Convolution.png" alt="Convolution"></p>
<ul>
<li><strong>时域卷积等于频域乘积</strong></li>
</ul>
<h3 id="A-general-understanding"><a href="#A-general-understanding" class="headerlink" title="A general understanding"></a>A general understanding</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/A general understanding_Basic.png" alt="A general understanding_Basic"></p>
<ul>
<li><p><strong>product intergral:</strong> 相乘后积分，对应离散的情况就是相乘后相加。如：</p>
<ul>
<li><p>$n$维向量$\bold{a} = (x_1, x_2,…,x_n)$ 和 $\bold{b} = (y_1, y_2,…,y_n)$ 进行product intergral，即点乘</p>
<p>$\bold{a} \cdot \bold{b} = x_1y_1+x_2y_2+…+x_ny_n$</p>
</li>
</ul>
</li>
<li><p>我们认为，<strong>函数相乘后积分（product intergral），就是滤波（卷积）</strong></p>
</li>
<li>积分结果的频率，取决于频率最低的项（$f(x),g(x)$）</li>
</ul>
<h3 id="Basis-Functions（基函数）"><a href="#Basis-Functions（基函数）" class="headerlink" title="Basis Functions（基函数）"></a>Basis Functions（基函数）</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/BasisFunc.png" alt="BasisFunc"></p>
<ul>
<li>$c_i$ 为系数</li>
<li>如傅里叶变换中，各项就为正交基；</li>
<li>或者多项式和泰勒展开等</li>
</ul>
<h2 id="c-2-简介"><a href="#c-2-简介" class="headerlink" title="c.2). 简介"></a>c.2). 简介</h2><h3 id="What？"><a href="#What？" class="headerlink" title="What？"></a>What？</h3><ul>
<li><p><strong>球谐函数</strong> 是<strong>一系列</strong> <strong>二维球面函数的正交基函数</strong></p>
<ul>
<li><strong>球谐函数具有正交、归一、完备性</strong></li>
</ul>
<p>如</p>
<script type="math/tex; mode=display">
f(\omega)=\sum_{i} c_{i} \cdot B_{i}(\omega)</script><ul>
<li><p>$f(\omega)$ 为球面函数，$\omega$ 为向量</p>
</li>
<li><p>$c_i$ 为系数</p>
</li>
<li><p>$B_{i}(\omega)$ 则为球谐函数</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_01a.png" alt="SH_01a"></p>
<ul>
<li><strong>说明：</strong><ol>
<li>每一行（$l=n$），频率相同</li>
<li>对于$l=n$行（第$n$阶），函数数量为$2l+1$</li>
<li>每一阶各SH都有编号，即$m$ 从$-l$ 到 $l$；</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="How？"><a href="#How？" class="headerlink" title="How？"></a>How？</h3><ul>
<li><p>每一阶的SH函数，由<strong>勒让德多项式</strong>求得；</p>
</li>
<li><p>如何求得$c_i$ </p>
<ul>
<li><p>投影（Projection）</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_01b.png" alt="SH_01b"></p>
<ul>
<li>类似于傅里叶展开中，函数和各个正交基相乘求系数</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="c-3-性质"><a href="#c-3-性质" class="headerlink" title="c.3). 性质"></a>c.3). 性质</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_BasisFunc.png" alt="SH_BasisFunc"></p>
<ul>
<li>正交性；</li>
<li>投影性；</li>
<li>旋转方便（旋转$f(x)$，相当于旋转基函数$B(i)$）<ul>
<li>SH中，旋转后的基函数，可通过同阶的基函数线性组合得到；</li>
</ul>
</li>
</ul>
<h1 id="d-Shading-from-Environment-Lighting-SH-Diffuse项"><a href="#d-Shading-from-Environment-Lighting-SH-Diffuse项" class="headerlink" title="d). Shading from Environment Lighting(SH, Diffuse项)"></a>d). Shading from Environment Lighting(SH, Diffuse项)</h1><h2 id="d-1-简介"><a href="#d-1-简介" class="headerlink" title="d.1). 简介"></a>d.1). 简介</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/EnvironmentLight01b.png" alt="EnvironmentLight01b"></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_Shading.png" alt="SH_Shading"></p>
<ul>
<li>如果不通过IBL方式，计算shading，<strong>那可以通过SH展开$L_i(p,\omega_i)$ ，即展开Environment Map（</strong>Environment Map可以写成二维函数）</li>
</ul>
<h2 id="d-2-分析Diffuse项的BRDF"><a href="#d-2-分析Diffuse项的BRDF" class="headerlink" title="d.2). 分析Diffuse项的BRDF"></a>d.2). 分析Diffuse项的BRDF</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_Shading02.png" alt="SH_Shading02"></p>
<ul>
<li>$A_l$ 就是基函数的系数；</li>
<li>由图可见，通过SH分析Diffuse项的BRDF后，可得出结论<ul>
<li>当$l\geq3$ (即第四阶开始)，其 $A_l$ 接近0，说明Diffuse项的BRDF频率低，由SH前三阶表示即可；</li>
</ul>
</li>
</ul>
<blockquote>
<p>积分结果的频率，取决于频率最低的项（$f(x),g(x)$）</p>
</blockquote>
<ul>
<li><strong>Diffuse BRDF acts like a low-pass filter</strong></li>
<li>因此，对于Environment Map的展开，只需要SH前三阶即可</li>
</ul>
<h2 id="d-3-SH展开Environment-Map"><a href="#d-3-SH展开Environment-Map" class="headerlink" title="d.3). SH展开Environment Map"></a>d.3). SH展开Environment Map</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_Shading03.png" alt="SH_Shading03"></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/SH_Shading04.png" alt="SH_Shading04"></p>
<ul>
<li>通过求得各球谐函数的结果后，再通过结果逆变换得到Shading结果<ul>
<li>通过ShadingPoint法线，再经过一系列计算（？）得到shading</li>
</ul>
</li>
</ul>
<h1 id="e-Precomputed-Radiance-Transfer"><a href="#e-Precomputed-Radiance-Transfer" class="headerlink" title="e). Precomputed Radiance Transfer"></a>e). Precomputed Radiance Transfer</h1><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_01a.png" alt="PRT_01a"></p>
<ul>
<li>对于渲染方程，如果我们把它每一项都进行Brute-force（蛮力）计算<ul>
<li>$L_i$ : 二维，方位角$\omega$和俯仰角$\theta$</li>
<li>$V(i)$ : 二维，方位角和俯仰角</li>
<li>$\rho(\mathbf{i}, \mathbf{o})$ : 四维，入射角和出射角的方位角和俯仰角</li>
</ul>
</li>
<li>存储压力过于大；</li>
</ul>
<h2 id="e-1-PRT"><a href="#e-1-PRT" class="headerlink" title="e.1). PRT"></a>e.1). PRT</h2><ul>
<li><strong>前提：</strong> 假设场景中除了Lighting，其他都不变；</li>
</ul>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_01b.png" alt="PRT_01b"></p>
<ul>
<li>将RE分为两项，<ul>
<li>Lighting变化；</li>
<li>light transport不变；<ul>
<li>$V(i): $ 二维，$\omega,\theta$，可烘焙为图像，如CubeMap（场景摆放固定）</li>
<li>$\rho(\mathbf{i}, \mathbf{o}): $ <strong>BRDF</strong><ul>
<li><strong>Diffuse Case:</strong> 常数</li>
<li><strong>Gloosy Case:</strong> 四维，$\omega_{i},\theta_i, \omega_o,\theta_o$，入射和出射的方位角和俯仰角（相机固定，入射角固定）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="e-2-Diffuse-Case"><a href="#e-2-Diffuse-Case" class="headerlink" title="e.2). Diffuse Case"></a>e.2). Diffuse Case</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_DiffuseCase01.png" alt="PRT_DiffuseCase01"></p>
<ul>
<li><p>此处（图形学中，大部分情况都是），积分和求和位置可变；</p>
</li>
<li><p>经过预计算后，求得Shading结果只需要<strong>在SH空间中，对向量进行点乘即可</strong>；</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_02b.png" alt="PRT_02b"></p>
</li>
</ul>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_02.png" alt="PRT_02"></p>
<hr>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_03.png" alt="PRT_03"></p>
<h3 id="e-2-1-计算"><a href="#e-2-1-计算" class="headerlink" title="e.2.1). 计算"></a>e.2.1). 计算</h3><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_DiffuseCase02.png" alt="PRT_DiffuseCase02"></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_DiffuseCase03.png" alt="PRT_DiffuseCase03"></p>
<ul>
<li><strong>注意：</strong> 此处两次求和复杂度仍然是$O(n)$，因为SH基函数具有正交性；</li>
</ul>
<ul>
<li><p><strong>Runtime is independent of transport complexity</strong></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_LightTrans.png" alt="PRT_LightTrans"></p>
</li>
</ul>
<ul>
<li><p><strong>计算Light Transport简易理解：</strong> 积分形式和渲染方程相似，$B_i(\bold{i})$ 类似于$L_i(\bold{i})$ ，可看成是将球谐函数作为光照进行Shading得到Light Transport结果</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_LightTrans02.png" alt="PRT_LightTrans02"></p>
</li>
</ul>
<h2 id="e-3-Glossy-Case"><a href="#e-3-Glossy-Case" class="headerlink" title="e.3). Glossy Case"></a>e.3). Glossy Case</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_GlossyCase.png" alt="PRT_GlossyCase"></p>
<ul>
<li>此时，BRDF是关于入射和出射的方位角和俯仰角的四维函数；</li>
<li><strong>做法：</strong> 对 $\bold{o}$ 也进行SH展开；（对于Gloosy不止展开到第三阶）<ul>
<li>light coefficient与Diffuse Case相同，为SH空间的一维向量；</li>
<li>transport matrix则是关于  $\bold{o}$ 和 $\bold{i}$ 四维函数（入射和出射的方位角和俯仰角），为SH空间的二维矩阵；</li>
<li>reflected radiance coefficient则是关于 $\bold{o}$ 的二维函数（出射角的方位角和俯仰角），通过SH逆变换，即可得出相应视角（ $\bold{o}$ ）下的Gloosy radiance；<ul>
<li><font color="red">具体怎么变换的？待实现</font>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="e-4-总结和限制"><a href="#e-4-总结和限制" class="headerlink" title="e.4). 总结和限制"></a>e.4). 总结和限制</h2><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_Summary.png" alt="PRT_Summary"></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/PRT_Limitations.png" alt="PRT_Limitations"></p>
<hr>
<h1 id="f-Wavelet-小波"><a href="#f-Wavelet-小波" class="headerlink" title="f). Wavelet(小波)"></a>f). Wavelet(小波)</h1><p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/Wavelet01.png" alt="Wavelet01"></p>
<ul>
<li><p>定义在二维平面上的一系列基函数</p>
</li>
<li><p><strong>A non-linear approximation:</strong> 二维函数经过小波变换后，大部分系数接近0，这时可采用只记录系数大于一定值的项来近似原函数；</p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/Wavelet02.png" alt="Wavelet02"></p>
<ul>
<li>对于Environment Map，小波变换无法变换球面函数，因此展开为Cubemap后进行小波变换；</li>
<li>每一个矩形经过小波变换后，把<strong>高频信息</strong>放在<strong>右上、右下、左下</strong>子块，剩下的<strong>低频信息</strong>放在<strong>左上</strong>，继续做小波变换；</li>
</ul>
</li>
<li><p><strong>其他应用：</strong>JPG格式图片压缩， 使用类似与小波变换的DCT（Discrete cosine transform，离散余弦变换）、JPEG2000</p>
</li>
<li><p><strong>效果对比：</strong></p>
<p><img src="/2023/02/01/Games202_03_Real-time%20Environment%20Mapping/Wavelet03.png" alt="Wavelet03"></p>
</li>
<li><p><strong>缺点：</strong> </p>
<ul>
<li>旋转不方便（不同于SH基函数的旋转简易型，小波旋转需要从Wavelet展开，旋转后再做小波变换）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
        <tag>IBL</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-2 Real-Time Shadow</title>
    <url>/2023/02/01/Games202_02_Real-Time%20Shadow/</url>
    <content><![CDATA[<h1 id="a-Shadow-Mapping"><a href="#a-Shadow-Mapping" class="headerlink" title="a). Shadow Mapping"></a>a). Shadow Mapping</h1><ul>
<li>A <strong>2-Pass</strong> Algorithm<ol>
<li>Light pass: Generate the SM(Shadow Map)</li>
<li>Camera pass: uses the SM</li>
</ol>
</li>
<li>An image-space algorithm<ul>
<li>Pro(优点): no knowledge of scene’s geometry is required</li>
<li>Con(缺点): causing <strong>self occlusion(自遮挡)</strong> and <strong>aliasing(走样)</strong> issues</li>
</ul>
</li>
</ul>
<h2 id="Pass-1-Render-from-Light"><a href="#Pass-1-Render-from-Light" class="headerlink" title="Pass 1: Render from Light"></a>Pass 1: Render from Light</h2><ul>
<li>输出一张<strong>光源视角</strong>的<strong>深度图（Depth Buffer）</strong></li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SM_Pass01.png" alt="SM_Pass01"></p>
<h2 id="Pass-2-Render-from-Eye-Camera"><a href="#Pass-2-Render-from-Eye-Camera" class="headerlink" title="Pass 2: Render from Eye(Camera)"></a>Pass 2: Render from Eye(Camera)</h2><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SM_Pass02.png" alt="SM_Pass02"></p>
<ul>
<li><p>将光源视角对应的深度转换到View Space, 与Camera视角的深度进行深度比较；</p>
<ul>
<li>如$Depth_{cam} &gt; Depth_{light}$ ，那说明该点<strong>在阴影中</strong>（相机可见，光源不可见）</li>
<li>如$Depth_{cam} &lt; Depth_{light}$ ，那说明该点在<strong>不在阴影中</strong>（相机可见，光源可见）</li>
</ul>
</li>
<li><p><strong>用于比较的深度值：</strong></p>
<ul>
<li><p>经过透视投影中的Squeez矩阵后（具体看Games101 Math笔记），z会被推向远平面</p>
<p>$M_{\text {persp } \rightarrow \text { ortho }}=\left(\begin{array}{cccc}<br>n &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; n &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; n+f &amp; -nf \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{array}\right)$</p>
</li>
<li><p>用于比较的$Depth$ 可以是经过MVP中的深度值（即Depth Buffer中的深度值）；</p>
</li>
<li>也可以是该点在同一空间（如模型空间）中，该点到相机/光源的线性距离；</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SM_vs.png" alt="SM_vs"></p>
<span id="more"></span>
<hr>
<h2 id="a-1-Issues-in-Shadow-Mapping"><a href="#a-1-Issues-in-Shadow-Mapping" class="headerlink" title="a.1). Issues in Shadow Mapping"></a>a.1). Issues in Shadow Mapping</h2><h3 id="a-1-1-Self-occlusion-自遮挡"><a href="#a-1-1-Self-occlusion-自遮挡" class="headerlink" title="a.1.1). Self occlusion(自遮挡)"></a>a.1.1). Self occlusion(自遮挡)</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SelfOcclusion.png" alt="SelfOcclusion"></p>
<ul>
<li><strong>Self occlusion：</strong> 阴影自遮挡，造成阴影毛刺的现象；</li>
<li><strong>原因：</strong> 如上图，<ul>
<li>Shadow Map分辨率有限，一个像素内记录的深度值相同。如图中红色和橙色斜线表示Shadow Map中深度相同的位置（$Depth_A = Depth_{A’}$）；</li>
<li>当计算平面中$B$点是否在阴影中时，$Depth_{light} = z1 = Depth_A$，而相机视角下的点$B$转换到光源视角下对应的深度为 $z2$ ，即$Depth_{cam} = z2 = Depth_B$</li>
<li>因此，$Depth_{cam} &gt; Depth_{light}$ ，说明该点<strong>在阴影中</strong>，因此造成Self occlusion</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>解决方法：</strong> 引入<strong>Bias</strong>；</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SelfOcclusion_Bias.png" alt="SelfOcclusion_Bias" style="zoom:50%;"></p>
<ul>
<li>认为对于$B$点，如$Depth_{cam} &gt; Depth_{light}$，但$Depth_{light}$ 处于橙色中，那该点仍然不在阴影中；</li>
<li>即：<ul>
<li>$Depth_{cam} &gt; Depth_{light}+bias$，才使得该点<strong>在阴影中</strong>；</li>
<li>$Depth_{cam} &lt; Depth_{light}+bias$，该点<strong>不在阴影中</strong>；</li>
</ul>
</li>
<li>易得，当光源方向垂直于平面时，所需的Bias最小，因此可引入光源与平面法线的夹角 $cos\alpha$ ，来调整Bias大小；</li>
</ul>
</li>
</ul>
<ul>
<li>引入bias会造成的问题：Detached shadow(不接触阴影，Peter Panning)</li>
</ul>
<h3 id="a-1-2-Detached-shadow"><a href="#a-1-2-Detached-shadow" class="headerlink" title="a.1.2). Detached shadow"></a>a.1.2). Detached shadow</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/Detached shadow.png" alt="Detached shadow"></p>
<ul>
<li><p><strong>解决方法：</strong></p>
<ul>
<li><p>Second-depth shadow mapping</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/Second-depthShadowMapping.png" alt="Second-depthShadowMapping"></p>
</li>
<li><p>工业界实际没什么人用，只是学术界提出的解决方案</p>
</li>
</ul>
</li>
</ul>
<h3 id="a-1-3-Aliasing"><a href="#a-1-3-Aliasing" class="headerlink" title="a.1.3). Aliasing"></a>a.1.3). Aliasing</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/Aliasing.png" alt="Aliasing"></p>
<h1 id="b-Math"><a href="#b-Math" class="headerlink" title="b). Math"></a>b). Math</h1><h2 id="b-1-Approximation-in-RTR"><a href="#b-1-Approximation-in-RTR" class="headerlink" title="b.1). Approximation in RTR"></a>b.1). Approximation in RTR</h2><ul>
<li><p>RTR中常用的不等式；</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/Approximation in RTR.png" alt="Approximation in RTR"></p>
<ul>
<li>该不等式“准确”的条件：<ol>
<li><strong>Support（支撑集，积分的范围）足够小时；</strong></li>
<li><strong>$g(x)$ 足够光滑（指频率低，起伏小）</strong></li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="b-2-渲染方程的不等式"><a href="#b-2-渲染方程的不等式" class="headerlink" title="b.2). 渲染方程的不等式"></a>b.2). 渲染方程的不等式</h2><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/ApproximationinRTR_ShadowMap.png" alt="ApproximationinRTR_ShadowMap"></p>
<ul>
<li>$V(p,\omega_i)$为Visibility，阴影因子；</li>
<li>单独拆出Visibility，即<strong>先做shading，后做Visibility，最后相乘</strong></li>
</ul>
<h2 id="b-3-in-Shadow-Mapping"><a href="#b-3-in-Shadow-Mapping" class="headerlink" title="b.3). in Shadow Mapping"></a>b.3). in Shadow Mapping</h2><p>什么情况下，Shadow Mapping（先着色，后计算阴影）是准确的；</p>
<h3 id="Small-support"><a href="#Small-support" class="headerlink" title="Small support"></a>Small support</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/ShadowMappingApproximation.png" alt="ShadowMappingApproximation"></p>
<ul>
<li>在计算阴影中，支撑集小，意味着光源小；</li>
<li>因此，对于<strong>点光源</strong>和<strong>方向光源</strong>，做Shadow Mapping硬阴影结果是准确的；</li>
</ul>
<h3 id="Smooth-integrand"><a href="#Smooth-integrand" class="headerlink" title="Smooth integrand"></a>Smooth integrand</h3><p>对于不等式处理后的渲染方程，$g(x)$ 代表光照。</p>
<ul>
<li>当<strong>$g(x)$ 足够光滑（指频率低，起伏小）</strong>，不等式为准确的；</li>
<li>$L_i$ 光滑，对应光源为<strong>面光源</strong>；</li>
<li>BRDF，即$f_r$ 光滑，对应<strong>Diffuse项</strong>；</li>
<li>即对于光源为面光源的Diffuse项，不等式处理后的渲染方程是准确的；</li>
</ul>
<h1 id="c-PCSS-Percentage-Closer-Soft-Shadow"><a href="#c-PCSS-Percentage-Closer-Soft-Shadow" class="headerlink" title="c). PCSS(Percentage-Closer Soft Shadow)"></a>c). PCSS(Percentage-Closer Soft Shadow)</h1><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCSS.png" alt="PCSS"></p>
<h2 id="c-1-PCF-Percentage-Closer-Filtering"><a href="#c-1-PCF-Percentage-Closer-Filtering" class="headerlink" title="c.1). PCF(Percentage Closer Filtering)"></a>c.1). PCF(Percentage Closer Filtering)</h2><ul>
<li>PCF用于抗锯齿，而不用于软阴影（用于软阴影的叫PCSS，两者实质是一个东西，但应用不同叫法不同）</li>
<li>在<strong>生成Shadow Map后，阴影比较时（即对阴影比较的结果）</strong>，进行Filtering<ul>
<li>面光源生成Shadow Map：以面光源的中心点(放置相机)生成shadow map</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCF.png" alt="PCF"></p>
<ul>
<li><p><strong>做法：</strong> 不止对着色点与其在Shadow Map中的对应点进行深度比较，而是<strong>着色点深度</strong>与其<strong>在Shadow Map中对应点及其周围点深度</strong>进行比较，最后<strong>对各个Visibility的结果取平均值</strong>（或加权平均）</p>
<ul>
<li><strong>eg1</strong>. $P$点在Cam视角下深度为$Depth_p$，转换到光源视角下深度为$Depth_{p’}$，$Depth_{p’}$ 与其在Shadow Map中对应点周围3x3（<strong>Filter size</strong>）像素进行比较，得到结果<script type="math/tex; mode=display">
\begin{array}{l}
1,0,1 \\
1,0,1 \\
1,1,0
\end{array}</script>取平均得到Visibility为 0.667</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Filter size</strong><ul>
<li>Small -&gt; sharper</li>
<li>Large -&gt; softer</li>
<li>为选取合适的Filter size，产生了PCSS</li>
</ul>
</li>
</ul>
<h2 id="c-2-PCSS-Percentage-Closer-Soft-Shadow"><a href="#c-2-PCSS-Percentage-Closer-Soft-Shadow" class="headerlink" title="c.2). PCSS(Percentage-Closer Soft Shadow)"></a>c.2). PCSS(Percentage-Closer Soft Shadow)</h2><h3 id="c-2-1-什么是PCSS？"><a href="#c-2-1-什么是PCSS？" class="headerlink" title="c.2.1). 什么是PCSS？"></a>c.2.1). 什么是PCSS？</h3><ul>
<li><strong>关键：</strong> 自适应Filter size</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCSS01.png" alt="PCSS01"></p>
<ul>
<li>观察可得：<ul>
<li>钢笔（Blocker）与接收平面（Receiver）的距离越小（笔尖），阴影越硬</li>
<li>钢笔（Blocker）与接收平面（Receiver）的距离越大（笔尖），阴影越软</li>
</ul>
</li>
<li>即阴影的软硬程度，一部分取决于Blocker和Receiver的距离</li>
</ul>
<hr>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCSS_Key.png" alt="PCSS_Key"></p>
<ul>
<li><p>阴影的软硬取决于</p>
<ul>
<li>$w_{Light}$ （光源的宽度）</li>
<li>$d_{Blocker}$ 与 $d_{BtoR}$ 的比值；</li>
</ul>
</li>
<li><p><strong>Blocker定义：</strong></p>
<p>Shading point变换到Light视角，对应深度为$Depth_{scene}$ 。<strong>查询区域内</strong>，深度值$z &lt; Depth_{scene}$ 的texel即为Blocker；</p>
</li>
<li><p>$d_{Blocker}$ 为 <strong>Average blocker distance</strong></p>
<ul>
<li><p><strong>Average blocker distance：</strong> Shadow Map一定范围内的Blocker的深度平均值</p>
</li>
<li><p>类似eg1</p>
<blockquote>
<p><strong>eg1</strong>. $P$点在Cam视角下深度为$Depth_p$，转换到光源视角下深度为$Depth_{p’}$，$Depth_{p’}$ 与其在Shadow Map中对应点周围3x3（<strong>Filter size</strong>）像素进行比较，得到结果</p>
<script type="math/tex; mode=display">
\begin{array}{l}
1,0,1 \\
1,0,1 \\
1,1,0
\end{array}</script><p>取平均得到Visibility为 0.667</p>
</blockquote>
<p>其中，Visibility为0的点，即 处于阴影中，$Depth_{cam} &gt; Depth_{light}+bias$ 的点即为Blocker，对Blocker在Shadow Map中的深度值取平均值，即得到Average blocker distance</p>
</li>
</ul>
</li>
</ul>
<h3 id="c-2-2-做法"><a href="#c-2-2-做法" class="headerlink" title="c.2.2). 做法"></a>c.2.2). 做法</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCSS_How.png" alt="PCSS_How"></p>
<p>首先将shading point点$x$投应到shadow map上,找到其对应的像素点$P$。PCSS算法的实现流程如下：</p>
<p>第一步：Blocker search，即获取<strong>某个区域</strong>的平均遮挡物深度（在点p附近取一个范围(这个范围是自己定义或动态计算的),将范围内各像素的最小深度与x的实际深度比较,从而判断哪些像素是遮挡物，把所有遮挡物的深度记下来取个平均值作为blocker distance。）</p>
<p>第二步：Penumbra estimation，使用平均遮挡物深度计算滤波核尺寸（用取得的遮挡物深度距离来算在PCF中filtering的范围。）</p>
<script type="math/tex; mode=display">
w_{\text {Penumbra }}=\left(d_{\text {Receiver }}-d_{\text {Blocker }}\right) \cdot w_{\text {Light }} / d_{\text {Blocker }}</script><p>第三步：Percentage Closer Filtering，对应该滤波核尺寸应用PCF算法。</p>
<ul>
<li>如何动态计算Blocker search的<strong>“某个范围”</strong><ul>
<li><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCSS_Region.png" alt="PCSS_Region"></li>
<li>Light越远，Region越小；Light越近，Region越大；（好像和图不太对应，如非要对应，就类似与Shadow Map位置不变，Light距离变大/小）</li>
</ul>
</li>
</ul>
<h4 id="那么PCSS中那些步骤会导致速度变慢？"><a href="#那么PCSS中那些步骤会导致速度变慢？" class="headerlink" title="那么PCSS中那些步骤会导致速度变慢？"></a>那么PCSS中那些步骤会导致速度变慢？</h4><ul>
<li><p>第一步：Blocker search，需要多次采样查询深度信息并比较，计算Blocker的平均深度$d_{Blocker}$</p>
</li>
<li><p>第三步：PCF，阴影越软→滤波核尺寸越大→采样查询次数变多→速度变慢</p>
<ul>
<li>由此可见，主要是多次采样并比较的方法使得速度变慢；</li>
</ul>
</li>
<li><p><strong>加速方法：</strong></p>
<ul>
<li>随机采样，后降噪；</li>
</ul>
<blockquote>
<p>如果觉得区域过大不想对每一个texels都进行比较,就可以通过随机采样其中的texels，而不是全部采样，会得到一个近似的结果,近似的结果就可能会导致出现噪声。工业的处理的方式就是先稀疏采样得到一个有噪声的visibility的图,接着再在图像空间进行降噪。</p>
</blockquote>
<ul>
<li><strong>Variance Soft Shadow Mapping(VSSM)</strong></li>
</ul>
</li>
</ul>
<hr>
<h3 id="c-2-3-Math"><a href="#c-2-3-Math" class="headerlink" title="c.2.3). Math"></a>c.2.3). Math</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/PCF_02.png" alt="PCF_02"></p>
<script type="math/tex; mode=display">
V(x)=\sum_{q \in \mathcal{N}(p)} w(p, q) \cdot \chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right]</script><ul>
<li>其中$\chi^{+}$ 类似于$step()$ 函数<ul>
<li>$D_{\mathrm{SM}}(q)-D_{\text {scene }}(x) \geq 0$， 即$Depth_{ShadowMap} \geq Depth_{cam}$，$\chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right] = 1$</li>
<li>$D_{\mathrm{SM}}(q)-D_{\text {scene }}(x) &lt; 0$， 即$Depth_{ShadowMap} &lt; Depth_{cam}$，$\chi^{+}\left[D_{\mathrm{SM}}(q)-D_{\text {scene }}(x)\right] = 0$</li>
</ul>
</li>
</ul>
<hr>
<h1 id="d-Variance-Soft-Shadow-Mapping-VSSM"><a href="#d-Variance-Soft-Shadow-Mapping-VSSM" class="headerlink" title="d). Variance Soft Shadow Mapping(VSSM)"></a>d). Variance Soft Shadow Mapping(VSSM)</h1><ul>
<li><strong>vs PCSS: </strong> Fast blocker search(step 1) and filtering(step 3)</li>
<li><strong>关键思想：</strong> 只用知道有多少（百分比）的 texels 在着色点前面；</li>
</ul>
<h2 id="d-1-Solve-step3-PCF"><a href="#d-1-Solve-step3-PCF" class="headerlink" title="d.1). Solve step3(PCF)"></a>d.1). Solve step3(PCF)</h2><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_01.png" alt="VSSM_01"></p>
<ul>
<li><p>通过<strong>正态分布（Normal distribution）</strong>，求得着色点的深度在采样点中大概的排位，即可得到<strong>近似</strong>的结果；</p>
<ul>
<li><p>需要定义一个正态分布，需要得知其<strong>均值（mean）</strong>和<strong>方差（variance）</strong></p>
</li>
<li><p><strong>Mean:</strong></p>
<ol>
<li>Hardware MIPMAPing (快，但不一定准确);</li>
<li>Summed Area Tables (SAT, 积分表);</li>
</ol>
</li>
<li><strong>Variance:</strong><ul>
<li>$Var(X) = E(X^2)-E^2(X)$ ，方差等于平方的均值（均方值）减去均值的平方；</li>
<li>只需要在Depth Buffer的空余通道中多存储一个$depth^2$；</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>通过求正态分布$P(x&gt;Depth_{cam}) (Depth_{cam}为着色点转换到光源视角的深度)$ 的面积，即求CDF（<strong>累积分布函数</strong> ）即可求得<em>Visibility</em></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_CDF.png" alt="VSSM_CDF"></p>
<ul>
<li>CDF(x) 求解：<ol>
<li>查表；</li>
<li>切比雪夫不等式；</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>切比雪夫不等式</strong>（并不需要知道具体的分布情况，而是通过不等式直接得出，如使用切比雪夫就不用正态分布，只需要求得<strong>均值</strong>和<strong>方差</strong>即可，但是也需要分布情况较为简单）</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_Chebychev.png" alt="VSSM_Chebychev"></p>
<ul>
<li>通过近似值约等出Visibility的结果，即红色面积；<ul>
<li>（准确的条件：）$t\geq mean$ （但一般不管这个，就理解成约等就行）</li>
</ul>
</li>
<li>至此解决了Step3</li>
</ul>
</li>
</ul>
<h2 id="d-2-Solve-step1"><a href="#d-2-Solve-step1" class="headerlink" title="d.2). Solve step1"></a>d.2). Solve step1</h2><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_step01.png" alt="VSSM_step01"></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_step01b.png" alt="VSSM_step01b"></p>
<ul>
<li><p>Shading point转换到光源下，</p>
</li>
<li><p><strong>关键式：</strong></p>
<script type="math/tex; mode=display">
\frac{N_{1}}{N} z_{\text {unocc }}+\frac{N_{2}}{N} z_{o c c}=z_{\text {Avg }}</script><ul>
<li>$\frac{N_{1}}{N} = P(x&gt;t)$ ，通过切比雪夫不等式求出；</li>
<li>$\frac{N_{2}}{N} = 1-P(x&gt;t)$</li>
<li>$z_{Avg}$：SM中，采样范围深度均值</li>
<li>$z_{unocc}$：近似等于$t$</li>
<li><strong>最终</strong>，由关键式得出$ z_{o c c}$</li>
</ul>
</li>
</ul>
<h2 id="d-3-Summed-Area-Tables-SAT-积分表"><a href="#d-3-Summed-Area-Tables-SAT-积分表" class="headerlink" title="d.3). Summed Area Tables (SAT, 积分表)"></a>d.3). Summed Area Tables (SAT, 积分表)</h2><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SAT_1D.png" alt="SAT_1D"></p>
<ul>
<li>SAT为数据结构，使用前缀和算法</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SAT_2D.png" alt="SAT_2D"></p>
<ul>
<li>2D的SAT：每一个点记录左上角区域的和；<ul>
<li>先计算一行的一维SAT；</li>
<li>再对计算后的SAT进行列方向的累加，求出二维的SAT；</li>
</ul>
</li>
<li>求蓝色区域和只需要查询四次SAT即可；</li>
<li>SAT的并行性：<ul>
<li>由于先进行行方向SAT计算，后进行列方向SAT计算，具有一定的并行性；</li>
</ul>
</li>
</ul>
<h2 id="d-4-缺陷"><a href="#d-4-缺陷" class="headerlink" title="d.4). 缺陷"></a>d.4). 缺陷</h2><p>由于使用了切比雪夫不等式或正态分布，隐含了<strong>Shadow Map中对应范围的深度分布要较为简单或接近正态分布</strong></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_Con.png" alt="VSSM_Con"></p>
<ul>
<li>如上右图，分布主要集中在三个值，过于离散，造成VSSM不准确；</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_Con2.png" alt="VSSM_Con2"></p>
<ul>
<li><p><strong>Light leaking（漏光）</strong></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/VSSM_LightLeaking.png" alt="VSSM_LightLeaking"></p>
</li>
</ul>
<h1 id="e-Moment-Shadow-Mapping-MSM"><a href="#e-Moment-Shadow-Mapping-MSM" class="headerlink" title="e). Moment Shadow Mapping(MSM)"></a>e). Moment Shadow Mapping(MSM)</h1><ul>
<li><p>VSSM不够准确，需要用更高的<strong>矩（Moment）</strong>来描述PCF（Use <strong>higher order moments</strong> to represent a distribution）</p>
</li>
<li><p><strong>矩（Moments）：</strong></p>
<ul>
<li><p>Quite a few variations on the definition</p>
</li>
<li><p>We use the simplest:</p>
<p>$x,x^2,x^3,x^4,…$</p>
</li>
<li><p>VSSM中，我们用到了二阶矩（$depth^2$）</p>
</li>
<li>有点类似于展开（比如泰勒展开）；</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/MSM_Moments.png" alt="MSM_Moments"></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/MSM_ProAndCons.png" alt="MSM_ProAndCons"></p>
<h1 id="f-Distance-Field-Soft-Shadow-SDF-有向距离场"><a href="#f-Distance-Field-Soft-Shadow-SDF-有向距离场" class="headerlink" title="f). Distance Field Soft Shadow(SDF, 有向距离场)"></a>f). Distance Field Soft Shadow(SDF, 有向距离场)</h1><h2 id="f-1-Distance-functions"><a href="#f-1-Distance-functions" class="headerlink" title="f.1). Distance functions"></a>f.1). Distance functions</h2><ul>
<li><p><strong>定义：</strong> 对于空间中任意一点，其值为<strong>到物体的最近距离</strong>。并且可定义其在内部符号（Signed）为负，在外符号为正，即为有向距离场（Signed Distance Functions, SDF）;</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/DF.png" alt="DF"></p>
</li>
</ul>
<ul>
<li><p><strong>An Example:</strong> Blending (linear interp.) a moving boundary</p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SDF_01.png" alt="SDF_01"></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SDF_02.png" alt="SDF_02"></p>
</li>
<li><p><strong>背后理论：</strong> 最优传输（Optimal Transport）</p>
</li>
<li><p><strong>SDF性质：</strong></p>
<ul>
<li>对于刚体，SDF不需要实时计算；<ul>
<li>$n$个刚体运动，对于一个点$P$ ，就有$SDF_1(P), SDF_2(P)……SDF_n(P)$，那该点最后的SDF值即为$min(SDF_1(P), SDF_2(P)……SDF_n(P))$</li>
</ul>
</li>
<li>对于形变的物体，SDF需要实时计算；</li>
</ul>
</li>
<li><p><strong>用途：</strong></p>
<ul>
<li>Ray marching</li>
<li>软阴影</li>
</ul>
</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/DistanceField.png" alt="DistanceField"></p>
<ul>
<li><strong><font color="red">WARNING：不要看到图形就认为SDF是存储一张图形，SDF是三维存储，对于空间中每一个点都有其SDF值</font></strong></li>
</ul>
<h3 id="f-1-1-Ray-marching"><a href="#f-1-1-Ray-marching" class="headerlink" title="f.1.1). Ray marching"></a>f.1.1). Ray marching</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/RayMarching.png" alt="RayMarching"></p>
<ul>
<li><p><strong>作用：</strong>Ray marching(sphere tracing)用来<strong>在SDF中射线与物体求交</strong></p>
</li>
<li><p><strong>关键思想：</strong></p>
<p><strong>SDF中一点的值，即是该点与周围物体不相交的“安全距离”</strong>。如对于点$P$，在周围半径为$SDF(P)$ 的距离内，不与物体相交；</p>
<ul>
<li>因此，以图为例，求SDF中射线与物体相交只需要依次步进$SDF(P)$ , $SDF(A)$ , $SDF(P)$，只需要终点的$SDF(Last)$ 小于一定值，即该点为交点（或一定次数步进后仍没交点，说明该点无交点）</li>
</ul>
</li>
</ul>
<h3 id="f-1-2-Soft-Shadow"><a href="#f-1-2-Soft-Shadow" class="headerlink" title="f.1.2). Soft Shadow"></a>f.1.2). Soft Shadow</h3><p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SDF_SS.png" alt="SDF_SS"></p>
<ul>
<li><p><strong>作用：</strong> 使用SDF来近似表现遮挡百分比（<em>Visibility</em>）</p>
</li>
<li><p><strong>关键思想：</strong></p>
<p><strong>SDF中一点的值，即是该点实现不被某一物体遮挡“安全角度”</strong></p>
<ul>
<li>如着色点$P$看向面光源$AB$，通过得到射向面光源中点的Ray marching来得到”安全角度”。通过安全角度在总角度中的占比，来近似<em>Visibility</em></li>
<li><strong>Smaller “safe” angle &lt;-&gt; less visibility</strong></li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>安全角度：</strong></p>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SDF_SS02.png" alt="SDF_SS02"></p>
<ul>
<li><strong>缺点：</strong> 在shader中涉及反三角函数，开销大；</li>
</ul>
<p><img src="/2023/02/01/Games202_02_Real-Time%20Shadow/SDF_SafeAngle.png" alt="SDF_SafeAngle"></p>
<ul>
<li>因此用<script type="math/tex; mode=display">
\min \left\{\frac{k \cdot \operatorname{SDF}(p)}{|p-o|}, 1.0\right\}</script>来替代，并用 <strong>$k$ 控制阴影的软硬程度</strong>；</li>
</ul>
</li>
</ul>
<h2 id="f-2-Pros-and-Cons"><a href="#f-2-Pros-and-Cons" class="headerlink" title="f.2). Pros and Cons"></a>f.2). Pros and Cons</h2><ul>
<li><strong>Pros</strong><ul>
<li>快（使用角度，不考虑生成）</li>
<li>高质量</li>
</ul>
</li>
<li><strong>Cons</strong><ul>
<li>需要预计算</li>
<li>需要额外存储（不仅仅是图形，而是需要<strong>三维空间存储</strong>）</li>
<li>对于形变物体需要大量实时计算</li>
<li>……</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
        <tag>Shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-1 Recap of CG Basics</title>
    <url>/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/</url>
    <content><![CDATA[<h1 id="a-Graphics-Pipeline"><a href="#a-Graphics-Pipeline" class="headerlink" title="a). Graphics Pipeline"></a>a). Graphics Pipeline</h1><p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/GraphicsPipeline.png" alt="GraphicsPipeline"></p>
<h1 id="b-OpenGL"><a href="#b-OpenGL" class="headerlink" title="b). OpenGL"></a>b). OpenGL</h1><p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/OpenGL01a.png" alt="OpenGL01a"></p>
<h2 id="A-Place-objects-models"><a href="#A-Place-objects-models" class="headerlink" title="A. Place objects/models"></a>A. Place objects/models</h2><ul>
<li>Model specification(模型信息)</li>
<li>Model transformation</li>
</ul>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/OpenGL_A.png" alt="OpenGL_A"></p>
<h2 id="B-Set-up-an-easel-画架"><a href="#B-Set-up-an-easel-画架" class="headerlink" title="B. Set up an easel(画架)"></a>B. Set up an easel(画架)</h2><ul>
<li>View transformation</li>
<li>Create /use a <strong><font color="red">framebuffer</font></strong></li>
</ul>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/OpenGL_B.png" alt="OpenGL_B"></p>
<h2 id="C-Attach-a-canvas-to-the-easel"><a href="#C-Attach-a-canvas-to-the-easel" class="headerlink" title="C. Attach a canvas to the easel"></a>C. Attach a canvas to the easel</h2><p>指定Pass到framebuffer，就和Unity中FS的SV_TARGET一样。</p>
<p><strong>E. you can also paint multiple pictures using the same easel</strong></p>
<ul>
<li><p>一个Rendering <strong>Pass</strong>，使用<strong>一个framebuffer</strong>，渲染一个或多个texture（shading, depth, etc.）作为输出</p>
</li>
<li><p>即一个framebuffer可以绑定多个纹理（MRT）</p>
</li>
<li><p><strong>Multiple Render Target（MRT）</strong>是一种指可以使绘制程序在单帧中同时渲染多个Render Target</p>
</li>
</ul>
<h2 id="D-Paint-to-the-canvas"><a href="#D-Paint-to-the-canvas" class="headerlink" title="D. Paint to the canvas"></a>D. Paint to the canvas</h2><ul>
<li>This is when vertex / fragment shaders will be used</li>
</ul>
<ul>
<li><strong>For each vertex in parallel</strong>     <ul>
<li>OpenGL calls user-specified vertex shader: Transform vertex (ModelView, Projection), other ops </li>
</ul>
</li>
<li>For each primitive, OpenGL rasterizes <ul>
<li>Generates a fragment for each pixel the fragment covers</li>
</ul>
</li>
</ul>
<ul>
<li>For each fragment in parallel <ul>
<li>OpenGL calls user-specified fragment shader: Shading and lighting calculations </li>
<li>OpenGL handles z-buffer depth test unless overwritten</li>
</ul>
</li>
</ul>
<h2 id="Summary-in-each-pass"><a href="#Summary-in-each-pass" class="headerlink" title="Summary: in each pass"></a>Summary: in each pass</h2><ul>
<li><p>Specify objects, camera, MVP, etc. </p>
</li>
<li><p>Specify framebuffer and input/output textures </p>
</li>
<li><p>Specify vertex / fragment shaders </p>
</li>
<li><p><strong>(When you have everything specified on the GPU)</strong> Render</p>
</li>
</ul>
<span id="more"></span>
<h1 id="c-Shading-Language-GLSL"><a href="#c-Shading-Language-GLSL" class="headerlink" title="c). Shading Language(GLSL)"></a>c). Shading Language(GLSL)</h1><h2 id="c-1-Initializing"><a href="#c-1-Initializing" class="headerlink" title="c.1). Initializing"></a>c.1). Initializing</h2><ul>
<li><p>Create shader(Vertex and Fragment) </p>
</li>
<li><p>Compile shader</p>
</li>
<li><p>Attach shader to program</p>
</li>
<li><p>Link program</p>
</li>
<li>Use program</li>
</ul>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/Shader Initialization Code.png" alt="Shader Initialization Code"></p>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/LinkingShaderProgram.png" alt="LinkingShaderProgram"></p>
<h2 id="c-2-Phong-Shader-in-Assignment-0"><a href="#c-2-Phong-Shader-in-Assignment-0" class="headerlink" title="c.2). Phong Shader in Assignment 0"></a>c.2). Phong Shader in Assignment 0</h2><ul>
<li><p><strong>Vertex Shader</strong></p>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/VertexShader.png" alt="VertexShader"></p>
<ul>
<li>attribute: 顶点附带的属性，FS中不会出现</li>
<li>uniform: 全局变量，由CPU直接传递给GPU</li>
<li>varying: 需要插值的变量</li>
<li>highp: 高精度</li>
<li>gl_Position: 类似于Unity的SV_Position，裁剪空间中的顶点位置；</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Fragment Shader</strong></p>
<p><img src="/2023/02/01/Games202_01_Recap%20of%20CG%20Basics/FragmentShader.png" alt="FragmentShader"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Games202</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games202</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101_19_20 Cameras Lenses and Light Fileds</title>
    <url>/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/</url>
    <content><![CDATA[<h1 id="Lecture19"><a href="#Lecture19" class="headerlink" title="Lecture19"></a>Lecture19</h1><ul>
<li><p>讲相机的，老本行笔记直接看别人的吧；</p>
<p><a href="http://t.csdn.cn/4gODC">http://t.csdn.cn/4gODC</a></p>
</li>
</ul>
<h2 id="b-Light-Field-Lumingraph-光场"><a href="#b-Light-Field-Lumingraph-光场" class="headerlink" title="b). Light Field / Lumingraph(光场)"></a>b). Light Field / Lumingraph(光场)</h2><table frame="void">
    <tr>
    <td><center><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/LF_000.png" alt="LF_000" height="250"></center></td>
    <td><center><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/LF_001.png" alt="LF_001" height="250"></center></td>
    </tr>
</table>

<ul>
<li>两者看到的光线信息完全相同，那人眼中的世界就完全相同；</li>
</ul>
<h3 id="b-1-The-Plenoptic-Function-全光函数"><a href="#b-1-The-Plenoptic-Function-全光函数" class="headerlink" title="b.1). The Plenoptic Function(全光函数)"></a>b.1). The Plenoptic Function(全光函数)</h3><p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/PlenopticFunc.png" alt="PlenopticFunc"></p>
<ul>
<li>现实世界可以用一个七维的全光函数进行描述，记录了任意时间，不同位置的不同方向接收光的波长</li>
<li>参数：<ul>
<li>$\theta$ ：方位角</li>
<li>$\phi$：俯仰角</li>
<li>$\lambda$：波长</li>
<li>$t$：时间</li>
<li>$V_X，V_Y,V_Z$：位置</li>
</ul>
</li>
</ul>
<h3 id="b-2-Light-Field"><a href="#b-2-Light-Field" class="headerlink" title="b.2). Light Field"></a>b.2). Light Field</h3><p><strong>光场</strong>则可以认为是记录了任何一个点所接收的任何一个方向的irradiance。</p>
<ul>
<li>可用四维函数表示，二维描述位置，二维描述方向</li>
<li>光线可由两个点定义，因此这四维可改写成s,t,u,v。即两个平面上的位置； </li>
</ul>
<p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/LF_2Plane.png" alt="LF_2Plane"></p>
<ul>
<li><p>由此得出，描述一个物体的光场，只需要记录其包围盒上四维的全光函数即可</p>
<p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/PF_Thing.png" alt="PF_Thing"></p>
</li>
<li><p>从uv平面看向st平面，得到的是这个物体从各个方向看的相应的图像；</p>
</li>
<li><p>而从st看向uv，则得到的是这个物体在这个方向的irradiance的集合（不是合起来，而是类似二维数组的集合）即<strong>radiance</strong></p>
<p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/uvst.png" alt="uvst"></p>
</li>
<li><p><strong>st到uv</strong></p>
<p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/st2uv.png" alt="st2uv"></p>
<ul>
<li>记录不同方向的光线radiance（注意和拜耳阵列的区分，这里三色只是代表不同方向）</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="b-3-Light-Field-Camera"><a href="#b-3-Light-Field-Camera" class="headerlink" title="b.3). Light Field Camera"></a>b.3). Light Field Camera</h3><p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/LF_camera.png" alt="LF_camera"></p>
<ul>
<li><p>支持先拍照，后期动态调焦、光圈等</p>
<p><img src="/2022/10/03/Games101_19_20_Cameras_Lenses_LightFileds/st2uv2.png" alt="st2uv2"></p>
</li>
</ul>
<h1 id="Lecture20"><a href="#Lecture20" class="headerlink" title="Lecture20"></a>Lecture20</h1>]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101_17_18 Materials</title>
    <url>/2022/10/03/Games101_17_18_Materials/</url>
    <content><![CDATA[<h1 id="Lecture-17-Materials-and-Appearances"><a href="#Lecture-17-Materials-and-Appearances" class="headerlink" title="Lecture 17 Materials and Appearances"></a>Lecture 17 Materials and Appearances</h1><p><strong>Material == BRDF</strong></p>
<h2 id="a-Diffuse-Lambertian-Material"><a href="#a-Diffuse-Lambertian-Material" class="headerlink" title="a). Diffuse / Lambertian Material"></a>a). Diffuse / Lambertian Material</h2><p><img src="/2022/10/03/Games101_17_18_Materials/Diffuse_Lambertian_Mat.png" alt="Diffuse_Lambertian_Mat"></p>
<ul>
<li><p>对于此类材质，当假定各方向9入射的光线radiance相同，反射的光同样是Uniform的。因为能量守恒（假定不发光，不吸收），使得进入的 <strong><em>Irradiance<sub>入</sub></em></strong> 和出去的 <strong><em>Irradiance<sub>出 </sub></em></strong>相同；</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Diffuse_Lambertian_Mat02.png" alt="Diffuse_Lambertian_Mat02"></p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1Bt41187ZF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=627aabb12e63b6a55ebc4e4799bb0408"><em>二重积分</em></a></p>
<table frame="void">
    <tr>
    <td><center><img src="/2022/10/03/Games101_17_18_Materials/半球积分.png" alt="半球积分" height="250"></center></td>
    <td><center><img src="/2022/10/03/Games101_17_18_Materials/半球积分2.jpg" alt="半球积分2" height="250"></center></td>
    </tr>
</table>

</li>
</ul>
</li>
</ul>
<h2 id="b-Glossy-material"><a href="#b-Glossy-material" class="headerlink" title="b). Glossy material"></a>b). Glossy material</h2><p><img src="/2022/10/03/Games101_17_18_Materials/Glossy_Mat.png" alt="Glossy_Mat"></p>
<h2 id="c-Ideal-reflective-refractive-material-BSDF"><a href="#c-Ideal-reflective-refractive-material-BSDF" class="headerlink" title="c). Ideal reflective / refractive material(BSDF)"></a>c). Ideal reflective / refractive material(BSDF)</h2><p><img src="/2022/10/03/Games101_17_18_Materials/Reflective_Refractive_Mat.png" alt="Reflective_Refractive_Mat"></p>
<ul>
<li><p>计算镜面反射方向</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Perfect_Specular_Reflection.png" alt="Perfect_Specular_Reflection"></p>
<ul>
<li>几何</li>
<li>方位角</li>
</ul>
</li>
</ul>
<h3 id="c-1-Specular-Refraction"><a href="#c-1-Specular-Refraction" class="headerlink" title="c.1). Specular Refraction"></a>c.1). Specular Refraction</h3><p><img src="/2022/10/03/Games101_17_18_Materials/Specular Refraction.png" alt="Specular Refraction"></p>
<ul>
<li><p>现象：色散、Caustic等</p>
</li>
<li><p><strong>Snell’s Law</strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Snell Law.png" alt="Snell Law"></p>
<ul>
<li><p>可推出只有当光密到光疏介质时，才有可能发生折射；（${n_i\over n_t}&gt;1$）</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Snell Law_02.png" alt="Snell Law_02"></p>
</li>
</ul>
</li>
<li><p>折射属于BT(Transmit)DF;</p>
<ul>
<li><strong>BTDF + BRDF = BSDF</strong> </li>
</ul>
</li>
</ul>
<h3 id="c-2-Fresnel-Reflection-菲涅尔"><a href="#c-2-Fresnel-Reflection-菲涅尔" class="headerlink" title="c.2). Fresnel Reflection(菲涅尔)"></a>c.2). Fresnel Reflection(菲涅尔)</h3><ul>
<li>反应了特定方向的入射光的反射和折射的比例；</li>
</ul>
<table frame="void">
    <tr>
    <td><center><img src="/2022/10/03/Games101_17_18_Materials/绝缘体_Fresnel.png" alt="绝缘体_Fresnel" height="250"></center></td>
    <td><center><img src="/2022/10/03/Games101_17_18_Materials/导体(金属)_Fresnel.png" alt="导体(金属)_Fresnel" height="250"></center></td>
    </tr>
</table>

<ul>
<li>左图是绝缘体的菲涅尔项，右图是导体（金属）的菲涅尔项</li>
</ul>
<p><img src="/2022/10/03/Games101_17_18_Materials/FresnelTerm.png" alt="FresnelTerm"></p>
<span id="more"></span>
<h2 id="d-Microfacet-Material-微表面材质"><a href="#d-Microfacet-Material-微表面材质" class="headerlink" title="d). Microfacet Material(微表面材质)"></a>d). Microfacet Material(微表面材质)</h2><p> <img src="/2022/10/03/Games101_17_18_Materials/MicrofacetTheory.png" alt="MicrofacetTheory"></p>
<ul>
<li><p><strong>关键：</strong> 微表面的<strong><font color="red">法线分布</font></strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/NormalDistribution.png" alt="NormalDistribution"></p>
</li>
</ul>
<h3 id="d-1-Microfacet-BRDF"><a href="#d-1-Microfacet-BRDF" class="headerlink" title="d.1). Microfacet BRDF"></a>d.1). Microfacet BRDF</h3><p><img src="/2022/10/03/Games101_17_18_Materials/MicrofacetBRDF.png" alt="MicrofacetBRDF"></p>
<ul>
<li>菲涅尔项；</li>
<li>Shadowing-masking term<ul>
<li>考虑微表面之间的遮挡和阴影；</li>
<li>当光线几乎平行与表面入射时(Grazing angle)，微表面之间遮挡变多</li>
</ul>
</li>
<li>Disterbution of normals</li>
</ul>
<h2 id="e-Isotropic-Anisotropic-Materials-BRDFs"><a href="#e-Isotropic-Anisotropic-Materials-BRDFs" class="headerlink" title="e). Isotropic / Anisotropic Materials (BRDFs)"></a>e). Isotropic / Anisotropic Materials (BRDFs)</h2><p><img src="/2022/10/03/Games101_17_18_Materials/Isotropic_Anisotropic_Mat.png" alt="Isotropic_Anisotropic_Mat"></p>
<ul>
<li>Key:  <strong><font color="red">directionality</font></strong> of underlying surface</li>
</ul>
<h3 id="e-1-Anisotropic-BRDFs"><a href="#e-1-Anisotropic-BRDFs" class="headerlink" title="e.1). Anisotropic BRDFs"></a>e.1). Anisotropic BRDFs</h3><p><img src="/2022/10/03/Games101_17_18_Materials/Anisotropic_Mat_BRDF.png" alt="Anisotropic_Mat_BRDF"></p>
<ul>
<li>如尼龙、天鹅绒等</li>
</ul>
<h2 id="f-Properties-of-BRDFs-BRDF的性质"><a href="#f-Properties-of-BRDFs-BRDF的性质" class="headerlink" title="f). Properties of BRDFs(BRDF的性质)"></a>f). Properties of BRDFs(BRDF的性质)</h2><ul>
<li><p>非负性</p>
<script type="math/tex; mode=display">
f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right) \geq 0</script></li>
<li><p>线性性质</p>
<ul>
<li>如 高光、漫反射、环境光等的BRDF分开计算最后再求和，和用整体的BRDF和整体的光线一起计算结果相等</li>
</ul>
<p><img src="/2022/10/03/Games101_17_18_Materials/BRDF_Linearity.png" alt="BRDF_Linearity"></p>
</li>
<li><p>可逆性</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/BRDF_Reciprocity_principle.png" alt="BRDF_Reciprocity_principle"></p>
</li>
<li><p>能量守恒</p>
</li>
<li><p><img src="/2022/10/03/Games101_17_18_Materials/BRDF_Is_vs_ani.png" alt="BRDF_Is_vs_ani"></p>
<ul>
<li>各向同性时，BRDF可转为三维(两个俯仰角，及方位角之差)</li>
</ul>
</li>
</ul>
<h1 id="Lecture-18-Advanced-Topics-in-Rendering"><a href="#Lecture-18-Advanced-Topics-in-Rendering" class="headerlink" title="Lecture 18 Advanced Topics in Rendering"></a>Lecture 18 Advanced Topics in Rendering</h1><h2 id="a-Advanced-Light-Transport"><a href="#a-Advanced-Light-Transport" class="headerlink" title="a). Advanced Light Transport"></a>a). Advanced Light Transport</h2><h3 id="a-1-分类"><a href="#a-1-分类" class="headerlink" title="a.1). 分类"></a>a.1). 分类</h3><p><img src="/2022/10/03/Games101_17_18_Materials/Advanced Light Transport_00.png" alt="Advanced Light Transport_00"></p>
<ul>
<li><strong>Unbiased（无偏）：</strong> 无论采样多少次，其数学期望和正确的值相同；</li>
<li>否则，则为<strong>biased（有偏）</strong><ul>
<li>在某种情况下（如采样数增大），其数学期望逐渐向正确的值收敛，则称为<strong>consistent</strong>（一致的） </li>
</ul>
</li>
</ul>
<h3 id="a-2-Bidirectional-Path-Tracing-BDPT"><a href="#a-2-Bidirectional-Path-Tracing-BDPT" class="headerlink" title="a.2). Bidirectional Path Tracing(BDPT)"></a>a.2). Bidirectional Path Tracing(BDPT)</h3><p><img src="/2022/10/03/Games101_17_18_Materials/BDPT.png" alt="BDPT"></p>
<ul>
<li><p>当使用PT，摄影机出发的光线的第一次Bounce大部分是Diffuse时，其不容易得到光线强的方向的贡献，此时BDPT效率更高（<em>语言待优化</em>）</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/BDPT02.png" alt="BDPT02"></p>
</li>
</ul>
<h3 id="a-3-Metropolis-Light-Transport-MLT"><a href="#a-3-Metropolis-Light-Transport-MLT" class="headerlink" title="a.3). Metropolis Light Transport(MLT)"></a>a.3). Metropolis Light Transport(MLT)</h3><p><img src="/2022/10/03/Games101_17_18_Materials/MLT_00.png" alt="MLT_00"></p>
<ul>
<li><p>通过<em>马尔科夫链</em> 在已有样本周围形成新样本，其得到的PDF的形状与被积函数 $f(x)$ 形状一致（此时）方差最小；</p>
</li>
<li><p><strong>优点：</strong>适合复杂、困难的光线传播</p>
<ul>
<li>如：图一和图二SDS(Specular-Diffuse-Specular)</li>
</ul>
<p><img src="/2022/10/03/Games101_17_18_Materials/MLT_01.png" alt="MLT_01"></p>
</li>
<li><p><strong>缺点：</strong>难以估计何时收敛，不知道采样到什么程度才可以没噪声，造成Dirty；</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/MLT_02.png" alt="MLT_02"></p>
</li>
</ul>
<h3 id="a-4-Photon-Mapping-光子映射"><a href="#a-4-Photon-Mapping-光子映射" class="headerlink" title="a.4). Photon Mapping(光子映射)"></a>a.4). Photon Mapping(光子映射)</h3><p> <img src="/2022/10/03/Games101_17_18_Materials/PhotonMapping.png" alt="PhotonMapping"></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/PhotonMapping01.png" alt="PhotonMapping01"></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/PhotonMapping02.png" alt="PhotonMapping02"></p>
<ul>
<li><p><strong>做法之一：</strong></p>
<ol>
<li><p>光源发射光子，弹射数次后最终停留在<strong>Diffuse</strong>表面</p>
</li>
<li><p>摄影机发射光子，弹射数次后最终停留在<strong>Diffuse</strong>表面</p>
</li>
<li>局部密度估值（光子密度越大，该点越亮）；<ul>
<li>可使用KD-Tree等加速结构</li>
</ul>
</li>
</ol>
</li>
<li><p>biased会导致模糊</p>
</li>
</ul>
<p><img src="/2022/10/03/Games101_17_18_Materials/PM_biased.png" alt="PM_biased"></p>
<h3 id="a-5-Vertex-Connection-Merging-VCM"><a href="#a-5-Vertex-Connection-Merging-VCM" class="headerlink" title="a.5). Vertex Connection Merging(VCM)"></a>a.5). Vertex Connection Merging(VCM)</h3><p><img src="/2022/10/03/Games101_17_18_Materials/VCM00.png" alt="VCM00"></p>
<ul>
<li>使用BDPT后，对于临近的端点使用Photon Mapping</li>
<li><strong><em>电影常用</em></strong></li>
</ul>
<h3 id="a-6-Instant-Radiosity-实时辐射度"><a href="#a-6-Instant-Radiosity-实时辐射度" class="headerlink" title="a.6). Instant Radiosity(实时辐射度)"></a>a.6). Instant Radiosity(实时辐射度)</h3><p><img src="/2022/10/03/Games101_17_18_Materials/IR00.png" alt="IR00"></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/IR01.png" alt="IR01"></p>
<ul>
<li><strong>出现亮点原因：</strong><ul>
<li>计算直接光照时，换元成了dA，而此处换元依赖于，面积A和立体角w的计算，其中分母是距离的平方，如果距离很接近，那么就会除以一个极小值，使得结果变过大</li>
</ul>
</li>
</ul>
<h2 id="b-Advanced-Appearance-Modeling"><a href="#b-Advanced-Appearance-Modeling" class="headerlink" title="b). Advanced Appearance Modeling"></a>b). Advanced Appearance Modeling</h2><h3 id="b-1-分类"><a href="#b-1-分类" class="headerlink" title="b.1). 分类"></a>b.1). 分类</h3><p><img src="/2022/10/03/Games101_17_18_Materials/Advanced Appearance Modeling.png" alt="Advanced Appearance Modeling"></p>
<h3 id="b-2-Non-surface-models"><a href="#b-2-Non-surface-models" class="headerlink" title="b.2). Non-surface models"></a>b.2). Non-surface models</h3><h4 id="b-2-1-Participation-media"><a href="#b-2-1-Participation-media" class="headerlink" title="b.2.1). Participation media"></a>b.2.1). Participation media</h4><ul>
<li><p>光在传播过程中，有穿过一个Participation medium，那么它会被<strong>吸收、散射</strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/ParticipatingMedia00.png" alt="ParticipatingMedia00"></p>
</li>
</ul>
<p><img src="/2022/10/03/Games101_17_18_Materials/ParticipatingMedia01.png" alt="ParticipatingMedia01"></p>
<ul>
<li><p><strong>Rendering</strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/ParticipatingMedia_Rendering.png" alt="ParticipatingMedia_Rendering"></p>
</li>
</ul>
<h4 id="b-2-2-Hair-Fur-Appearance"><a href="#b-2-2-Hair-Fur-Appearance" class="headerlink" title="b.2.2). Hair/Fur Appearance"></a>b.2.2). Hair/Fur Appearance</h4><ul>
<li><p><strong>Kajiya_Kay_Model</strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Kajiya_Kay_Model.png" alt="Kajiya_Kay_Model"></p>
</li>
<li><p><strong>Marschner Model</strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Marschner Model.png" alt="Marschner Model"></p>
<ul>
<li><p>认为毛发表面类似玻璃柱，其中分为Cuticle（表皮）、Cortex（皮质，吸收光）</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Marschner Model01.png" alt="Marschner Model01"></p>
<ul>
<li>光经过毛发被分为3项，R、TT、TRT</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Double Cylinder Model</strong></p>
<ul>
<li><p>考虑了髓质（Medulla，散射光线）</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Double_Cylinder_Model.png" alt="Double_Cylinder_Model"></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Double_Cylinder_Model_02.png" alt="Double_Cylinder_Model_02"></p>
</li>
<li><p>光经过毛发被分为5项，R、TT、TRT、TTs、TRTs</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Double_Cylinder_Model_03.png" alt="Double_Cylinder_Model_03"></p>
</li>
</ul>
</li>
</ul>
<h4 id="b-2-3-Granular-Material（颗粒材质）"><a href="#b-2-3-Granular-Material（颗粒材质）" class="headerlink" title="b.2.3). Granular Material（颗粒材质）"></a>b.2.3). Granular Material（颗粒材质）</h4><p><img src="/2022/10/03/Games101_17_18_Materials/Granular Material.png" alt="Granular Material"></p>
<h3 id="b-3-Surface-models"><a href="#b-3-Surface-models" class="headerlink" title="b.3). Surface models"></a>b.3). Surface models</h3><h4 id="b-3-1-Translucent-半透明-Material"><a href="#b-3-1-Translucent-半透明-Material" class="headerlink" title="b.3.1). Translucent(半透明) Material"></a>b.3.1). Translucent(半透明) Material</h4><ul>
<li><p><strong>概念：</strong>Translucent实际上和半透明有一定区分，它还涉及到吸收、散射（SSS）等现象。Translucent只是表示光从表面一个地方进入，再从表面一个地方射出（如玉石、人的皮肤、水母等）；</p>
</li>
<li><p><strong><font color="red">Subsurface Scattering</font></strong></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/SSS.png" alt="SSS"></p>
<ul>
<li><p><strong>BSSRDF：</strong> 对BRDF的延伸，一点出射方向的贡献不止有该点，还有周围点的贡献（多了对面积的积分）</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/BSSRDF.png" alt="BSSRDF"></p>
</li>
</ul>
</li>
<li><p><strong>Dipole Approximation</strong>（模拟次表面散射的一种方法）</p>
<ul>
<li><p>材质下加入一个光源，材质上也加入一个虚拟光源</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Dipole Approximation.png" alt="Dipole Approximation"></p>
</li>
</ul>
</li>
</ul>
<h4 id="b-3-2-Cloth"><a href="#b-3-2-Cloth" class="headerlink" title="b.3.2). Cloth"></a>b.3.2). Cloth</h4><p><img src="/2022/10/03/Games101_17_18_Materials/Cloth.png" alt="Cloth"></p>
<ul>
<li><strong>Rendering</strong><ul>
<li>BRDF<img src="/2022/10/03/Games101_17_18_Materials/Cloth_BRDF.png" alt="Cloth_BRDF"></li>
<li>分块，每一块都是Participating Media<img src="/2022/10/03/Games101_17_18_Materials/Cloth_ParticipatingMedia.png" alt="Cloth_ParticipatingMedia"></li>
</ul>
</li>
</ul>
<h4 id="b-3-3-Detailed-Appearance-Motivation"><a href="#b-3-3-Detailed-Appearance-Motivation" class="headerlink" title="b.3.3). Detailed Appearance: Motivation"></a>b.3.3). Detailed Appearance: Motivation</h4><p><img src="/2022/10/03/Games101_17_18_Materials/Detailed Appearance.png" alt="Detailed Appearance"></p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Detailed Appearance_Dn.png" alt="Detailed Appearance_Dn"></p>
<ul>
<li><p>$D(h)$ 过于简单，无法模拟细节</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Detailed Appearance_Dn02.png" alt="Detailed Appearance_Dn02"></p>
</li>
<li><p>Result</p>
<p><img src="/2022/10/03/Games101_17_18_Materials/Detailed Appearance_Result.png" alt="Detailed Appearance_Result"></p>
</li>
<li><p><img src="/2022/10/03/Games101_17_18_Materials/Detailed Appearance_p_NDFs.png" alt="Detailed Appearance_p_NDFs"></p>
</li>
</ul>
<h3 id="b-4-Procedural-Appearance"><a href="#b-4-Procedural-Appearance" class="headerlink" title="b.4). Procedural Appearance"></a>b.4). Procedural Appearance</h3><p><img src="/2022/10/03/Games101_17_18_Materials/Procedural Appearance.png" alt="Procedural Appearance"></p>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
        <tag>Materials</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101_21_22 Animation</title>
    <url>/2022/10/03/Games101_21_22_Animation/</url>
    <content><![CDATA[<h1 id="Lecture-21-Animation"><a href="#Lecture-21-Animation" class="headerlink" title="Lecture 21 Animation"></a>Lecture 21 Animation</h1><h2 id="a-History"><a href="#a-History" class="headerlink" title="a). History"></a>a). History</h2><h2 id="b-Keyframe"><a href="#b-Keyframe" class="headerlink" title="b). Keyframe"></a>b). Keyframe</h2><h2 id="c-Physical-Simualtion"><a href="#c-Physical-Simualtion" class="headerlink" title="c). Physical Simualtion"></a>c). Physical Simualtion</h2><p><img src="/2022/10/03/Games101_21_22_Animation/PhysicalBasedAnimation.png" alt="PhysicalBasedAnimation"></p>
<h3 id="c-1-Mass-Spring-System"><a href="#c-1-Mass-Spring-System" class="headerlink" title="c.1). Mass Spring System"></a>c.1). Mass Spring System</h3><p><img src="/2022/10/03/Games101_21_22_Animation/MassSpringSystem_eg00.png" alt="MassSpringSystem_eg00"></p>
<ul>
<li><p><strong>Idealized spring</strong></p>
<p><img src="/2022/10/03/Games101_21_22_Animation/IdealizedSpring.png" alt="IdealizedSpring"></p>
<ul>
<li>但永远不会停止，因此加入摩擦力</li>
</ul>
</li>
</ul>
<hr>
<p><img src="/2022/10/03/Games101_21_22_Animation/DampSpring.png" alt="DampSpring"></p>
<ul>
<li><p>中间项为<strong>相对速度在向量$ab$方向的投影</strong>，因为（处于原长状态时）如果a点不动，b点绕a点做圆周运动，那$f_b=0$；</p>
<ul>
<li><p>但是无法表现剪切力（如对角线拉布，布基本形状不变）、弯曲力（out-of-plane，抗拒被像纸一样完全折叠为两个三角形）等</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/MassSpringSystem_01.png" alt="MassSpringSystem_01"></p>
</li>
</ul>
</li>
<li><p>加入两条对角线，以及skip connection</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/MassSpringSystem_03.png" alt="MassSpringSystem_03"></p>
<ul>
<li>红色较弱，仅其辅助作用；蓝色较强，其主要作用；</li>
</ul>
</li>
<li><p><strong>其他方式：</strong>FEM (Finite Element Method, 有限元) Instead of Springs，考虑力传导</p>
</li>
</ul>
<hr>
<h3 id="c-2-Particle-System"><a href="#c-2-Particle-System" class="headerlink" title="c.2). Particle System"></a>c.2). Particle System</h3><p><img src="/2022/10/03/Games101_21_22_Animation/ParticleSystemForces.png" alt="ParticleSystemForces"></p>
<ul>
<li>粒子系统不仅可描述微小粒子，还可以描述一些群落；<ul>
<li><img src="/2022/10/03/Games101_21_22_Animation/SimulatedFlocking.png" alt="SimulatedFlocking"></li>
<li><img src="/2022/10/03/Games101_21_22_Animation/SimulatedCrowds.png" alt="SimulatedCrowds"></li>
</ul>
</li>
</ul>
<h2 id="d-Forward-Kinematics-FK"><a href="#d-Forward-Kinematics-FK" class="headerlink" title="d). Forward Kinematics(FK)"></a>d). Forward Kinematics(FK)</h2><p><img src="/2022/10/03/Games101_21_22_Animation/FK.png" alt="FK"></p>
<ul>
<li><p>关节（Joint）分类：</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/JointTypes.png" alt="JointTypes"></p>
</li>
</ul>
<h2 id="e-Inverse-Kinematics-IK"><a href="#e-Inverse-Kinematics-IK" class="headerlink" title="e). Inverse Kinematics(IK)"></a>e). Inverse Kinematics(IK)</h2><p><img src="/2022/10/03/Games101_21_22_Animation/IK_eg.png" alt="IK_eg"></p>
<p><img src="/2022/10/03/Games101_21_22_Animation/IK00.png" alt="IK00"></p>
<ul>
<li>解决多个解的方法：梯度下降</li>
</ul>
<h2 id="f-Rigging"><a href="#f-Rigging" class="headerlink" title="f). Rigging"></a>f). Rigging</h2><p><img src="/2022/10/03/Games101_21_22_Animation/Rigging.png" alt="Rigging"></p>
<ul>
<li><p><strong>Blend shapes:</strong> 混合控制点或骨骼位置</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/Blend Shapes.png" alt="Blend Shapes"></p>
</li>
</ul>
<h2 id="g-Motion-Capture-Facial-Motion-Capture"><a href="#g-Motion-Capture-Facial-Motion-Capture" class="headerlink" title="g). Motion Capture / Facial Motion Capture"></a>g). Motion Capture / Facial Motion Capture</h2><span id="more"></span>
<hr>
<h1 id="Lecture-22"><a href="#Lecture-22" class="headerlink" title="Lecture 22"></a>Lecture 22</h1><h2 id="a-Single-Particle-Simulation"><a href="#a-Single-Particle-Simulation" class="headerlink" title="a). Single Particle Simulation"></a>a). Single Particle Simulation</h2><p><img src="/2022/10/03/Games101_21_22_Animation/VelocityVectorField.png" alt="VelocityVectorField"></p>
<ul>
<li><p><strong>Velocity vector field:</strong> 给定位置，可以得出改点速度。和磁场、电场类似；</p>
</li>
<li><p><strong>Oridinary Differential Equation(ODE, 常微分方程)</strong></p>
<p><img src="/2022/10/03/Games101_21_22_Animation/Oridinary Differential Equation.png" alt="Oridinary Differential Equation"></p>
<ul>
<li>已知解得 t 时刻，粒子的位置和速度，需求得下一时刻的粒子位置；<ul>
<li>方法1：<strong>显式欧拉法（Explicit Euler method）</strong>，用差分代替微分，但会引起<strong>误差</strong>，且<strong>稳定性差</strong>；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="a-1-Euler’s-Method"><a href="#a-1-Euler’s-Method" class="headerlink" title="a.1). Euler’s Method"></a>a.1). Euler’s Method</h3><p><img src="/2022/10/03/Games101_21_22_Animation/Euler’s Method.png" alt="Euler’s Method"></p>
<ul>
<li><p><strong>缺点：</strong></p>
<ol>
<li><p>存在误差，可通过减小步长（$\Delta t$）来减少误差；</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/Euler’s Method_Errors01.png" alt="Euler’s Method_Errors01"></p>
</li>
<li><p>稳定性差，如速度场为同心圆时，不管步长多小都会<strong>逐渐偏移（diverge）</strong></p>
<p><img src="/2022/10/03/Games101_21_22_Animation/Euler’s Method_Errors02.png" alt="Euler’s Method_Errors02"></p>
</li>
</ol>
</li>
</ul>
<h3 id="a-2-Combating-Instability"><a href="#a-2-Combating-Instability" class="headerlink" title="a.2). Combating Instability"></a>a.2). Combating Instability</h3><p><img src="/2022/10/03/Games101_21_22_Animation/Combating Instability.png" alt="Combating Instability"></p>
<h4 id="a-2-1-Midpoint-Method"><a href="#a-2-1-Midpoint-Method" class="headerlink" title="a.2.1). Midpoint Method"></a>a.2.1). Midpoint Method</h4><p><img src="/2022/10/03/Games101_21_22_Animation/Midpoint Method.png" alt="Midpoint Method"></p>
<ul>
<li>计算下一时刻位置后取中点，得到中点速度，在计算下一时刻位置时，使用中点速度</li>
</ul>
<p><img src="/2022/10/03/Games101_21_22_Animation/Midpoint Method02.png" alt="Midpoint Method02"></p>
<h4 id="a-2-2-Adaptive-Step-Size"><a href="#a-2-2-Adaptive-Step-Size" class="headerlink" title="a.2.2). Adaptive Step Size"></a>a.2.2). Adaptive Step Size</h4><p><img src="/2022/10/03/Games101_21_22_Animation/AdaptiveStepSize.png" alt="AdaptiveStepSize"></p>
<h4 id="a-2-3-Implicit-Euler-Method"><a href="#a-2-3-Implicit-Euler-Method" class="headerlink" title="a.2.3). Implicit Euler Method"></a>a.2.3). Implicit Euler Method</h4><p><img src="/2022/10/03/Games101_21_22_Animation/Implicit Euler Method.png" alt="Implicit Euler Method"></p>
<ul>
<li>使用下一时刻的速度和加速度，并求解</li>
</ul>
<p><img src="/2022/10/03/Games101_21_22_Animation/Quzntize_stability.png" alt="Quzntize_stability">、</p>
<ul>
<li><p><strong>龙格库塔</strong></p>
<p><img src="/2022/10/03/Games101_21_22_Animation/龙格库塔.png" alt="龙格库塔"></p>
</li>
</ul>
<h4 id="a-2-4-Position-Based-Verlet-Integration"><a href="#a-2-4-Position-Based-Verlet-Integration" class="headerlink" title="a.2.4). Position-Based / Verlet Integration"></a>a.2.4). Position-Based / Verlet Integration</h4><ul>
<li>非基于物理<ul>
<li>时间快</li>
</ul>
</li>
</ul>
<p><img src="/2022/10/03/Games101_21_22_Animation/Position-Based.png" alt="Position-Based"></p>
<hr>
<h2 id="b-Rigid-Body-Simulation"><a href="#b-Rigid-Body-Simulation" class="headerlink" title="b). Rigid Body Simulation"></a>b). Rigid Body Simulation</h2><p><img src="/2022/10/03/Games101_21_22_Animation/RigidBodySimulation.png" alt="RigidBodySimulation"></p>
<ul>
<li>与单粒子类似</li>
</ul>
<h2 id="c-Fluid-Simulation"><a href="#c-Fluid-Simulation" class="headerlink" title="c). Fluid Simulation"></a>c). Fluid Simulation</h2><h4 id="c-1-A-Simple-Position-Based-Method"><a href="#c-1-A-Simple-Position-Based-Method" class="headerlink" title="c.1). A Simple Position-Based Method"></a>c.1). A Simple Position-Based Method</h4><p><img src="/2022/10/03/Games101_21_22_Animation/FS_Position-Based.png" alt="FS_Position-Based"></p>
<h3 id="c-2-Eulerian-vs-Lagrangian"><a href="#c-2-Eulerian-vs-Lagrangian" class="headerlink" title="c.2). Eulerian vs. Lagrangian"></a>c.2). Eulerian vs. Lagrangian</h3><p><img src="/2022/10/03/Games101_21_22_Animation/Eulerian vs. Lagrangian.png" alt="Eulerian vs. Lagrangian"></p>
<ul>
<li><p>拉格朗日（质点法）：考虑单个粒子的运动</p>
</li>
<li><p>欧拉（网格法）：考虑不同位置的网格</p>
</li>
<li><p>Material Point Method (MPM ，混合上两种方法)</p>
<p><img src="/2022/10/03/Games101_21_22_Animation/MPM.png" alt="MPM"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
        <tag>Animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101-13-16 RayTracing</title>
    <url>/2022/10/03/Games101_13_16_RayTracing/</url>
    <content><![CDATA[<h1 id="Lecture-13-Ray-Tracing"><a href="#Lecture-13-Ray-Tracing" class="headerlink" title="Lecture 13 Ray Tracing"></a>Lecture 13 Ray Tracing</h1><h2 id="a-vs-Rasterization"><a href="#a-vs-Rasterization" class="headerlink" title="a). vs. Rasterization"></a>a). vs. Rasterization</h2><ul>
<li><p>光栅化难以表现<strong>全局（global）</strong>效果，如</p>
<ul>
<li>（软）阴影（Soft shadows）</li>
<li>光线反弹<strong>超过一次</strong>（Glossy reflection）</li>
<li>Indirect illumination（间接光照）</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/vs.Rsaterization.png" alt="vs.Rsaterization"></p>
</li>
<li><p>Rasterization is fast, but quality is relatively low；</p>
</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/RayTracing00.png" alt="RayTracing00"></p>
<h2 id="b-Basic-Ray-Tracing-Algorithm"><a href="#b-Basic-Ray-Tracing-Algorithm" class="headerlink" title="b.). Basic Ray-Tracing Algorithm"></a>b.). Basic Ray-Tracing Algorithm</h2><ul>
<li><p><strong>光追中光线的性质：</strong></p>
<ol>
<li>光是沿直线传播的；</li>
<li>光相交时，并不产生干扰；</li>
<li>光从光源出发，传播到眼睛（由于光路可逆，也可是光线从眼睛出发，传播到光源）</li>
</ol>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/EmissionTheory.png" alt="EmissionTheory"></p>
</li>
</ul>
<h3 id="b-1-Ray-Casting"><a href="#b-1-Ray-Casting" class="headerlink" title="b.1). Ray Casting"></a>b.1). Ray Casting</h3><ul>
<li><p><strong>做法：</strong></p>
<ol>
<li>Generate an image by <strong>casting one ray per pixel</strong>;（生成从眼睛出发的光线）</li>
<li>Check for shadows by <strong>sending a ray to the light</strong>;（检查光线投射点是否可传播到光源）</li>
</ol>
</li>
<li><div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/CastingRay.png" height="300px" alt="CastingRay"> <img src="/2022/10/03/Games101_13_16_RayTracing/CastingRay01.png" height="300px" alt="CastingRay01"> </div>

<ul>
<li>光线由眼睛出发，可不再使用深度缓存；</li>
<li>投射点到光源发射<strong>Shadow Ray</strong>，查看该点是否在阴影里（是否对光源可见）；</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="c-Whitted-Style-Ray-Tracing-Recursive-递归"><a href="#c-Whitted-Style-Ray-Tracing-Recursive-递归" class="headerlink" title="c). Whitted-Style Ray Tracing(Recursive, 递归)"></a>c). Whitted-Style Ray Tracing(Recursive, 递归)</h2><p><img src="/2022/10/03/Games101_13_16_RayTracing/RecursiveRayTracing.png" alt="RecursiveRayTracing"></p>
<ul>
<li><strong>过程：</strong><ul>
<li><strong>生成眼睛到像素a的光线（Primary ray）</strong>，打到第一个与光线<strong>相交</strong>的点；</li>
<li>形成<strong>反射（镜面反射）</strong>和<strong>折射</strong>的光线（<strong>Secondary rays</strong>，之后的都是Secondary rays）；</li>
<li>对每条光线与object的交点做到光源的光线（<strong>Shadow rays</strong>）；</li>
<li>将所有Shadow rays未被阻挡的光线的着色结果相加，即为像素a的着色结果；</li>
</ul>
</li>
</ul>
<h3 id="c-1-Ray-Surface-Intersection（求交点）"><a href="#c-1-Ray-Surface-Intersection（求交点）" class="headerlink" title="c.1). Ray-Surface Intersection（求交点）"></a>c.1). Ray-Surface Intersection（求交点）</h3><h4 id="c-1-1-与球形相交："><a href="#c-1-1-与球形相交：" class="headerlink" title="c.1.1). 与球形相交："></a>c.1.1). 与球形相交：</h4><div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/RayIntersectionWithSphere.png" height="300px" alt="RayIntersectionWithSphere"> <img src="/2022/10/03/Games101_13_16_RayTracing/RayIntersectionWithSphere01.png" height="300px" alt="CastingRay01"> </div>

<ul>
<li><strong>推广：</strong>与隐式表面相交<img src="/2022/10/03/Games101_13_16_RayTracing/RayIntersectionWithImplicitSurface.png" alt="RayIntersectionWithImplicitSurface"></li>
</ul>
<h4 id="c-1-2-与三角形求交："><a href="#c-1-2-与三角形求交：" class="headerlink" title="c.1.2). 与三角形求交："></a>c.1.2). 与三角形求交：</h4><p><img src="/2022/10/03/Games101_13_16_RayTracing/RayIntersectionWithTriangleMesh.png" alt="RayIntersectionWithTriangleMesh"></p>
<ul>
<li><p><strong>几何上：</strong>判断内外；</p>
<ul>
<li>空间内任意一点为起点做一光线，若该光线与object（封闭）交点数为奇数，则该点在object内；若交点数为奇数，则该点在object外；（缠绕数的奇-偶原则）</li>
</ul>
</li>
<li><p><strong>计算过程：</strong></p>
<ul>
<li><div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/PlaneEquation.png" height="300px" alt="PlaneEquation"> <img src="/2022/10/03/Games101_13_16_RayTracing/PlaneEquation01.png" height="300px" alt="PlaneEquation01"> </div>
</li>
<li><p>即 $r(t)=o+td,0\leq t &lt; \infty$ 和 $(p-p’)·N=0$ 联立求 $t$；</p>
</li>
<li><p>之后求得点P是否在三角形内；</p>
</li>
</ul>
</li>
<li><p><strong>Möller Trumbore Algorithm</strong></p>
<ul>
<li>按传统求解，求出 $t$ 后，还需要判断 P 点是否在三角形内，较为繁琐，因此提出<strong>Möller Trumbore Algorithm</strong></li>
<li><img src="/2022/10/03/Games101_13_16_RayTracing/MollerTrumboreAlgorithm.png" alt="MollerTrumboreAlgorithm"><ul>
<li>射线$r(t)=O+tD$ ，与由<strong>重心坐标</strong>表示的三角形上的点 $P$ 求解（三个式子，三个未知量，根据克拉默必定有解）；</li>
<li>求得交点后，可通过重心坐标得知该点是否在三角形外；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="c-2-Acclerating-Ray-Surface-Intersection"><a href="#c-2-Acclerating-Ray-Surface-Intersection" class="headerlink" title="c.2). Acclerating Ray-Surface Intersection"></a>c.2). Acclerating Ray-Surface Intersection</h3><ul>
<li><strong>原因：</strong>当需要求得光线最近的交点时，需要遍历场景所有三角面，速度慢，需要加速；</li>
</ul>
<h4 id="c-2-1-Axis-Aligned-Bounding-Box-AABB，轴对齐包围盒"><a href="#c-2-1-Axis-Aligned-Bounding-Box-AABB，轴对齐包围盒" class="headerlink" title="c.2.1). Axis-Aligned Bounding Box(AABB，轴对齐包围盒)"></a>c.2.1). Axis-Aligned Bounding Box(AABB，轴对齐包围盒)</h4><ul>
<li><p><strong>Bounding Volumes</strong></p>
<ul>
<li><strong>思想：</strong><font color="red">当物体不与包围体积相交时，更不可能和物体相交</font>；</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/BoundingVolumes.png" alt="BoundingVolumes"></p>
</li>
<li><p><strong>Bounding Box（AABB for example）：</strong></p>
<ul>
<li><strong>理解：</strong>盒子是3对对立的面的交集；</li>
<li><strong>Axis-Aligned Bounding Box(AABB)</strong><img src="/2022/10/03/Games101_13_16_RayTracing/AABB_BoundingBox.png" alt="AABB_BoundingBox"><ul>
<li><strong>AABB包围盒的面总在xy/xz/yz平面；</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>光线与AABB求交：</strong></p>
<ul>
<li>2D情况下（3D同理）<img src="/2022/10/03/Games101_13_16_RayTracing/RayIntersection_with_AABB.png" alt="RayIntersection_with_AABB"></li>
<li><strong>思想：</strong><ul>
<li>光线进入Box：<strong>只有</strong>当光线进入<strong>所有</strong>的对立面；</li>
<li>光线出Box：<strong>只要</strong>光线出射<strong>一个</strong>对立面；</li>
<li>对于3D的Box，$t_{enter}=max\{t_{min}\},t_{exit}=min\{t_{max}\}$；</li>
<li>如果 $t_{enter}&lt;t_{exit}$，则光线经过Box；</li>
</ul>
</li>
<li>对于 $t_{enter}$ 和 $t_{exit}$ 正负情况的考虑：<ul>
<li>$t_{exit}&lt;0$：不相交（Box在光线后边）</li>
<li>$t_{exit}&lt;0$ and $t_{enter}&lt;0$：光线起点在盒子里，一定相交</li>
<li>当且仅当 $t_{enter}&lt;t_{exit}\quad\&amp;\&amp;\quad t_{exit}\geq0$，光线与AABB相交；</li>
</ul>
</li>
</ul>
</li>
<li>为什么使用AABB：求交方便；<img src="/2022/10/03/Games101_13_16_RayTracing/AA_reason.png" alt="AA_reason"></li>
</ul>
<h1 id="Lecture-14-amp-15-Ray-Tracing-Acceleration-amp-Radiometry-Light-Transport-amp-Global-Illumination"><a href="#Lecture-14-amp-15-Ray-Tracing-Acceleration-amp-Radiometry-Light-Transport-amp-Global-Illumination" class="headerlink" title="Lecture 14&amp;15 Ray Tracing(Acceleration &amp; Radiometry; Light Transport &amp; Global Illumination)"></a>Lecture 14&amp;15 Ray Tracing(Acceleration &amp; Radiometry; Light Transport &amp; Global Illumination)</h1><h2 id="a-Uniform-Spatial-Partitions（统一空间分区）"><a href="#a-Uniform-Spatial-Partitions（统一空间分区）" class="headerlink" title="a). Uniform Spatial Partitions（统一空间分区）"></a>a). Uniform Spatial Partitions（统一空间分区）</h2><p><img src="/2022/10/03/Games101_13_16_RayTracing/UniformSpatialPartitions00.png" alt="UniformSpatialPartitions00"></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/UniformSpatialPartitions.png" alt="UniformSpatialPartitions"></p>
<ul>
<li><p>Heuristic:</p>
<ul>
<li>#cells = C * #objs </li>
<li>C ≈ 27 in 3D</li>
</ul>
</li>
<li><p><strong>缺陷：</strong></p>
<ul>
<li>格子大小相同，浪费空间；</li>
<li>对于空间分布不均匀的场景容易造成“Teapot in a stadium” problem，浪费性能；</li>
</ul>
</li>
</ul>
<h2 id="b-Spatial-Partition"><a href="#b-Spatial-Partition" class="headerlink" title="b). Spatial Partition"></a>b). Spatial Partition</h2><ul>
<li>常见的空间划分的类型：<img src="/2022/10/03/Games101_13_16_RayTracing/SpatialPartitioningEx.png" alt="SpatialPartitioningEx"><ul>
<li>Oct-Tree（3维中是八叉树，2维中是四叉树；$2^n$叉树，n=维度）<ul>
<li>受维度影响；</li>
</ul>
</li>
<li><strong>KD-Tree</strong>；<ul>
<li>每次只划分一次，如果是三维则按x，y，z方向循环划分；</li>
</ul>
</li>
<li>BSP-Tree</li>
</ul>
</li>
</ul>
<h4 id="b-1-KD-Tree"><a href="#b-1-KD-Tree" class="headerlink" title="b.1). KD-Tree"></a>b.1). KD-Tree</h4><p><img src="/2022/10/03/Games101_13_16_RayTracing/KD_Tree_Pre_Processing.png" alt="KD_Tree_Pre_Processing"></p>
<ul>
<li><strong>预处理：</strong>对空间进行划分，对于子空间每次只划分一次（1、2、3划分省略）；<ul>
<li>树节点（Internal node）的数据结构：<ul>
<li><strong>划分轴：</strong>x-, y- , or z-axis;</li>
<li>划分位置：分割平面沿轴的坐标；（？）</li>
<li>子节点；</li>
<li><strong>不存储object</strong>；</li>
</ul>
</li>
<li><strong>叶子节点数据结构：</strong><ul>
<li>object的列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/KD_Tree_Traversing.png" alt="KD_Tree_Traversing"></p>
<ul>
<li><strong>过程：</strong><ul>
<li>光线和<strong>叶子节点1</strong>（为方便把$1$暂看作叶子节点，尽管个节点应该继续划分，$2,3$同理）相交，判断光线和$1$中储存的object是否相交（无相加，继续）；</li>
<li>……</li>
<li>光线和<strong>叶子节点3</strong>相交，判断光线和$1$中储存的object是否相交，相交，记录$t_{hit}$；</li>
</ul>
</li>
<li><strong>缺点：</strong><ol>
<li>预处理的过程中，物体（三角形）和网格求交难；<ul>
<li>如三角形和Box求交，有可能是一个小Box穿过三角形（被三角形“包裹”）</li>
</ul>
</li>
<li>同一个Object可能储存在多个叶子节点中；</li>
</ol>
</li>
</ul>
<h2 id="c-Bounding-Volume-Hierarchy-BVH"><a href="#c-Bounding-Volume-Hierarchy-BVH" class="headerlink" title="c). Bounding Volume Hierarchy (BVH)"></a>c). Bounding Volume Hierarchy (BVH)</h2><p><img src="/2022/10/03/Games101_13_16_RayTracing/BVH.png" alt="BVH"></p>
<ul>
<li><strong>特征：</strong>先将object分为两组，再重新计算包围盒，使得同一个obejct只会在一个叶子节点中出现；（但会造成Bounding Box空间的冗余）</li>
<li><strong>过程：</strong><ul>
<li>找到包围盒；</li>
<li>递归地将物体的集分为两个子集；</li>
<li><strong>重新计算</strong>子集的包围盒；</li>
<li>满足条件时停止；</li>
<li>储存objects到对应的叶子节点；</li>
</ul>
</li>
<li><strong>划分子节点：</strong><ul>
<li>选择一个维度去划分；</li>
<li>Heuristic #1: 选择最长的轴去划分；</li>
<li>Heuristic #2: 选择中间的object的位置去划分；（快速选择算法）</li>
</ul>
</li>
<li><strong>BVHs的数据结构：</strong><ul>
<li><strong>非叶子节点：</strong><ul>
<li>Bounding box</li>
<li>Children: pointer to child nodes</li>
</ul>
</li>
<li><strong>叶子节点：</strong><ul>
<li>Bounding box</li>
<li>List of objects</li>
</ul>
</li>
<li>Nodes represent subset of primitives in scene</li>
</ul>
</li>
<li><p><strong>BVH Traversal:</strong><img src="/2022/10/03/Games101_13_16_RayTracing/BVH_P_Code.png" alt="BVH_P_Code"></p>
</li>
<li><p><strong><font color="red">空间划分和物体划分:</font></strong><img src="/2022/10/03/Games101_13_16_RayTracing/SpatialvsObjectPartitions.png" alt="SpatialvsObjectPartitions"></p>
</li>
</ul>
<h2 id="d-Radiometry"><a href="#d-Radiometry" class="headerlink" title="d). Radiometry"></a>d). Radiometry</h2><h3 id="d-1-Radiant-Energy-and-Flux-Power"><a href="#d-1-Radiant-Energy-and-Flux-Power" class="headerlink" title="d.1). Radiant Energy and Flux(Power)"></a>d.1). Radiant Energy and Flux(Power)</h3><ul>
<li>Radiant Energy(辐射能量):<ul>
<li>Definition: Radiant energy is the energy of electromagnetic radiation. It is measured in units of joules, and denoted by the symbol: </li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">
Q[J=Joule]</script><ul>
<li><p>Flux(辐射通量):</p>
<ul>
<li>Definition: Radiant flux (power) is the energy emitted, reflected, transmitted or received, per unit time.</li>
</ul>
<script type="math/tex; mode=display">
\Phi \equiv \frac{\mathrm{d} Q}{\mathrm{~d} t}[\mathrm{~W}=\mathrm{Watt}][\operatorname{lm}=\text {lumen}]</script></li>
</ul>
<ul>
<li>Important Light Measurements of Interest<img src="/2022/10/03/Games101_13_16_RayTracing/RIR.png" alt="RIR"></li>
</ul>
<h3 id="d-2-Radiant-Intensity-辐射强度"><a href="#d-2-Radiant-Intensity-辐射强度" class="headerlink" title="d.2). Radiant Intensity(辐射强度)"></a>d.2). Radiant Intensity(辐射强度)</h3><ul>
<li><strong>定义</strong>：单位立体角上，产生的、反射的、接收的<strong>辐射通量</strong>。符号：<strong>I</strong>；单位：<strong>瓦特/sr、lm/sr、candela、cd</strong>。 <strong>立体角</strong>(solid angle)是有方向的，所以辐射强度是一个方向有关的属性</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/RadiantIntensity.png" alt="RadiantIntensity"></p>
<h4 id="d-2-1-Solid-angle"><a href="#d-2-1-Solid-angle" class="headerlink" title="d.2.1). Solid angle"></a>d.2.1). Solid angle</h4><ul>
<li><strong>角度（2D）：</strong> 弧长除以半径；<ul>
<li>$\theta={l\over r}$</li>
</ul>
</li>
<li><strong>立体角：</strong>立体角面积除以半径的平方<img src="/2022/10/03/Games101_13_16_RayTracing/SolidAngle.png" alt="SolidAngle"><ul>
<li>$\Omega=\frac{A}{r^{2}}$</li>
<li>球体的立体角为$4\pi$</li>
</ul>
</li>
</ul>
<h4 id="d-2-2-计算过程"><a href="#d-2-2-计算过程" class="headerlink" title="d.2.2). 计算过程"></a>d.2.2). 计算过程</h4><ul>
<li><p>立体角微分：</p>
<ul>
<li><div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/SolidAngle_D01.png" height="300px" alt="SolidAngle_D01"> <img src="/2022/10/03/Games101_13_16_RayTracing/SolidAngle_D02.png" height="300px" alt="SolidAngle_D02"> </div>
</li>
<li><p><strong>二重积分</strong>计算，总的立体角 = 球面上无数个单位立体角的加和，即∫∫sinθdθdφ<br>积分限也比较好理解：θ：0 → π，一个半圆弧， φ：0 → 2π，用半圆转一整圈得到球面</p>
</li>
</ul>
</li>
<li><p><strong>通常把ω当做方向向量来理解，这样比较好描述intensity</strong><img src="/2022/10/03/Games101_13_16_RayTracing/W_dirVect.png" alt="W_dirVect" style="zoom: 25%;"></p>
</li>
<li><p><strong>如果点光源向三维空间中均匀的辐射出能量，怎么描述强度？</strong><img src="/2022/10/03/Games101_13_16_RayTracing/Isotropic.png" alt="Isotropic" style="zoom:25%;"></p>
<p><strong>I = Φ / 4π</strong><br><strong>Φ</strong>：点光源单位时间内，向三维空间中辐射出的能量<br><strong>4π</strong>：整个三维空间的总立体角<br>其比值就是单位立体角上的辐射通量</p>
</li>
</ul>
<h4 id="d-2-3-Irradiance-辐照度"><a href="#d-2-3-Irradiance-辐照度" class="headerlink" title="d.2.3). Irradiance(辐照度)"></a>d.2.3). Irradiance(辐照度)</h4><ul>
<li><p><strong>定义：</strong>每单位面积（与光线垂直，Lambert’s Cosine Law）的能量<img src="/2022/10/03/Games101_13_16_RayTracing/Irradiance.png" alt="Irradiance"></p>
</li>
<li><p><strong>Lambert’s Cosine Law</strong><img src="/2022/10/03/Games101_13_16_RayTracing/LambertsCosLaw.png" alt="LambertsCosLaw"></p>
<ul>
<li>e.g. 太阳高度角造成四季变化</li>
</ul>
</li>
<li><img src="/2022/10/03/Games101_13_16_RayTracing/IrradianceFalloff.png" alt="IrradianceFalloff"><ul>
<li>随半径变大，Irradiacne变小，而radiant intensity不变；</li>
</ul>
</li>
</ul>
<h4 id="d-2-4-Radiance-辐亮度"><a href="#d-2-4-Radiance-辐亮度" class="headerlink" title="d.2.4). Radiance(辐亮度)"></a>d.2.4). Radiance(辐亮度)</h4><ul>
<li><p>介绍：</p>
<ul>
<li>Radiance是和光线有关的量；</li>
<li>渲染就是在计算radiance；</li>
</ul>
</li>
<li><p>单位：The <strong>radiance</strong>(luminance) is  the power emitted.  reflected, transmitted or receivedd by a surface, <font color="red">per unit solid angle</font>, <font color="blue">per projected unit area</font>.<img src="/2022/10/03/Games101_13_16_RayTracing/Radiance.png" alt="Radiance"></p>
</li>
<li><p><strong>理解：</strong></p>
<ul>
<li><p>Radiance定义：power <font color="red">per unit solid angle</font>, <font color="blue">per projected unit area</font>.</p>
</li>
<li><p>Irradiance: power per projected unit area</p>
</li>
<li><p>Intensity: power per solid angle </p>
<ul>
<li><p>So:</p>
<p>Radiance: Irradiance per solid angle</p>
<p>​    <strong>- Incident  Radiance</strong></p>
<p>Radiance: Intensity per projected unit area</p>
<p>​    <strong>- Exiting Radiance</strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Incident  Radiance: </strong>The <font color="red">irradiance</font> per unit <font color="red">solid angle</font>  <font color="blue">arriving at the surface</font><img src="/2022/10/03/Games101_13_16_RayTracing/IncidentRadiance.png" alt="IncidentRadiance"></p>
<ul>
<li>即 $\omega$ 方向的光线对于 $dA$ 的贡献；</li>
</ul>
</li>
<li><strong>Exiting Radiance: </strong>The <font color="red">intensity</font> per unit <font color="red">projected area</font>  <font color="blue">leaving the surface</font><img src="/2022/10/03/Games101_13_16_RayTracing/ExitingRadiance.png" alt="ExitingRadiance"><ul>
<li>即面积光 $dA$ ，对 $\omega$ 出射方向的贡献；</li>
</ul>
</li>
<li><strong>Irradiance vs. Radiance</strong><img src="/2022/10/03/Games101_13_16_RayTracing/IrradianceVS_radiance.png" alt="IrradianceVS_radiance"><ul>
<li>Irradiance和Radiance的区别在于方向性；</li>
<li>图中，$dA$ 的辐照度 $E(p)$ 为各方向（半圆）对 $dA$ 的贡献。$dA$ 的Radiance $L_i(p,w)$ 为入射方向 $d\omega$ 对 $dA$ 的贡献；</li>
<li>即，Irradiance $E(p)$ 是 radiance $L_i(p,w)$ 对于各个立体角的积分，$L_i(p,\omega)$ 是 $E(p)$ 方向 $\omega$ 的积分；</li>
</ul>
</li>
</ul>
<h2 id="c-BRDF-Bidirectional-Reflectance-Distribution-Function"><a href="#c-BRDF-Bidirectional-Reflectance-Distribution-Function" class="headerlink" title="c). BRDF(Bidirectional Reflectance Distribution Function)"></a>c). BRDF(Bidirectional Reflectance Distribution Function)</h2><p><strong>Ver Games101</strong></p>
<ul>
<li><strong>过程：</strong>光线照射到一点（$p$），该点吸收能量，再辐射出去；</li>
<li><strong>定义：</strong><img src="/2022/10/03/Games101_13_16_RayTracing/BRDF.png" alt="BRDF"><ul>
<li>分母：${\omega}_i$ 方向入射的radiance $L_i(x,{\omega}_i)$，被一点吸收后，辐射往各个方向的Irradiance $E_i({\omega}_i)$；</li>
<li>分子：$E_i({\omega}_i)$，对 ${\omega}_r$ 方向radiance的贡献  $L_r(x,{\omega}_r)$</li>
</ul>
</li>
</ul>
<p><strong>Ver self:</strong></p>
<ul>
<li><strong>定义：</strong>BRDF（双向反射分布函数, bidirectional reflective distribution function）， 是指当一束光从某个方向( $\vec l$ )照射到某个点($p$)上时，在某个方向上( $\vec v$ )的<code>出射辐射通量</code>占总的<code>入射辐射通量</code>的比例</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/21376124">基于物理着色：BRDF - Maple的文章 - 知乎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/380752802">关于brdf的两件小事 - Dua的文章 - 知乎</a></p>
<ul>
<li><p>可以理解对于某一微小（对立体角）出射光线<strong>ωi</strong>，某一微小入射光线<strong>ωj</strong>对其radiance的贡献；</p>
</li>
<li><p>也可以理解成某一微小入射光线<strong>ωj</strong>，弹射到某一方向的微小立体角<strong>ωi</strong>的光线强度的比值；</p>
</li>
<li><p>由于为了方便测量，不定义为radiance相除（即如果按照我们一开始对入射方向 <img src="https://www.zhihu.com/equation?tex=%5Cvec%7Bl%7D" alt="[公式]"> 微分的方式定义brdf，那么科学家们只需要使用一个极小的光源从 <img src="https://www.zhihu.com/equation?tex=%5Cvec%7Bl%7D" alt="[公式]"> 方向入射到点p，就可以测得brdf的值。但是如果定义为radiance相除，就很难输入一个填充立体角刚好等于1的光源。)正常单位为：</p>
<script type="math/tex; mode=display">
{1\over{sr}}</script></li>
</ul>
<h2 id="d-Rendering-equation"><a href="#d-Rendering-equation" class="headerlink" title="d). Rendering equation"></a>d). Rendering equation</h2><h3 id="d-1-简介"><a href="#d-1-简介" class="headerlink" title="d.1). 简介"></a>d.1). 简介</h3><ul>
<li><strong>The Reflection Equation</strong><img src="/2022/10/03/Games101_13_16_RayTracing/TheReflectionEquation.png" alt="TheReflectionEquation"><ul>
<li>$f_r(p,w_i,w_r)$ 为该点的BRDF</li>
</ul>
</li>
<li><img src="/2022/10/03/Games101_13_16_RayTracing/TheReflectionEquation02.png" alt="TheReflectionEquation02"><ul>
<li><strong>问题：</strong><ol>
<li>incoming radiance 不止来源于光源，也来源于其他反射（递归）；</li>
<li>未考虑自发光情况（加入自发光项，变为渲染方程）</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong><font color="red">The Rendering Equation</font></strong><img src="/2022/10/03/Games101_13_16_RayTracing/RenderingEquation.png" alt="RenderingEquation"><ul>
<li>加入了自发光项 $L_e(p,{\omega}_o)$</li>
<li>考虑多次反射</li>
<li><strong>注意：</strong>该方程假定所有方向都是<strong><font color="red">朝外</font></strong>的；</li>
<li>$H^2$ 和 $\Omega$ 表示半球的积分域；</li>
</ul>
</li>
</ul>
<h3 id="d-2-理解"><a href="#d-2-理解" class="headerlink" title="d.2). 理解"></a>d.2). 理解</h3><ul>
<li><strong>Reflection  Equation:</strong><img src="/2022/10/03/Games101_13_16_RayTracing/ReflectionEquation.png" alt="ReflectionEquation"><ul>
<li>反射的Radiance是各个方向光源对出射方向Radiance贡献的积分；</li>
<li>未考虑光线多次弹射</li>
</ul>
</li>
<li><strong>Rendering Equation:</strong><img src="/2022/10/03/Games101_13_16_RayTracing/RenderingEquation_und.png" alt="RenderingEquation_und"><ul>
<li>考虑多次弹射，即其他物体反射的光线也会对出射方向 ${\omega}_r$ 的Radiance做出贡献；</li>
<li>对于渲染方程，只有 $L_r(x,{\omega}_r)$ 和 $L_r(x’,-{\omega}_i)$ 是未知的；</li>
</ul>
</li>
</ul>
<ul>
<li><strong>简化渲染方程：</strong><ul>
<li>Rendering Equation as Integral Equation<img src="/2022/10/03/Games101_13_16_RayTracing/RenderEq_asIntegralEq.png" alt="RenderEq_asIntegralEq"></li>
<li>Linear Operator Equation<img src="/2022/10/03/Games101_13_16_RayTracing/RE_linearOp.png" alt="RE_linearOp"><ul>
<li>$E$ 环境中自发光对应向量，$L$ Radiance对应的向量；</li>
<li>$K$  反射算子（矩阵）</li>
</ul>
</li>
</ul>
</li>
<li>对于Rendering Equation的线性形式，我们可以用以下式子逼近（类似泰勒展开）：<img src="/2022/10/03/Games101_13_16_RayTracing/Appro_RE_linear.png" alt="Appro_RE_linear"></li>
</ul>
<ul>
<li><h2 id="Rendering-Equation的线性形式对于光追的启示："><a href="#Rendering-Equation的线性形式对于光追的启示：" class="headerlink" title="Rendering Equation的线性形式对于光追的启示："></a><strong>Rendering Equation的线性形式对于光追的启示：</strong><img src="/2022/10/03/Games101_13_16_RayTracing/RayTracing_byREQL.png" alt="RayTracing_byREQL"></h2><ul>
<li>$E$ 为自发光，$KE$ 为 直接光照（即弹射一次），$K^2E$ 为间接光照（弹射两次）</li>
<li>全局光照（Global illumination, GI）：直接光照+间接光照</li>
<li>基础的光栅化只做了自发光和直接光照，即 $E$ 和 $KE$</li>
</ul>
</li>
</ul>
<ul>
<li><p>对比</p>
<div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/Comp_DI.png" height="400px" alt="Comp_DI"> <img src="/2022/10/03/Games101_13_16_RayTracing/Comp_GI_2bounce.png" height="400px" alt="Comp_GI_2bounce"> </div>

<div align="center"> <img src="/2022/10/03/Games101_13_16_RayTracing/Comp_GI_4bounce.png" height="400px" alt="Comp_GI_4bounce"> <img src="/2022/10/03/Games101_13_16_RayTracing/Comp_GI_16bounce.png" height="400px" alt="Comp_GI_16bounce"> </div>

<ul>
<li>上方玻璃灯：两次弹射时，光线从摄影机出发不能从玻璃罩中射出，因此其为黑色。而四次弹射时，光线从摄影机出发可以从玻璃罩中射出；</li>
<li>当bounce数目增大时，亮度会趋于一个值，而不会无限增大；</li>
</ul>
</li>
</ul>
<h2 id="e-Probability"><a href="#e-Probability" class="headerlink" title="e). Probability"></a>e). Probability</h2><p><img src="/2022/10/03/Games101_13_16_RayTracing/PDF.png" alt="PDF"></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/ExpectedValue.png" alt="ExpectedValue"></p>
<h1 id="Lecture-16-Ray-Tracing-4-Monte-Carlo-Path-Tracing"><a href="#Lecture-16-Ray-Tracing-4-Monte-Carlo-Path-Tracing" class="headerlink" title="Lecture 16 Ray Tracing 4 (Monte Carlo Path Tracing)"></a>Lecture 16 Ray Tracing 4 (Monte Carlo Path Tracing)</h1><h2 id="a-Monte-Carlo-Integration"><a href="#a-Monte-Carlo-Integration" class="headerlink" title="a). Monte Carlo Integration"></a>a). Monte Carlo Integration</h2><ul>
<li><p><strong>使用原因：</strong>一些函数过于复杂，因此对于特定积分域，不求不定积分，只求其积分的结果。（一种<strong>数值</strong>方法）</p>
</li>
<li><p><strong>过程：</strong>对函数的随机样本进行平均来估计函数的数值；</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MonteCarlo00.png" alt="MonteCarlo00"></p>
<ul>
<li><p><img src="/2022/10/03/Games101_13_16_RayTracing/MonteCarlo01.png" alt="MonteCarlo01"></p>
<ul>
<li>除以 $p(x_i)$ 是一种加权，因为对于积分域上样本的采样可能是<strong>不均匀随机采样</strong></li>
</ul>
</li>
<li><p><strong>均匀采样的情况：</strong></p>
<table frame="void">
    <tr>
    <td><center><img src="/2022/10/03/Games101_13_16_RayTracing/MonteCarlo_Uniform.png" alt="MonteCarlo_Uniform" height="200"></center></td>
    <td><center><img src="/2022/10/03/Games101_13_16_RayTracing/MonteCarlo_Uniform02.png" alt="MonteCarlo_Uniform02" height="200"></center></td>
    </tr>
</table>
</li>
<li><p>Some notes：</p>
<ol>
<li>采样越多，方差越小</li>
<li>如在$x$上积分，要采样$x$</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="b-Paht-Tracing"><a href="#b-Paht-Tracing" class="headerlink" title="b). Paht Tracing"></a>b). Paht Tracing</h2><h3 id="b-1-vs-Whitted-Style-Ray-Tracing"><a href="#b-1-vs-Whitted-Style-Ray-Tracing" class="headerlink" title="b.1). vs Whitted-Style Ray Tracing"></a>b.1). vs Whitted-Style Ray Tracing</h3><ul>
<li><p><strong>Whitted-Style Ray Tracing</strong></p>
<ul>
<li><p>遇到光滑物体会只会 反射/折射（择一进行）</p>
<ul>
<li><p>无法表现Glossy reflection</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/WS_Glossy.png" alt="WS_Glossy"></p>
</li>
</ul>
</li>
<li><p>遇到漫反射物体停止弹射</p>
<ul>
<li>没有Color Blooding(eg.direct illumination)，考虑不到漫反射物体之间的光线传播</li>
</ul>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/WS_Diffuse.png" alt="WS_Diffuse"></p>
</li>
</ul>
</li>
<li><p>But the <strong>rendering equation</strong> is correct</p>
<script type="math/tex; mode=display">
L_{o}\left(p, \omega_{o}\right)=L_{e}\left(p, \omega_{o}\right)+\int_{\Omega^{+}} L_{i}\left(p, \omega_{i}\right) f_{r}\left(p, \omega_{i}, \omega_{o}\right)\left(n \cdot \omega_{i}\right) \mathrm{d} \omega_{i}</script><ul>
<li>需要做的：<ol>
<li>解决半球域的定积分<ul>
<li>蒙特卡洛积分</li>
</ul>
</li>
<li>递归</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="b-2-A-Simple-Monte-Carlo-Solution-Direct-illumination"><a href="#b-2-A-Simple-Monte-Carlo-Solution-Direct-illumination" class="headerlink" title="b.2). A Simple Monte Carlo Solution(Direct illumination)"></a>b.2). A Simple Monte Carlo Solution(Direct illumination)</h3><ul>
<li><p>渲染一个<strong>Pixel（Point）</strong>，<em>当前</em> 之考虑<strong>直接光照</strong></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_Soulution_DI.png" alt="MC_Soulution_DI"></p>
<ul>
<li><p>当 $\omega_i$ 与light相交时，计算该方向的radiance；与Box相交时，则该方向的radiance=0；</p>
<table frame="void">
    <tr>
    <td><center><img src="/2022/10/03/Games101_13_16_RayTracing/MC_Soulution_DI_Fx.png" alt="MC_Soulution_DI_Fx" height="200"></center></td>
    <td><center><img src="/2022/10/03/Games101_13_16_RayTracing/MC_Soulution_DI_Fx_G.png" alt="MC_Soulution_DI_Fx_G" height="200"></center></td>
    </tr>
</table>
</li>
</ul>
</li>
<li><p><strong>P-Code</strong></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_Pcode.png" alt="MC_Pcode"></p>
</li>
</ul>
<h3 id="b-3-Global-illumination-加入递归"><a href="#b-3-Global-illumination-加入递归" class="headerlink" title="b.3). Global illumination(加入递归)"></a>b.3). Global illumination(加入递归)</h3><h4 id="b-3-1-GI-and-problems"><a href="#b-3-1-GI-and-problems" class="headerlink" title="b.3.1). GI and problems"></a>b.3.1). GI and problems</h4><ul>
<li><p><strong>P-Code</strong></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_GI.png" alt="MC_GI"></p>
<ul>
<li><p><strong>Problem1:</strong> Explosion of #rays as #bounces go up</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_GI_P1.png" alt="MC_GI_P1"></p>
<ul>
<li><p><strong>解决方法：</strong> <font color="red">N=1</font>（N=1即Path Tracing，Distributed Ray Tracing if N != 1）</p>
<ul>
<li><p>N=1会造成较多的Noise，因此采用Subpixel，即每个像素内多次采样（Samples per pixel, SPP）</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_GI_SPP.png" alt="MC_GI_SPP"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Problem2:</strong> 递归不会停止</p>
<ul>
<li><p>现实世界中，光线的弹射次数是无限的</p>
</li>
<li><p>简单地，<strong>减少弹射次数 == 减少能量</strong>；</p>
</li>
<li><p><strong>解决方法：</strong> Russian Roulette(RR, 俄罗斯轮盘赌)</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="b-3-2-Russian-Roulette-RR-俄罗斯轮盘赌"><a href="#b-3-2-Russian-Roulette-RR-俄罗斯轮盘赌" class="headerlink" title="b.3.2). Russian Roulette(RR, 俄罗斯轮盘赌)"></a>b.3.2). Russian Roulette(RR, 俄罗斯轮盘赌)</h4><p><img src="/2022/10/03/Games101_13_16_RayTracing/RR.png" alt="RR"></p>
<ul>
<li><p>先前一点的着色结果是 $L_o$，引入RR后</p>
<ul>
<li>With probability $P$, shoot a ray and return the <strong>shading result divided by P: <font color="red">Lo / P</font></strong></li>
<li>With probability $1-P$, don’t shoot a ray and you’ll get <strong><font color="red">0</font></strong></li>
</ul>
</li>
<li><p>由此可得出数学期望 $E=P \cdot\left(\frac{L_{o}}{p}\right)+(1-P) \cdot 0=L_{o}$</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/RR_Pcode.png" alt="RR_Pcode"></p>
</li>
</ul>
<h4 id="b-3-3-优化"><a href="#b-3-3-优化" class="headerlink" title="b.3.3). 优化"></a>b.3.3). 优化</h4><ul>
<li><p>计算直接光照时，如对点P向各个方向均匀采样，当光源小时，直接光照的贡献会小，造成较多的噪声；</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_Wasted.png" alt="MC_Wasted"></p>
</li>
<li><p><strong>解决方法：</strong> 换元，使渲染方程对光源面积 $A$ 进行积分，<strong>pdf = 1/A</strong></p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_dA01.png" alt="MC_dA01"></p>
<script type="math/tex; mode=display">
d \omega=\frac{d A \cos \theta^{\prime}}{\left\|x^{\prime}-x\right\|^{2}}

(Note:  \theta^{\prime} , not  \theta  )</script><ul>
<li>立体角可以看前面辐射度量学的部分</li>
</ul>
</li>
<li><p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_dA02.png" alt="MC_dA02"></p>
</li>
<li><p><strong>过程：</strong>（直接光照，间接光照分开计算）</p>
<ol>
<li><font color="blue">light source</font> (<strong>direct</strong>, no need to have RR)</li>
<li><font color="orange">other reflectors</font> (<strong>indirect</strong>, ues RR)</li>
</ol>
</li>
<li><p><strong>P-Code</strong>（未考虑遮挡）</p>
<p><img src="/2022/10/03/Games101_13_16_RayTracing/MC_优化_Pcode.png" alt="MC_优化_Pcode"></p>
</li>
<li><p><strong>遮挡</strong><img src="/2022/10/03/Games101_13_16_RayTracing/MC_优化_Pcode02.png" alt="MC_优化_Pcode02"></p>
</li>
</ul>
<hr>
<p>附上上学期做的光追（借鉴smallpt）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 采用Monte Carlo Path Tracing</span><br><span class="line">* 漫反射采用的是Lambert</span><br><span class="line">* 定义了三角面片和球体，其中三角面片可多片合成一个对象，</span><br><span class="line">* 与三角面片求交则使用克拉默法则，而基于此做条件上的修改就可构建平行四边形，因此将平行四边形也归入三角面片</span><br><span class="line">* 用平行四边形代替两个三角面片在适用且数量较多的情况下可显著提高运算效率</span><br><span class="line">* 球体求交运算量小于三角面片，因此墙壁通过大半径的球体构建</span><br><span class="line">*</span><br><span class="line">* 由于想要表现出计算过程，许多数学运算未化简，运算效率不高</span><br><span class="line">* 由于未使用BVH等方式约束，三角面片较为影响性能</span><br><span class="line">* 目前场景除墙面外中有两个球体（镜面反射以及玻璃），以及一个立方体，通过6个三角面片（平行四边形）构成</span><br><span class="line">*</span><br><span class="line">* 由于为了提高运算效率，本程序中使用的蒙特卡洛采样方向约束在朝向其他对象的方向（射线在必定与其他对象相交的范围内随机），</span><br><span class="line">* 但三角面片的约束范围较复杂，因此不支持将三角面片定义为光源</span><br><span class="line">*</span><br><span class="line">* 虽会增加噪声，为了运算效率，除了最大迭代次数，还引入经处理可使radiance的数学期望与原值相同的Russian Roulette，开始RR的次数为最大迭代次数除以2</span><br><span class="line">* </span><br><span class="line">* 由于运算量大，采样默认设置为1，如想提高运行效率可删除掉三角面片</span><br><span class="line">* </span><br><span class="line">* 绘制通过glut</span><br><span class="line">* 程序输出为ppm格式图片</span><br><span class="line">**/</span><br><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;gl/glut.h&gt;</span><br><span class="line"></span><br><span class="line">#define DEPTH_MAX 10	//最大迭代次数</span><br><span class="line">#define WIDTH 512</span><br><span class="line">#define HIGHT 385</span><br><span class="line"></span><br><span class="line">double M_PI = 3.1415926535;</span><br><span class="line"></span><br><span class="line">double erand48(unsigned short xsubi[3]) &#123;</span><br><span class="line">	return (double)rand() / (double)RAND_MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Vec &#123;</span><br><span class="line">	double x, y, z;</span><br><span class="line">	Vec(double _x = 0, double _y = 0, double _z = 0) &#123; x = _x; y = _y; z = _z; &#125;;</span><br><span class="line"></span><br><span class="line">	Vec operator+(const Vec&amp; b) const &#123; return Vec(x + b.x, y + b.y, z + b.z); &#125;;	//加</span><br><span class="line"></span><br><span class="line">	Vec operator-(const Vec&amp; b) const &#123; return Vec(x - b.x, y - b.y, z - b.z); &#125;	//减</span><br><span class="line"></span><br><span class="line">	Vec operator*(double b) const &#123; return Vec(x * b, y * b, z * b); &#125;;	//数乘</span><br><span class="line"></span><br><span class="line">	Vec mult(const Vec&amp; b) const &#123; return Vec(x * b.x, y * b.y, z * b.z); &#125;	//数乘</span><br><span class="line"></span><br><span class="line">	Vec&amp; norm() &#123; return *this = *this * (1 / sqrt(x * x + y * y + z * z)); &#125;	//单位向量</span><br><span class="line"></span><br><span class="line">	double dot(const Vec&amp; b) const &#123; return x * b.x + y * b.y + z * b.z; &#125;	//点乘</span><br><span class="line"></span><br><span class="line">	Vec cross(const Vec&amp; b) const &#123; return Vec(y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x); &#125;	//叉乘</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Ray &#123;</span><br><span class="line">	Vec o, d;</span><br><span class="line">	Ray(Vec _o, Vec _d) : o(_o), d(_d) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">enum Refl_t &#123;	//反射类型</span><br><span class="line">	DIFF,</span><br><span class="line">	SPEC,</span><br><span class="line">	REFR</span><br><span class="line">&#125;;</span><br><span class="line">struct MeshTriangle &#123;	// 三角面片</span><br><span class="line">	const Vec* verts;	// 顶点</span><br><span class="line">	const int* vertsIndex;	//顶点排序</span><br><span class="line">	const int numTris;	// 三角形数量</span><br><span class="line">	Vec* vertices;</span><br><span class="line">	Vec e, c;	// emission, color</span><br><span class="line">	Refl_t refl;</span><br><span class="line">	int isTriangle;</span><br><span class="line"></span><br><span class="line">	//顶点， 顶点列表（决定构建顺序以及法线正负）， 三角面片数量， emission, color， 材质， 是否是三角形（或平行四边形）</span><br><span class="line">	MeshTriangle(const Vec* _verts, const int* _vertsIndex, const int _numTris, Vec _e, Vec _c, Refl_t _refl, int _isTriangle = 1) :</span><br><span class="line">		verts(_verts), vertsIndex(_vertsIndex), numTris(_numTris), e(_e), c(_c), refl(_refl), isTriangle(_isTriangle)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices = new Vec[3 * numTris];</span><br><span class="line">		for (int i = 0; i &lt; numTris; i++) &#123;</span><br><span class="line">			for (int n = 0; n &lt; 3; n++) &#123;</span><br><span class="line">				vertices[3 * i + n] = verts[vertsIndex[3 * i + n]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	void move(int x, int y, int z) &#123;	// 方便调试</span><br><span class="line">		for (int i = 0; i &lt; 3 * numTris; i++) &#123;</span><br><span class="line">			vertices[i] = vertices[i] + Vec(x, y, z);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	double intersect(const Ray&amp; r, Vec&amp; n) const &#123;	// n返回法线</span><br><span class="line">		double tnear = 1e20;</span><br><span class="line">		double tnear_out;</span><br><span class="line">		//std::cout &lt;&lt; numTris &lt;&lt; std::endl;	//</span><br><span class="line">		Vec temp_normal;</span><br><span class="line">		double temp = 1e20;</span><br><span class="line">		bool flag = false;</span><br><span class="line">		for (int i = 0; i &lt; numTris; i++) &#123;</span><br><span class="line">			Vec&amp; v0 = vertices[3 * i];</span><br><span class="line">			Vec&amp; v1 = vertices[3 * i + 1];</span><br><span class="line">			Vec&amp; v2 = vertices[3 * i + 2];</span><br><span class="line">			/*std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; v0.x &lt;&lt; &quot;y:&quot; &lt;&lt; v0.y &lt;&lt; &quot;, z:&quot; &lt;&lt; v0.z &lt;&lt; std::endl;</span><br><span class="line">			std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; v1.x &lt;&lt; &quot;y:&quot; &lt;&lt; v1.y &lt;&lt; &quot;, z:&quot; &lt;&lt; v1.z &lt;&lt; std::endl;</span><br><span class="line">			std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; v2.x &lt;&lt; &quot;y:&quot; &lt;&lt; v2.y &lt;&lt; &quot;, z:&quot; &lt;&lt; v2.z &lt;&lt; std::endl;*/</span><br><span class="line">			Vec E1 = v1 - v0;</span><br><span class="line">			Vec E2 = v2 - v0;</span><br><span class="line"></span><br><span class="line">			n = E1.cross(E2).norm();	//三角形法线</span><br><span class="line">			Vec S = r.o - v0;</span><br><span class="line">			Vec S1 = (r.d).cross(E2);</span><br><span class="line">			Vec S2 = S.cross(E1);</span><br><span class="line">			//tnear为时间 沿着三角形方向 t的为正</span><br><span class="line">			//u,v 为重心坐标前的参数 都得为非负的还得小于1</span><br><span class="line">			double S1E1 = S1.dot(E1);</span><br><span class="line"></span><br><span class="line">			tnear = 1.0f / S1E1 * S2.dot(E2);</span><br><span class="line">			double u = 1.0f / S1E1 * S1.dot(S);</span><br><span class="line">			double v = 1.0f / S1E1 * S2.dot(r.d);</span><br><span class="line">			double k = 1 - u - v;</span><br><span class="line"></span><br><span class="line">			bool judge;</span><br><span class="line">			if (isTriangle) &#123;</span><br><span class="line">				judge = tnear &gt; 0 &amp;&amp; v &gt;= 0 &amp;&amp; v &lt;= 1 &amp;&amp; u &gt;= 0 &amp;&amp; u &lt;= 1 &amp;&amp; k &gt;= 0;</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				judge = tnear &gt; 0 &amp;&amp; v &gt;= 0 &amp;&amp; v &lt;= 1 &amp;&amp; u &gt;= 0 &amp;&amp; u &lt;= 1;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			if (judge) &#123;	//不加k &gt;= 0 可构建平行四边形</span><br><span class="line">				if (!flag) &#123;</span><br><span class="line">					tnear_out = tnear;</span><br><span class="line">					temp_normal = n;</span><br><span class="line">					flag = true;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				if (tnear &lt; tnear_out) &#123;</span><br><span class="line">					tnear_out = tnear;</span><br><span class="line">					temp_normal = n;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if (flag) &#123;</span><br><span class="line">			n = temp_normal;</span><br><span class="line"></span><br><span class="line">			//std::cout &lt;&lt; tnear_out &lt;&lt; std::endl;</span><br><span class="line">			return (tnear_out &lt; 1e20 &amp;&amp; tnear_out &gt; 0) ? tnear_out : 0;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~MeshTriangle() &#123;</span><br><span class="line">		delete[] vertices;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Sphere &#123;</span><br><span class="line">	double rad;	// radius</span><br><span class="line">	Vec p, e, c;	// position, emission, color</span><br><span class="line">	Refl_t refl;</span><br><span class="line"></span><br><span class="line">	Sphere(double _rad, Vec _p, Vec _e, Vec _c, Refl_t _refl) :</span><br><span class="line">		rad(_rad), p(_p), e(_e), c(_c), refl(_refl) &#123;&#125;</span><br><span class="line"></span><br><span class="line">	double intersect(const Ray&amp; r) const &#123;</span><br><span class="line">		Vec op = p - r.o;</span><br><span class="line">		double t, eps = 1e-4;</span><br><span class="line">		double b_12 = op.dot(r.d);		// -b / 2</span><br><span class="line">		double det_14 = b_12 * b_12 - op.dot(op) + rad * rad;	// det / 4</span><br><span class="line">		double det_14_sqrt = sqrt(det_14);</span><br><span class="line">		return (t = b_12 - det_14_sqrt) &gt; eps ? t : ((t = b_12 + det_14_sqrt) &gt; eps ? t : 0);</span><br><span class="line">		//if (det_14 &lt; 0) &#123;</span><br><span class="line">		//	return 0;</span><br><span class="line">		//&#125;</span><br><span class="line">		//else &#123;</span><br><span class="line">		//	t = b_12 - det_14_sqrt;</span><br><span class="line">		//	if (t &gt; eps) return t;	//考虑到浮点数的缺陷</span><br><span class="line"></span><br><span class="line">		//	t = b_12 + det_14_sqrt;</span><br><span class="line">		//	if (t &gt; eps) return t;</span><br><span class="line"></span><br><span class="line">		//	return 0;	//交点为反向延长线，不考虑</span><br><span class="line">		//&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sphere spheres[] = &#123;//Scene: radius, position, emission, color, material</span><br><span class="line">	Sphere(1e5, Vec(1e5 + 1,40.8,81.6),  Vec(),Vec(.75,.25,.25),DIFF),//Left</span><br><span class="line">	Sphere(1e5, Vec(-1e5 + 99,40.8,81.6),Vec(),Vec(.25,.25,.75),DIFF),//Rght</span><br><span class="line">	Sphere(1e5, Vec(50,40.8, 1e5),       Vec(),Vec(.75,.75,.75),DIFF),//Back</span><br><span class="line">	Sphere(1e5, Vec(50,40.8,-1e5 + 170), Vec(),Vec(.25,.25,.25), DIFF),//Frnt</span><br><span class="line">	Sphere(1e5, Vec(50, 1e5, 81.6),      Vec(),Vec(.75,.75,.75),DIFF),//Botm</span><br><span class="line">	Sphere(1e5, Vec(50,-1e5 + 81.6,81.6),Vec(),Vec(.75,.75,.75),DIFF),//Top</span><br><span class="line">	Sphere(12,Vec(27,12.5,47),         Vec(),Vec(1,1,1) * .999, SPEC),//Mirr</span><br><span class="line">	Sphere(16.5,Vec(73,16.5,78),         Vec(),Vec(1,1,1) * .999, REFR),//Glas</span><br><span class="line">	Sphere(1.5, Vec(50,81.6 - 16.5,81.6),Vec(4,4,4) * 100,  Vec(), DIFF)  //Lite</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vec verts[8] = &#123;	//vertices</span><br><span class="line">	Vec(26, 0, 95),</span><br><span class="line">	Vec(41, 0, 90),</span><br><span class="line">	Vec(31, 0, 110),</span><br><span class="line">	Vec(46, 0, 105),</span><br><span class="line">	Vec(26, 40, 95),</span><br><span class="line">	Vec(41, 40, 90),</span><br><span class="line">	Vec(31, 40, 110),</span><br><span class="line">	Vec(46, 40, 105),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int vertsIndex[18] = &#123; 0, 4, 1,		// 顺序影响法线方向</span><br><span class="line">					1, 5, 3,</span><br><span class="line">					3, 7, 2,</span><br><span class="line">					2, 6, 0,</span><br><span class="line">					6, 7, 4,</span><br><span class="line">					2, 0, 3,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//int vertsIndex[36] = &#123; 0, 4, 1,		// 顺序影响法线方向</span><br><span class="line">//					1, 4, 5,</span><br><span class="line">//					1, 5, 7,</span><br><span class="line">//					1, 7, 3,</span><br><span class="line">//					3, 7, 6,</span><br><span class="line">//					3, 6, 2,</span><br><span class="line">//					2, 6, 0,</span><br><span class="line">//					0, 6, 4,</span><br><span class="line">//					6, 7, 4,</span><br><span class="line">//					7, 5, 4,</span><br><span class="line">//					2, 0, 3,</span><br><span class="line">//					3, 0, 1,</span><br><span class="line">//					&#125;;</span><br><span class="line"></span><br><span class="line">MeshTriangle meshTriangles[] = &#123;</span><br><span class="line">	MeshTriangle(verts, vertsIndex, 6, Vec(), Vec(.25, .75, .25), DIFF, 0),</span><br><span class="line">&#125;;	//vertices, vertsIndex, numTris, emission, color, material</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int numSphere = sizeof(spheres) / sizeof(Sphere);</span><br><span class="line">int numMeshTriangle = sizeof(meshTriangles) / sizeof(MeshTriangle);</span><br><span class="line"></span><br><span class="line">inline double clamp01(double x) &#123;	//截断到01</span><br><span class="line">	return x &lt; 0 ? 0 : (x &gt; 1 ? 1 : x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline double gamma(double x, float n = 2.2) &#123;</span><br><span class="line">	return pow(clamp01(x), 1 / n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int toInt255(double x) &#123;	//gamma取2.2, 四舍五入</span><br><span class="line">	return int(gamma(x) * 255 + .5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void UpdateProgress(float progress)	//进度提醒</span><br><span class="line">&#123;</span><br><span class="line">	int barWidth = 70;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; &quot;[&quot;;</span><br><span class="line">	int pos = barWidth * progress;</span><br><span class="line">	for (int i = 0; i &lt; barWidth; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		if (i &lt; pos)</span><br><span class="line">			std::cout &lt;&lt; &quot;=&quot;;</span><br><span class="line">		else if (i == pos)</span><br><span class="line">			std::cout &lt;&lt; &quot;&gt;&quot;;</span><br><span class="line">		else</span><br><span class="line">			std::cout &lt;&lt; &quot; &quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//三位小数</span><br><span class="line">	std::cout &lt;&lt; &quot;] &quot; &lt;&lt; std::setiosflags(std::ios::fixed) &lt;&lt; std::setiosflags(std::ios::right) &lt;&lt; std::setprecision(3) &lt;&lt; float(progress * 100.0) &lt;&lt; &quot; %\r&quot;;</span><br><span class="line">	std::cout.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool intersect(const Ray&amp; r, double&amp; t, int&amp; id, Vec&amp; normal) &#123;	//t最短的相交, n 返回法线</span><br><span class="line">	double n = sizeof(spheres) / sizeof(Sphere) + numMeshTriangle;</span><br><span class="line">	double d;</span><br><span class="line">	double inf = t = 1e20;</span><br><span class="line">	for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">		//std::cout &lt;&lt; i &lt;&lt; std::endl;	//</span><br><span class="line">		if (i &lt; numSphere) &#123;</span><br><span class="line">			if ((d = spheres[i].intersect(r)) &amp;&amp; d &lt; t) &#123;	// 注意：不自交（真坑啊。。。）</span><br><span class="line">				t = d;</span><br><span class="line">				id = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			d = meshTriangles[i - numSphere].intersect(r, normal);</span><br><span class="line">			if (d &amp;&amp; d &lt; t) &#123;</span><br><span class="line">				//std::cout &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">				t = d;</span><br><span class="line">				id = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return t &lt; inf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Xi:随机种子	E：whether to include emissive color</span><br><span class="line">Vec radiance(const Ray&amp; r, int depth, unsigned short* Xi, int E = 1) &#123;</span><br><span class="line">	double t;	//与交点距离</span><br><span class="line">	int id = 0;</span><br><span class="line">	Vec temp_n;</span><br><span class="line">	if (!intersect(r, t, id, temp_n)) &#123;		//id &gt;= numSphere说明是三角面片</span><br><span class="line">		return Vec();	//miss</span><br><span class="line">	&#125;</span><br><span class="line">	//std::cout &lt;&lt; id &lt;&lt; std::endl;	//</span><br><span class="line"></span><br><span class="line">	Vec x = r.o + r.d * t;// Ray hit point</span><br><span class="line">	Vec n;	//normal(射线经过obj内部后,n为负数)</span><br><span class="line">	Vec f;</span><br><span class="line">	Refl_t obj_refl;</span><br><span class="line">	Vec obj_e;</span><br><span class="line">	if (id &lt; numSphere) &#123;</span><br><span class="line">		const Sphere&amp; obj = spheres[id];</span><br><span class="line">		n = (x - obj.p).norm();</span><br><span class="line">		f = obj.c;</span><br><span class="line">		obj_refl = obj.refl;</span><br><span class="line">		obj_e = obj.e;</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		//std::cout &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">		//if (x.x == 36) std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; x.x &lt;&lt; &quot;y:&quot; &lt;&lt; x.y &lt;&lt; &quot;, z:&quot; &lt;&lt; x.z &lt;&lt; std::endl;</span><br><span class="line">		const MeshTriangle&amp; obj = meshTriangles[id - numSphere];</span><br><span class="line">		n = temp_n.norm();</span><br><span class="line">		f = obj.c;</span><br><span class="line">		obj_refl = obj.refl;</span><br><span class="line">		obj_e = obj.e;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (depth &gt; DEPTH_MAX) &#123;</span><br><span class="line"></span><br><span class="line">		return Vec();</span><br><span class="line">	&#125;</span><br><span class="line">	//Vec n = (x - obj.p).norm();	// sphere normal(射线经过obj内部后,n为负数)</span><br><span class="line">	Vec n_real = n.dot(r.d) &lt; 0 ? n : n * -1;	//sphere normal</span><br><span class="line">	//std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; f.x &lt;&lt; &quot;y:&quot; &lt;&lt; f.y &lt;&lt; &quot;, z:&quot; &lt;&lt; f.z &lt;&lt; std::endl;	//</span><br><span class="line"></span><br><span class="line">	//用rgb最大值作为Russian Roulette不终止的概率p</span><br><span class="line">	//RR适用因为p * Li * (1/p) + 0 * (1-p) = Li，即数学期望等于Li</span><br><span class="line">	double p = f.x &gt; f.y &amp;&amp; f.x &gt; f.z ? f.x : f.y &gt; f.z ? f.y : f.z;</span><br><span class="line"></span><br><span class="line">	if (++depth &gt; int(DEPTH_MAX / 2) || !p) if (erand48(Xi) &lt; p) f = f * (1.0 / p); else return obj_e * E;</span><br><span class="line"></span><br><span class="line">	//std::cout &lt;&lt; &quot;miss&quot; &lt;&lt; std::endl;</span><br><span class="line">	if (obj_refl == DIFF) &#123;</span><br><span class="line">		//std::cout &lt;&lt; &quot;DIFF&quot; &lt;&lt; std::endl;	//</span><br><span class="line">		//采用Lambert，出射方向任意，以极坐标的方式构建随机弹射光线方向</span><br><span class="line">		double r1 = 2 * M_PI * erand48(Xi);</span><br><span class="line">		double r2 = erand48(Xi);</span><br><span class="line">		double r2_sqrt = sqrt(r2);</span><br><span class="line"></span><br><span class="line">		//标准正交系</span><br><span class="line">		Vec w = n_real;</span><br><span class="line">		Vec u = ((fabs(w.x) &gt; 0.1 ? Vec(0, 1) : Vec(1)).cross(w)).norm();</span><br><span class="line">		Vec v = w.cross(u);</span><br><span class="line">		Vec d = (u * cos(r1) * r2_sqrt + v * sin(r1) * r2_sqrt + w * sqrt(1 - r2)).norm();	//Ray direction, 即path tracing， N=1的那条射线</span><br><span class="line"></span><br><span class="line">		Vec e;</span><br><span class="line">		for (int i = 0; i &lt; numSphere; i++) &#123;</span><br><span class="line">			const Sphere&amp; s = spheres[i];</span><br><span class="line">			if ((s.e.x &lt;= 0 &amp;&amp; s.e.y &lt;= 0 &amp;&amp; s.e.z &lt;= 0) || i &gt;= numSphere) continue;	//skip no radiance</span><br><span class="line"></span><br><span class="line">			Vec sw = s.p - x, su = ((fabs(sw.x) &gt; 0.1 ? Vec(0, 1) : Vec(1)).cross(sw)).norm(), sv = sw.cross(su);</span><br><span class="line"></span><br><span class="line">			//x发出射向id=i的范围内随机方向的采样射线</span><br><span class="line">			double cos_a_max = sqrt(1 - s.rad * s.rad / (x - s.p).dot(x - s.p));</span><br><span class="line">			double eps1 = erand48(Xi), eps2 = erand48(Xi);</span><br><span class="line">			//double cos_a = 1 - eps1*(1. - cos_a_max);</span><br><span class="line">			double cos_a = 1 - eps1 + eps1 * cos_a_max;</span><br><span class="line">			double sin_a = sqrt(1 - cos_a * cos_a);</span><br><span class="line">			double phi = 2 * M_PI * eps2;</span><br><span class="line">			Vec l = su * cos(phi) * sin_a + sv * sin(phi) * sin_a + sw * cos_a;</span><br><span class="line">			l.norm();</span><br><span class="line"></span><br><span class="line">			// Note: </span><br><span class="line">			// 根据Monte Carlo Integration得到相应形式的渲染方程(反射率方程)</span><br><span class="line">			// Lo(p,wo) = (1/N)*∑(i~n) &#123;(Li(p,wi)*fr(p,wi,wo)*(n*wi)) / pdf&#125;</span><br><span class="line">			// Lo:入射radiance, p:单位半球球心, wo:入射方向（微小立体角）</span><br><span class="line">			// N:取样数（光线数）, Li wi略</span><br><span class="line">			// fr:BRDF, n:法线方向</span><br><span class="line">			// pdf: 分布函数</span><br><span class="line">			// 由于采用的是path tracing N取1, Lo(p,wo) = (Li(p,wi)*fr(p,wi,wo)*(n*wi)) / pdf</span><br><span class="line">			// 当采用Lambert漫反射的BRDF可推导出为1/pi</span><br><span class="line">			// 对半球均匀采样时，pdf=1/单位半圆面积，但射线的方向是在于法线的夹角最大是a_max, 采样的区域被限定</span><br><span class="line">			// 球形对角度A(法线方向与某一点的夹角)积分， 得S = ſ 2 * pi * r*r sinA dA = abs(2 * pi * r * r * cosA), r=1</span><br><span class="line">			// 易得pdf = 1 / 球部分表面积 = 1 / (2 * pi * r * r(1-cos_a_max)) = 1 / (2 * pi * (1-cos_a_max))</span><br><span class="line">			// Lo(p,wo) = (Li(p,wi)*fr(p,wi,wo)*(n*wi)) / pdf = Li(p,wi) * (1 / pi) * cos_a * (2 * pi * (1 - cos_a_max))</span><br><span class="line">			Vec temp1;</span><br><span class="line">			if (intersect(Ray(x, l), t, id, temp1) &amp;&amp; id == i) &#123;</span><br><span class="line">				double omega = 2 * M_PI * (1 - cos_a_max);</span><br><span class="line">				e = e + f.mult(s.e * l.dot(n_real) * omega) * (1 / M_PI);</span><br><span class="line">				//std::cout &lt;&lt; e.x &lt;&lt; std::endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		//std::cout &lt;&lt; f.x &lt;&lt; std::endl;</span><br><span class="line">		return obj_e * E + e + f.mult(radiance(Ray(x, d), depth, Xi, 0));	//TEST:E暂时设置为0</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	else if (obj_refl == SPEC) &#123;</span><br><span class="line">		//std::cout &lt;&lt; &quot;SPEC&quot; &lt;&lt; std::endl;	//</span><br><span class="line">		return obj_e + f.mult(radiance(Ray(x, r.d - n * 2 * n.dot(r.d)), depth, Xi));</span><br><span class="line">	&#125;</span><br><span class="line">	else if (obj_refl == REFR) &#123;</span><br><span class="line">		//std::cout &lt;&lt; &quot;REFR&quot; &lt;&lt; std::endl;</span><br><span class="line">		Ray reflRay(x, r.d - n * 2 * n.dot(r.d));</span><br><span class="line">		bool into = n.dot(n_real) &gt; 0;</span><br><span class="line">		double nc = 1;//真空</span><br><span class="line">		double nt = 1.5;//玻璃</span><br><span class="line">		double nnt = into ? nc / nt : nt / nc;</span><br><span class="line">		double ddn = r.d.dot(n_real);</span><br><span class="line">		double cos2_t = 1 - nnt * nnt * (1 - ddn * ddn);	//2是平方</span><br><span class="line"></span><br><span class="line">		if (cos2_t &lt; 0) &#123;	//没有折射，发生全反射</span><br><span class="line">			return obj_e + f.mult(radiance(reflRay, depth, Xi));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Vec tdir = (r.d * nnt - n * ((into ? 1 : -1) * (ddn * nnt + sqrt(cos2_t)))).norm();</span><br><span class="line">		//考虑到计算量，采用近似算法</span><br><span class="line">		double a = nt - nc, b = nt + nc, R0 = a * a / (b * b), c = 1 - (into ? -ddn : tdir.dot(n));</span><br><span class="line">		double Re = R0 + (1 - R0) * c * c * c * c * c, Tr = 1 - Re, P = 0.25 + 0.5 * Re, RP = Re / P, TP = Tr / (1 - P);</span><br><span class="line"></span><br><span class="line">		if (depth &gt; 2) &#123;</span><br><span class="line">			if (erand48(Xi) &lt; P) &#123;	// RR</span><br><span class="line">				return obj_e + f.mult(radiance(reflRay, depth, Xi) * RP);</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				return obj_e + f.mult(radiance(Ray(x, tdir), depth, Xi) * TP);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			return obj_e + f.mult(radiance(reflRay, depth, Xi) * Re + radiance(Ray(x, tdir), depth, Xi) * Tr);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vec* c = new Vec[WIDTH * HIGHT];	//图像缓存</span><br><span class="line"></span><br><span class="line">void Initial(void)</span><br><span class="line">&#123;</span><br><span class="line">	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);</span><br><span class="line">	glMatrixMode(GL_PROJECTION);</span><br><span class="line">	int width = glutGet(GLUT_WINDOW_WIDTH);</span><br><span class="line">	int height = glutGet(GLUT_WINDOW_HEIGHT);</span><br><span class="line">	gluOrtho2D(0.0, width, 0.0, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void myDisplay(void) &#123;</span><br><span class="line">	glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">	glPointSize(1);</span><br><span class="line">	for (int y = 0; y &lt; HIGHT; y++) &#123;</span><br><span class="line">		for (int x = 0; x &lt; WIDTH; x++) &#123;</span><br><span class="line">			int n = (HIGHT - y - 1) * WIDTH + x;</span><br><span class="line">			glColor3f(gamma(c[n].x), gamma(c[n].y), gamma(c[n].z));</span><br><span class="line">			glBegin(GL_POINTS);</span><br><span class="line">			glVertex2f(x, y);</span><br><span class="line">			glEnd();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	glFlush();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">	int w = WIDTH, h = HIGHT;</span><br><span class="line">	int samples = 1;	//设置每subpixel采样数</span><br><span class="line">	//设置 camera</span><br><span class="line">	Ray cam(Vec(50, 52, 295.6), Vec(0, -0.042612, -1).norm());</span><br><span class="line">	Vec cx = Vec(w * 0.5135 / h);	//视场角</span><br><span class="line">	Vec cy = (cx.cross(cam.d)).norm() * 0.5135;</span><br><span class="line"></span><br><span class="line">	Vec r;	//摄影机射线</span><br><span class="line">	auto clock_start = clock();</span><br><span class="line">#pragma omp parallel for schedule(dynamic, 1) private(i)</span><br><span class="line"></span><br><span class="line">	meshTriangles[0].move(15, 0, 0);</span><br><span class="line">	for (int y = 0; y &lt; h; y++) &#123;</span><br><span class="line">		UpdateProgress((float)y / HIGHT);</span><br><span class="line">		unsigned short Xi[3] = &#123; 0, 0, y * y * y &#125;;</span><br><span class="line">		//设置四个子像素</span><br><span class="line">		for (unsigned short x = 0; x &lt; w; x++) &#123;</span><br><span class="line">			for (int sy = 0, i = (h - y - 1) * w + x; sy &lt; 2; sy++) &#123;</span><br><span class="line">				for (int sx = 0; sx &lt; 2; sx++, r = Vec()) &#123;</span><br><span class="line">					for (int s = 0; s &lt; samples; s++) &#123;</span><br><span class="line">						double r1 = 2 * erand48(Xi);</span><br><span class="line">						double dx = r1 &lt; 1 ? sqrt(r1) - 1 : 1 - sqrt(2 - r1);</span><br><span class="line">						double r2 = 2 * erand48(Xi);</span><br><span class="line">						//std::cout &lt;&lt; r1 &lt;&lt; &quot; &quot; &lt;&lt; r2 &lt;&lt; std::endl;</span><br><span class="line">						double dy = r2 &lt; 1 ? sqrt(r2) - 1 : 1 - sqrt(2 - r2);</span><br><span class="line">						Vec sample_direct = cx * (((dx + 0.5 + sx) / 2 + x) / w - 0.5)</span><br><span class="line">							+ cy * (((dy + 0.5 + sy) / 2 + y) / h - 0.5) + cam.d;</span><br><span class="line"></span><br><span class="line">						//std::cout &lt;&lt; r.x &lt;&lt; std::endl;</span><br><span class="line">						r = r + radiance(Ray(cam.o + sample_direct * 140, sample_direct.norm()), 0, Xi) * (1.0 / samples);</span><br><span class="line">						//std::cout &lt;&lt; &quot;x:&quot; &lt;&lt; r.x &lt;&lt; &quot;y:&quot; &lt;&lt; r.y &lt;&lt; &quot;, z:&quot; &lt;&lt;r.z &lt;&lt; std::endl;	//</span><br><span class="line">					&#125;</span><br><span class="line">					//std::cout &lt;&lt; c[i].x &lt;&lt; std::endl;	//</span><br><span class="line">					c[i] = c[i] + Vec(clamp01(r.x), clamp01(r.y), clamp01(r.z)) * 0.25;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	FILE* f = fopen(&quot;test.ppm&quot;, &quot;wb&quot;);</span><br><span class="line">	fprintf(f, &quot;P3\n%d %d\n%d\n&quot;, w, h, 255);</span><br><span class="line">	for (int i = 0; i &lt; w * h; i++) &#123;</span><br><span class="line">		fprintf(f, &quot;%d %d %d &quot;, toInt255(c[i].x), toInt255(c[i].y), toInt255(c[i].z));</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(f);</span><br><span class="line">	</span><br><span class="line">	glutInit(&amp;argc, argv);</span><br><span class="line">	glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line">	glutInitWindowPosition(100, 100);</span><br><span class="line">	glutInitWindowSize(w, h);</span><br><span class="line">	glutCreateWindow(&quot;Path Tracing&quot;);</span><br><span class="line"></span><br><span class="line">	Initial();</span><br><span class="line">	glutDisplayFunc(&amp;myDisplay);</span><br><span class="line">	glutMainLoop();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
        <tag>Ray-Tracing</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101_10_12 Geometry</title>
    <url>/2022/10/02/Games101_10_12_Geometry/</url>
    <content><![CDATA[<h1 id="Lecture-10-11-Geometry-1-2"><a href="#Lecture-10-11-Geometry-1-2" class="headerlink" title="Lecture 10/11: Geometry 1 2"></a>Lecture 10/11: Geometry 1 2</h1><ul>
<li>不可能所有物体都用三角面表示，一些复杂的物体如毛发、水滴等用三角面表示开销极大；</li>
</ul>
<h2 id="a-几何的表示形式"><a href="#a-几何的表示形式" class="headerlink" title="a). 几何的表示形式"></a>a). 几何的表示形式</h2><ul>
<li>隐式（Implicit）<ul>
<li>algebraic surface</li>
<li>level sets</li>
<li>distance functions</li>
<li>…</li>
</ul>
</li>
<li>显式（Explicit）<ul>
<li>point cloud</li>
<li>polygon mesh</li>
<li>subdivision, NURBS</li>
<li>…</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="b-几何的隐式表示（Implict-Representations-of-Geometry）"><a href="#b-几何的隐式表示（Implict-Representations-of-Geometry）" class="headerlink" title="b). 几何的隐式表示（Implict Representations of Geometry）"></a>b). 几何的隐式表示（Implict Representations of Geometry）</h2><ul>
<li><strong>基于归类的点</strong><ul>
<li>点满足某种特定的关系，但不给你特定的点<ul>
<li>e.g. <strong>Sphere:</strong> 所有三维中的点，满足 $x^2+y^2+z^2=1$；</li>
</ul>
</li>
<li><strong>通用情况：</strong>$f(x,y,z)=0$<img src="/2022/10/02/Games101_10_12_Geometry/Geo_Implicit.png" alt="Geo_Implicit"></li>
</ul>
</li>
<li><strong>缺点：</strong><ul>
<li>难以采样（Sampling Can Be Hard，难以得到式子表示的整体形状）<img src="/2022/10/02/Games101_10_12_Geometry/Implicit_B.png" alt="Implicit_B"></li>
</ul>
</li>
<li><strong>优点：</strong><ul>
<li>方便判断点是否在几何体内（Inside/Outside Tests Easy）<img src="/2022/10/02/Games101_10_12_Geometry/Implicit_G.png" alt="Implicit_G"></li>
</ul>
</li>
</ul>
<h3 id="b-1-Algebraic-Surfaces（曲面代数）"><a href="#b-1-Algebraic-Surfaces（曲面代数）" class="headerlink" title="b.1). Algebraic Surfaces（曲面代数）"></a>b.1). Algebraic Surfaces（曲面代数）</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/AlgebraicSurfaces.png" alt="AlgebraicSurfaces"></p>
<ul>
<li>难以表达复杂的形状；</li>
</ul>
<h3 id="b-2-Constructive-Solid-Geometry（CSG-体素构造表示形式）"><a href="#b-2-Constructive-Solid-Geometry（CSG-体素构造表示形式）" class="headerlink" title="b.2). Constructive Solid Geometry（CSG, 体素构造表示形式）"></a>b.2). Constructive Solid Geometry（CSG, 体素构造表示形式）</h3><ul>
<li>对隐式几何体进行布尔运算；<img src="/2022/10/02/Games101_10_12_Geometry/CSG.png" alt="CSG"></li>
</ul>
<h3 id="b-3-Distance-Function（距离函数）"><a href="#b-3-Distance-Function（距离函数）" class="headerlink" title="b.3). Distance Function（距离函数）"></a>b.3). Distance Function（距离函数）</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/DistanceFunctions.png" alt="DistanceFunctions"></p>
<ul>
<li><strong>给出各个点到物体的最小距离</strong></li>
</ul>
<ul>
<li><strong>Blending Distance Function:</strong><img src="/2022/10/02/Games101_10_12_Geometry/BlendingDF.png" alt="BlendingDF"><ul>
<li><strong>目的：</strong>通过混合得到A、B运动的中间状态；<ul>
<li>上半部分，blend之后中间1/3是灰的，而理想的结果是<strong>左边1/2是黑色，右边1/2是白色</strong></li>
<li>下半部分，对<strong>SDF</strong>进行混合，再将blend后的结果恢复成shape（找到SDF等于0的情况的所有点），就可得到中间状态的物体；<img src="/2022/10/02/Games101_10_12_Geometry/BlendingSDF.png" alt="BlendingSDF"></li>
</ul>
</li>
</ul>
</li>
<li><em>See <a href="https://iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm">https://iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm</a></em></li>
</ul>
<h3 id="b-4-Level-Set-Methods（水平集）"><a href="#b-4-Level-Set-Methods（水平集）" class="headerlink" title="b.4). Level Set Methods（水平集）"></a>b.4). Level Set Methods（水平集）</h3><ul>
<li><p>封闭方程（DF）很难描述复杂的形状</p>
</li>
<li><p><strong>备选方案：</strong>存储近似函数值的网格（Level Set Methods）<img src="/2022/10/02/Games101_10_12_Geometry/LSM.png" alt="LSM"></p>
<ul>
<li>通过找到插值为0的位置确定表面；</li>
<li><font color="red">提供对形状更明确的控制（如纹理）?</font>
</li>
</ul>
</li>
<li><p><strong>应用：</strong></p>
<ul>
<li><p><strong>Level Sets from Medical Data (CT, MRI, etc. 三维LSM)</strong><img src="/2022/10/02/Games101_10_12_Geometry/LSMin3D.png" alt="LSMin3D"></p>
</li>
<li><p><strong>物理模拟：</strong>如水平集得到各点到液体边界的距离（距离函数混合水滴）<img src="/2022/10/02/Games101_10_12_Geometry/LSMsimulation.png" alt="LSMsimulation"></p>
<ul>
<li><em>See <a href="http://physbam.stanford.edu">http://physbam.stanford.edu</a></em></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b-5-Fractals-分形"><a href="#b-5-Fractals-分形" class="headerlink" title="b.5). Fractals(分形)"></a>b.5). Fractals(分形)</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/Fractals.png" alt="Fractals"></p>
<h2 id="c-几何的显式表示（“Explicit”-Representations-of-Geometry）"><a href="#c-几何的显式表示（“Explicit”-Representations-of-Geometry）" class="headerlink" title="c). 几何的显式表示（“Explicit” Representations of Geometry）"></a>c). 几何的显式表示（“Explicit” Representations of Geometry）</h2><ul>
<li><p><strong>简介：</strong> <strong>直接给出</strong>所有的点 或者 <strong>通过参数映射（via parameter mapping）</strong></p>
<ul>
<li><strong>参数映射：</strong>给出uv，以及uv到三维空间的映射关系，遍历所有的uv就可找到三维空间所有的点；<img src="/2022/10/02/Games101_10_12_Geometry/Explicit_via_param_mapping.png" alt="Explicit_via_param_mapping"></li>
</ul>
</li>
<li><p><strong>采样简单</strong><img src="/2022/10/02/Games101_10_12_Geometry/Explicit_G.png" alt="Explicit_G"></p>
</li>
</ul>
<ul>
<li><p><strong>不方便</strong>判断点是否在几何体内（Inside/Outside Tests Hard）<img src="/2022/10/02/Games101_10_12_Geometry/Explicit_B.png" alt="Explicit_B"></p>
</li>
<li><p><strong>隐式、显式各有优缺点，需要根据需求选择最优的表达方式</strong></p>
</li>
</ul>
<h3 id="c-1-Point-Cloud"><a href="#c-1-Point-Cloud" class="headerlink" title="c.1). Point Cloud"></a>c.1). Point Cloud</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/PointCloud.png" alt="PointCloud"></p>
<h3 id="c-2-Polygon-Mesh"><a href="#c-2-Polygon-Mesh" class="headerlink" title="c.2). Polygon Mesh"></a>c.2). Polygon Mesh</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/PolygonMesh.png" alt="PolygonMesh"></p>
<ul>
<li>常用的PolygonMesh文件，Wavefront Object File (<strong>.obj</strong>)<ul>
<li>v：顶点位置；vt：纹理位置；vn：normal；f：face，顶点索引/纹理索引/法线索引</li>
<li><img src="/2022/10/02/Games101_10_12_Geometry/PolygonMesh_Obj.png" alt="PolygonMesh_Obj"></li>
</ul>
</li>
</ul>
<h3 id="c-3-Bezier-Curve（贝塞尔曲线）"><a href="#c-3-Bezier-Curve（贝塞尔曲线）" class="headerlink" title="c.3). Bézier Curve（贝塞尔曲线）"></a>c.3). Bézier Curve（贝塞尔曲线）</h3><ul>
<li>通过点$p_0$ 、$p_1$，且在这两点切线为$t0$、$t1$（切线前带系数，对于三次贝塞尔曲线系数为3）<img src="/2022/10/02/Games101_10_12_Geometry/Bezier_DT.png" alt="Bezier_DT"></li>
</ul>
<h4 id="c-3-1-计算贝塞尔曲线-德卡斯特里奥算法-De-Casteljau’s-Algorithm"><a href="#c-3-1-计算贝塞尔曲线-德卡斯特里奥算法-De-Casteljau’s-Algorithm" class="headerlink" title="c.3.1). 计算贝塞尔曲线(德卡斯特里奥算法, De Casteljau’s Algorithm)"></a>c.3.1). 计算贝塞尔曲线(德卡斯特里奥算法, De Casteljau’s Algorithm)</h4><ul>
<li><strong>二次贝塞尔曲线</strong></li>
</ul>
<p><img src="/2022/10/02/Games101_10_12_Geometry/德卡斯特里奥算法.png" alt="德卡斯特里奥算法"></p>
<ul>
<li><p><strong>三次贝塞尔曲线（Cubic Bezier Curve）</strong><img src="/2022/10/02/Games101_10_12_Geometry/CubicBezierCurve.png" alt="CubicBezierCurve"></p>
</li>
<li><p>Anim：<img src="/2022/10/02/Games101_10_12_Geometry/Bezier2.gif" alt="Bezier2"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/Bezier3.gif" alt="Bezier3"></p>
</li>
</ul>
<h4 id="c-3-2-代数形式"><a href="#c-3-2-代数形式" class="headerlink" title="c.3.2). 代数形式"></a>c.3.2). 代数形式</h4><p><img src="/2022/10/02/Games101_10_12_Geometry/Bezier_Algebraic.png" alt="Bezier_Algebraic"></p>
<ul>
<li>推出<strong>Bernstein polynomial（伯恩斯坦多项式）</strong>：</li>
</ul>
<script type="math/tex; mode=display">
B_{i}^{n}(t)=C_n^i · t^{i}(1-t)^{n-i}</script><ul>
<li><img src="/2022/10/02/Games101_10_12_Geometry/Bernstein.png" alt="Bernstein"></li>
<li><img src="/2022/10/02/Games101_10_12_Geometry/Bernstein2.png" alt="Bernstein2"></li>
</ul>
<h4 id="C-3-3-性质"><a href="#C-3-3-性质" class="headerlink" title="C.3.3). 性质"></a>C.3.3). 性质</h4><p><img src="/2022/10/02/Games101_10_12_Geometry/Properties_Bezier.png" alt="Properties_Bezier"></p>
<ul>
<li>即（对于三次贝塞尔曲线）：<ul>
<li>$b_0$ 是起点，$b_3$是终点；</li>
<li>切线为$\mathbf{b}^{\prime}(0)=3\left(\mathbf{b}_{1}-\mathbf{b}_{0}\right) ; \quad \mathbf{b}^{\prime}(1)=3\left(\mathbf{b}_{3}-\mathbf{b}_{2}\right)$ （切线前带系数，对于三次贝塞尔曲线系数为3，通过求导可得）</li>
<li>仿射不变性（对于贝塞尔曲线做仿射变换，只需要对控制点进行变换）</li>
<li>凸包性质；</li>
</ul>
</li>
</ul>
<h4 id="c-3-4-Piecewise-Bezier-Curves（分段贝塞尔曲线）"><a href="#c-3-4-Piecewise-Bezier-Curves（分段贝塞尔曲线）" class="headerlink" title="c.3.4). Piecewise Bézier Curves（分段贝塞尔曲线）"></a>c.3.4). Piecewise Bézier Curves（分段贝塞尔曲线）</h4><ul>
<li>使用原因：解决高阶贝塞尔曲线控制点过多的问题；</li>
<li>分段贝塞尔曲线，常是<strong>分段立方贝塞尔（Piecewise cubic Bézier）</strong>，即每一个曲线存在4个控制点；<img src="/2022/10/02/Games101_10_12_Geometry/Piecewise_cubic_Bezier.png" alt="Piecewise_cubic_Bezier"></li>
</ul>
<h5 id="c-3-4-1-连续性"><a href="#c-3-4-1-连续性" class="headerlink" title="c.3.4.1). 连续性"></a>c.3.4.1). 连续性</h5><p><img src="/2022/10/02/Games101_10_12_Geometry/Continuity.png" alt="Continuity"></p>
<ul>
<li><p>C<sup>0</sup> 连续（C表示Continuity），几何连续：$a_n=b_0$ ；</p>
<ul>
<li>首尾相接，夹角任意；<img src="/2022/10/02/Games101_10_12_Geometry/C0.png" alt="C0"></li>
</ul>
</li>
<li><p>C<sup>1</sup> 连续，参数连续：$a_n=b_0={1\over2}(a_{n-1} + b_1)$ ；</p>
<ul>
<li>切线相等，即一阶导数连续；<img src="/2022/10/02/Games101_10_12_Geometry/C1.png" alt="C1"></li>
</ul>
</li>
</ul>
<h4 id="3-5-Other-types-of-splines-待深入"><a href="#3-5-Other-types-of-splines-待深入" class="headerlink" title="3.5). Other types of splines(待深入)"></a>3.5). Other types of splines(待深入)</h4><p><img src="/2022/10/02/Games101_10_12_Geometry/Spline.png" alt="Spline"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/B_splines.png" alt="B_splines"></p>
<ul>
<li>In this course <ul>
<li>We do not cover B-splines and NURBS</li>
<li>We also do not cover operations on curves (e.g. increasing/decreasing orders, etc.)</li>
<li>To learn more / deeper, you are welcome to refer to Prof. Shi-Min Hu’s course: <a href="https://www.bilibili.com/video/av66548502?from=search&amp;seid=65256805876131485">https://www.bilibili.com/video/av66548502?from=search&amp;seid=65256805876131485</a></li>
</ul>
</li>
</ul>
<h4 id="3-6-Bezier-Surface"><a href="#3-6-Bezier-Surface" class="headerlink" title="3.6). Bezier Surface"></a>3.6). Bezier Surface</h4><p><img src="/2022/10/02/Games101_10_12_Geometry/BezierSurface.png" alt="BezierSurface"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/BezierSurface_vis.png" alt="BezierSurface_vis"></p>
<ul>
<li>Animation: Steven Wittens, Making Things with Maths, <a href="http://acko.net">http://acko.net</a></li>
</ul>
<h5 id="3-6-1-Evaluating-Bezier-Surfaces"><a href="#3-6-1-Evaluating-Bezier-Surfaces" class="headerlink" title="3.6.1). Evaluating Bézier Surfaces"></a>3.6.1). Evaluating Bézier Surfaces</h5><p><img src="/2022/10/02/Games101_10_12_Geometry/Eva_BezierSurface.png" alt="Eva_BezierSurface"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/BezierSurface_method1.png" alt="BezierSurface_method1"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/BezierSurface_method2.png" alt="BezierSurface_method2"></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/MeshOperations.png" alt="MeshOperations"></p>
<h1 id="Lecture-13-Geometry"><a href="#Lecture-13-Geometry" class="headerlink" title="Lecture 13 Geometry"></a>Lecture 13 Geometry</h1><h2 id="a-Subdivision"><a href="#a-Subdivision" class="headerlink" title="a). Subdivision"></a>a). Subdivision</h2><p><img src="/2022/10/02/Games101_10_12_Geometry/Subdivision.png" alt="Subdivision"></p>
<ul>
<li>以下是几种常用的细分方法:</li>
</ul>
<h3 id="a-1-Loop-Subdivision-Loop是人名"><a href="#a-1-Loop-Subdivision-Loop是人名" class="headerlink" title="a.1). Loop Subdivision(Loop是人名)"></a>a.1). Loop Subdivision(Loop是人名)</h3><ul>
<li><strong>细分对象：<font color="red">三角面</font></strong><ul>
<li>首先，创造更多的三角面；</li>
<li>第二，改变他们的位置；<img src="/2022/10/02/Games101_10_12_Geometry/LoopSub.png" alt="LoopSub"></li>
</ul>
</li>
</ul>
<ul>
<li><strong>具体做法：</strong><ul>
<li>将每个三角形细分为四个；<img src="/2022/10/02/Games101_10_12_Geometry/SplitTriangle.png" alt="SplitTriangle"></li>
<li>根据权重分配新的顶点位置；<ul>
<li>区分新/老顶点，做不同变换；</li>
</ul>
</li>
<li>对于<strong>新顶点</strong>：<ul>
<li>$P_{new} = {3\over8}(A+B)+{1\over8}(C+D)$<img src="/2022/10/02/Games101_10_12_Geometry/LoopSub_NewVert.png" alt="LoopSub_NewVert"></li>
</ul>
</li>
<li>对于<strong>老顶点</strong>：<ul>
<li>$n:$ 顶点的度（图论，与该顶点关联的边的数目，该处即为<strong>与该顶点连接的边的数量</strong>）</li>
<li>$u:$ $3/16$（如果$n=3$），$3/(8n)$ （其他情况）</li>
<li>$P_{new} = (1-nu)original_position + u·neighbor_position_sum$</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Loop Subdivision Results：</strong><img src="/2022/10/02/Games101_10_12_Geometry/LoopSub_Result.png" alt="LoopSub_Result"></p>
</li>
<li><p><strong>缺点：Loop只能处理三角面</strong>；</p>
</li>
</ul>
<h3 id="a-2-Catmull-Clark-Subdivision"><a href="#a-2-Catmull-Clark-Subdivision" class="headerlink" title="a.2). Catmull-Clark Subdivision"></a>a.2). Catmull-Clark Subdivision</h3><p><img src="/2022/10/02/Games101_10_12_Geometry/Catmull_Clark_Sub.png" alt="Catmull_Clark_Sub"></p>
<ul>
<li><p><strong>概念：</strong></p>
<ul>
<li>奇异点（Extraorinary vertex）：度不为4的点；</li>
</ul>
</li>
<li><p><strong>具体过程：</strong></p>
<ul>
<li><p><strong>第一次细分：</strong></p>
<ol>
<li>每条边取中点，每个面也取其中一点；<img src="/2022/10/02/Games101_10_12_Geometry/Catmull_Clark_Sub_01.png" alt="Catmull_Clark_Sub_01"></li>
</ol>
<ul>
<li>第一次细分后，<strong>引入（n个，n=非四边形数目）奇异点，非四边形面消失</strong>。之后，奇异点不在增加，因此，之后细分只针对四边面；<img src="/2022/10/02/Games101_10_12_Geometry/Catmull_Clark_Sub_02.png" alt="Catmull_Clark_Sub_02"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Catmull-Clark Vertex Update Rules (Quad Mesh)</strong></p>
<p><img src="/2022/10/02/Games101_10_12_Geometry/Catmull_Clark_Sub_UpdateRules.png" alt="Catmull_Clark_Sub_UpdateRules"></p>
<ul>
<li><strong>Face point:</strong> </li>
</ul>
<p>$$<br>f=</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101-7-9 Shading</title>
    <url>/2022/10/02/Games101_07_09_Shading/</url>
    <content><![CDATA[<h1 id="Lecture-07-08-Shading-Illumination-Shading-and-Graphics-Pipeline"><a href="#Lecture-07-08-Shading-Illumination-Shading-and-Graphics-Pipeline" class="headerlink" title="Lecture 07/08 Shading(Illumination, Shading and Graphics Pipeline)"></a>Lecture 07/08 Shading(Illumination, Shading and Graphics Pipeline)</h1><h2 id="a-Definition"><a href="#a-Definition" class="headerlink" title="a). Definition"></a>a). Definition</h2><p><img src="/2022/10/02/Games101_07_09_Shading/Shading_Definition.png" alt="Shading_Definition"></p>
<h2 id="b-A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#b-A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="b). A Simple Shading Model(Blinn-Phong Reflectance Model)"></a>b). A Simple Shading Model(Blinn-Phong Reflectance Model)</h2><h3 id="b-1-Fundamental"><a href="#b-1-Fundamental" class="headerlink" title="b.1). Fundamental"></a>b.1). Fundamental</h3><ul>
<li><p>Blinn-Phong是一个<strong>经验模型</strong>，并不是严格基于物理的；</p>
</li>
<li><p><strong>进入视线内的光照一般有以下构成：</strong></p>
<ul>
<li>高光（Specualr）</li>
<li>漫反射（Diffuse）</li>
<li>环境光（Ambient）</li>
<li>自发光（Emissive）</li>
</ul>
</li>
<li><p><strong>Shading is Local: </strong>Compute light reflected toward camera at a <font color="red"><strong>specific shading point</strong></font><img src="/2022/10/02/Games101_07_09_Shading/ShadingInput.png" alt="ShadingInput"></p>
<ul>
<li><p>No shadows will be generated! <strong>(shading ≠ shadow)</strong> </p>
<ul>
<li>阴影会由另外的Shadow Caster来着色；</li>
</ul>
<p><img src="/2022/10/02/Games101_07_09_Shading/NoShadow.png" alt="NoShadow"></p>
</li>
</ul>
</li>
</ul>
<h3 id="b-2-Diffuse-Reflection"><a href="#b-2-Diffuse-Reflection" class="headerlink" title="b.2). Diffuse Reflection"></a>b.2). Diffuse Reflection</h3><ul>
<li>Blinn-Phong中，漫反射的光均匀散射到各个方向；<img src="/2022/10/02/Games101_07_09_Shading/Blinn-Phong_Diffuse.png" alt="Blinn-Phong_Diffuse"></li>
<li><p><strong>Lambert’s cosine law</strong>：接收到的能量与 $l·n$ 成正比例<img src="/2022/10/02/Games101_07_09_Shading/Lambert_cos_law.png" alt="Lambert_cos_law"></p>
</li>
<li><p><strong>Light Falloff</strong><img src="/2022/10/02/Games101_07_09_Shading/LightFalloff.png" alt="LightFalloff"></p>
</li>
<li><p><strong>漫反射最终的着色：</strong><img src="/2022/10/02/Games101_07_09_Shading/LambertDiffuseShading.png" alt="LambertDiffuseShading"><img src="/2022/10/02/Games101_07_09_Shading/Diffuse_kd.png" alt="Diffuse_kd"></p>
</li>
</ul>
<h3 id="b-3-Specular-Term-Blinn-Phong"><a href="#b-3-Specular-Term-Blinn-Phong" class="headerlink" title="b.3). Specular Term(Blinn-Phong)"></a>b.3). Specular Term(Blinn-Phong)</h3><ul>
<li><p>Intensity <strong>depends</strong> on view direction</p>
<p><img src="/2022/10/02/Games101_07_09_Shading/Specular.png" alt="Specular" style="zoom: 33%;"></p>
</li>
<li><p><img src="/2022/10/02/Games101_07_09_Shading/Blinn-Phong_Half_vector.png" alt="Blinn-Phong_Half_vector"></p>
<ul>
<li>采用半程向量简化计算。采用半程向量$h$与$n$点乘的是Blinn-Phong模型，而采用镜面反射方向$r$和视线方向$v$点乘的是Phong模型；</li>
<li><strong>指数$p$的作用：</strong>Increasing p narrows the reflection lobe<img src="/2022/10/02/Games101_07_09_Shading/Specular_Power.png" alt="Specular_Power"></li>
<li>效果总览：<img src="/2022/10/02/Games101_07_09_Shading/Specular_Term.png" alt="Specular_Term"></li>
</ul>
</li>
</ul>
<h3 id="b-4-Ambient-Term"><a href="#b-4-Ambient-Term" class="headerlink" title="b.4). Ambient Term"></a>b.4). Ambient Term</h3><p><img src="/2022/10/02/Games101_07_09_Shading/AmbientTerm.png" alt="AmbientTerm"></p>
<p><img src="/2022/10/02/Games101_07_09_Shading/Blinn-Phong.png" alt="Blinn-Phong"></p>
<span id="more"></span>
<h2 id="c-Shading-Frequencies"><a href="#c-Shading-Frequencies" class="headerlink" title="c). Shading Frequencies"></a>c). Shading Frequencies</h2><h3 id="c-1-Flat-shading"><a href="#c-1-Flat-shading" class="headerlink" title="c.1). Flat shading"></a>c.1). Flat shading<img src="/2022/10/02/Games101_07_09_Shading/FlatShading.png" alt="FlatShading"></h3><h3 id="c-2-Gouraud-shading"><a href="#c-2-Gouraud-shading" class="headerlink" title="c.2). Gouraud shading "></a>c.2). Gouraud shading <img src="/2022/10/02/Games101_07_09_Shading/GouraudShading.png" alt="GouraudShading"></h3><h3 id="c-3-Phong-shading"><a href="#c-3-Phong-shading" class="headerlink" title="c.3). Phong shading"></a>c.3). Phong shading<img src="/2022/10/02/Games101_07_09_Shading/PhongShading.png" alt="PhongShading"></h3><h3 id="c-4-对比"><a href="#c-4-对比" class="headerlink" title="c.4). 对比"></a>c.4). 对比</h3><p><img src="/2022/10/02/Games101_07_09_Shading/ShadingFreq.png" alt="ShadingFreq"></p>
<ul>
<li>不一定Phong着色就比Flat优秀。在极高面数的一些情况下，Flat Shading性能开销比Phong Shading小，且呈现效果相差无几；</li>
</ul>
<h3 id="c-5-定义顶点-像素法线"><a href="#c-5-定义顶点-像素法线" class="headerlink" title="c.5). 定义顶点/像素法线"></a>c.5). 定义顶点/像素法线</h3><ul>
<li><p><strong><font color="red">顶点法线</font>为相邻三角形的加权平均</strong>（<strong>权重与三角面的面积有关</strong>，当然也可简单平均，但效果较加权平均差）；<img src="/2022/10/02/Games101_07_09_Shading/VectorsNormal.png" alt="VectorsNormal"></p>
</li>
<li><p><strong><font color="red">逐像素的法线</font>通过对顶点法线进行<font color="red">重心插值（Barycentric interpolation）</font>后归一化（normalize）得到；</strong><img src="/2022/10/02/Games101_07_09_Shading/PixelNormal.png" alt="PixelNormal"></p>
</li>
</ul>
<h2 id="d-Graphics-Real-time-Rendering-Pipeline"><a href="#d-Graphics-Real-time-Rendering-Pipeline" class="headerlink" title="d). Graphics(Real-time Rendering) Pipeline"></a>d). Graphics(Real-time Rendering) Pipeline</h2><ul>
<li>这段可看冯的入门精要作为简单的补充</li>
</ul>
<p><img src="/2022/10/02/Games101_07_09_Shading/GraphicsPipeline.png" alt="GraphicsPipeline"></p>
<ul>
<li><p>MVP矩阵相关的发生在顶点阶段；<img src="/2022/10/02/Games101_07_09_Shading/PipelineVertex.png" alt="PipelineVertex"></p>
</li>
<li><p>光栅化；<img src="/2022/10/02/Games101_07_09_Shading/Rasterization_in_pp.png" alt="Rasterization_in_pp"></p>
</li>
<li><p><img src="/2022/10/02/Games101_07_09_Shading/Frag.png" alt="Frag"></p>
</li>
<li><p>Shading可在Vertex Processing阶段，也可在Fragment Processing阶段；<img src="/2022/10/02/Games101_07_09_Shading/Shading_in_PP.png" alt="Shading_in_PP"></p>
</li>
<li><p>Texture mapping<img src="/2022/10/02/Games101_07_09_Shading/TexMapping.png" alt="TexMapping"></p>
</li>
<li><p>Shader：<img src="/2022/10/02/Games101_07_09_Shading/ShaderEX.png" alt="ShaderEX"></p>
</li>
<li><p>优秀Shader（到时候好好学习一下）<img src="/2022/10/02/Games101_07_09_Shading/Example.png" alt="Example"></p>
<ul>
<li>Inigo Quilez, <a href="https://youtu.be/XuSnLbB1j6E">https://youtu.be/XuSnLbB1j6E</a></li>
</ul>
</li>
</ul>
<h1 id="Lecture-08-09-Shading-Texture-Mapping"><a href="#Lecture-08-09-Shading-Texture-Mapping" class="headerlink" title="Lecture 08/09 Shading(Texture Mapping)"></a>Lecture 08/09 Shading(Texture Mapping)</h1><ul>
<li>可见 <a href="..\..\百人计划\图形\01\Note.md">百人计划-图形1.3-纹理的秘密</a> 作为补充；</li>
</ul>
<h2 id="a-Interpolation-Across-Triangles-Barycentric-Coordinates"><a href="#a-Interpolation-Across-Triangles-Barycentric-Coordinates" class="headerlink" title="a). Interpolation Across Triangles: Barycentric Coordinates"></a>a). Interpolation Across Triangles: Barycentric Coordinates</h2><ul>
<li><p><strong>重心插值的作用：</strong>通过<strong>顶点</strong>特定的值（normal、Color、Depth、Texture coordinates…），得到三角形内部<strong>片元（像素）</strong>上平滑过渡的值；</p>
</li>
<li><p><strong>数学基础：</strong></p>
<ul>
<li>共面需满足的条件：<ul>
<li>$α+β+γ=1$，如需要点在三角形内，还需满足$α&gt;0,β&gt;0,γ&gt;0$<img src="/2022/10/02/Games101_07_09_Shading/Barycentiric_inMath.png" alt="Barycentiric_inMath"></li>
</ul>
</li>
<li>重心坐标求法：<img src="/2022/10/02/Games101_07_09_Shading/Barycentiric_inMath02.png" alt="Barycentiric_inMath02"></li>
<li>由以上易得，重心坐标$\begin{aligned}(x, y) &amp;=\frac{1}{3} A+\frac{1}{3}B+\frac{1}{3} C\end{aligned}$<img src="/2022/10/02/Games101_07_09_Shading/Barycentiric_inMath03.png" alt="Barycentiric_inMath03"></li>
<li>通用计算公式：<img src="/2022/10/02/Games101_07_09_Shading/Barycentiric_inMath04.png" alt="Barycentiric_inMath04"></li>
<li><strong>Final：</strong><img src="/2022/10/02/Games101_07_09_Shading/Barycentiric_inMath05.png" alt="Barycentiric_inMath05"><ul>
<li><strong><font color="red">注意：</font></strong>重心并没有投影不变性，因此进行插值需要在三维空间中进行，而不是在屏幕的二维投影上；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="b-Texture-Magnification-需要放大纹理的情况"><a href="#b-Texture-Magnification-需要放大纹理的情况" class="headerlink" title="b). Texture Magnification(需要放大纹理的情况)"></a>b). Texture Magnification(需要放大纹理的情况)</h2><ul>
<li>对应情况：纹理过小（如距离物体近，而贴图小）</li>
<li><strong>插值方式：</strong><ul>
<li>Nearest</li>
<li>Bilinear</li>
<li>Bicubic</li>
</ul>
</li>
</ul>
<h3 id="b-1-Bilinear-Interpolation"><a href="#b-1-Bilinear-Interpolation" class="headerlink" title="b.1). Bilinear Interpolation"></a>b.1). Bilinear Interpolation</h3><p><img src="/2022/10/02/Games101_07_09_Shading/BilinearInterpolation.png" alt="BilinearInterpolation"></p>
<h2 id="c-Texture-Magnification-需要缩小纹理的情况"><a href="#c-Texture-Magnification-需要缩小纹理的情况" class="headerlink" title="c).  Texture Magnification(需要缩小纹理的情况)"></a>c).  Texture Magnification(需要缩小纹理的情况)</h2><ul>
<li><p>对应情况：纹理过大（如距离物体远，而贴图大）<img src="/2022/10/02/Games101_07_09_Shading/TexturePS.png" alt="TexturePS"><img src="/2022/10/02/Games101_07_09_Shading/TexturePS02.png" alt="TexturePS02"></p>
</li>
<li><p><strong>解决思路：</strong></p>
<ul>
<li>增大采样率（超采样）<ul>
<li>高质量，但性能开销大；</li>
</ul>
</li>
<li>减小贴图频率（<strong>Mipmap</strong>）</li>
</ul>
</li>
</ul>
<h3 id="c-1-Mipmap"><a href="#c-1-Mipmap" class="headerlink" title="c.1). Mipmap"></a>c.1). Mipmap</h3><p>  <img src="/2022/10/02/Games101_07_09_Shading/Mipmap.png" alt="Mipmap"><img src="/2022/10/02/Games101_07_09_Shading/Mipmap02.png" alt="Mipmap02"></p>
<h3 id="c-1-如何确定Mipmap的level（参考百人计划）："><a href="#c-1-如何确定Mipmap的level（参考百人计划）：" class="headerlink" title="c.1). 如何确定Mipmap的level（参考百人计划）："></a>c.1). 如何确定Mipmap的level（参考百人计划）：<img src="/2022/10/02/Games101_07_09_Shading/mipmap_level.png" alt="mipmap_level"><img src="/2022/10/02/Games101_07_09_Shading/mipmap_level02.png" alt="mipmap_level02"></h3><h3 id="c-2-Mipmap之间的过渡"><a href="#c-2-Mipmap之间的过渡" class="headerlink" title="c.2). Mipmap之间的过渡"></a>c.2). Mipmap之间的过渡</h3><ul>
<li><p>Visualization of Mipmap Level(D rounded to nearest integer level)：<img src="/2022/10/02/Games101_07_09_Shading/Visualization_of_MipmapLevel.png" alt="Visualization_of_MipmapLevel"></p>
</li>
<li><p><strong><font color="red">Trilinear Interpolation</font></strong></p>
<ul>
<li><strong>作法：</strong>对相邻两层的Mipmap做Bilinear Interpolation，根据所得的level，对相邻两层进过插值的结果再进行一次插值；（e.g. D=1.6，则对一层和二层分别进行双线性插值后，再进行$lerp(1.6-1, n_1, n_2)$）<img src="/2022/10/02/Games101_07_09_Shading/TrilinearInterpolation.png" alt="TrilinearInterpolation"></li>
<li>Final：<img src="/2022/10/02/Games101_07_09_Shading/Visualization_of_MipmapLevel02.png" alt="Visualization_of_MipmapLevel02"></li>
</ul>
</li>
</ul>
<h2 id="d-Applications-of-Textures"><a href="#d-Applications-of-Textures" class="headerlink" title="d). Applications of Textures"></a>d). Applications of Textures</h2><h3 id="d-1-Environment-Map"><a href="#d-1-Environment-Map" class="headerlink" title="d.1). Environment Map"></a>d.1). Environment Map</h3><ul>
<li><strong>简介：</strong><img src="/2022/10/02/Games101_07_09_Shading/EnvironmentMap.png" alt="EnvironmentMap"><ul>
<li>对于环境光源，我们认为它来自与无限远处，<strong>即没有深度意义，不同位置的同一方向受到的环境光源相同</strong>（当然，暂不考虑遮挡）</li>
</ul>
</li>
<li><strong>Spherical Environment Map：</strong><img src="/2022/10/02/Games101_07_09_Shading/SphericalEnvironmentMap.png" alt="SphericalEnvironmentMap"><ul>
<li><strong>Problem：</strong>不是均匀的描述，在极点会存在较大的扭曲；<img src="/2022/10/02/Games101_07_09_Shading/SphericalMap_Problem.png" alt="SphericalMap_Problem"></li>
</ul>
</li>
</ul>
<ul>
<li><strong>CubeMap：</strong><img src="/2022/10/02/Games101_07_09_Shading/CubeMap00.png" alt="CubeMap00"><img src="/2022/10/02/Games101_07_09_Shading/CubeMap.png" alt="CubeMap"></li>
</ul>
<h3 id="d-2-Bump-Mapping"><a href="#d-2-Bump-Mapping" class="headerlink" title="d.2). Bump Mapping"></a>d.2). Bump Mapping</h3><p><img src="/2022/10/02/Games101_07_09_Shading/BumpMap01.png" alt="BumpMap01"></p>
<p><img src="/2022/10/02/Games101_07_09_Shading/BumpMap02.png" alt="BumpMap02"></p>
<ul>
<li><p><strong>凹凸贴图（视差贴图/法线贴图）计算法线过程：</strong></p>
<ul>
<li><p><strong>思路（一维情况，in flatland）：</strong></p>
<ul>
<li>原始法线 $n(p)=(0,1)$</li>
<li>在 p 点的导数 $dp=c·[h(p+1)-h(p)]$ （$c$ 是常数，用于缩放导数，改变其影响程度），得出切线</li>
<li>计算法线（垂直于切线） $n(p)=(-dp,1).normalized()$；</li>
</ul>
<p><img src="/2022/10/02/Games101_07_09_Shading/perturbNormal.png" alt="perturbNormal"></p>
</li>
<li><p><strong>思路（in 3D）：</strong></p>
<ul>
<li>原始法线 $n(p)=(0,0,1)$；</li>
<li>纹理上的点对 $u$ 方向和 $v$ 方向求偏导，得出切线<ul>
<li>$dp/du=c1·[h(u+1)-h(u)]$</li>
<li>$dp/dv=c2·[h(v+1)-h(v)]$</li>
</ul>
</li>
<li>计算法线（垂直于切线） $n(p)=(-dp/du,-dp/dv,1).normalized()$；</li>
</ul>
</li>
<li><p>以上计算均在<strong>切线空间、局部空间</strong>计算（具体看冯-入门精要）</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Displacement mapping（置换/高度贴图）:</strong></p>
<ul>
<li>需要足够多的三角面（DX中的Dynamic Tessellation，动态曲面细分）</li>
<li>真正地<strong>移动了顶点</strong></li>
</ul>
<p><img src="/2022/10/02/Games101_07_09_Shading/Bump_vs_Displacement.png" alt="Bump_vs_Displacement"></p>
</li>
</ul>
<h3 id="d-3-3D-Procedural-Noise-Solid-Modeling"><a href="#d-3-3D-Procedural-Noise-Solid-Modeling" class="headerlink" title="d.3). 3D Procedural Noise + Solid Modeling"></a>d.3). 3D Procedural Noise + Solid Modeling</h3><p><img src="/2022/10/02/Games101_07_09_Shading/3DProceduralNoise.png" alt="3DProceduralNoise"></p>
<ul>
<li>Perlin noise</li>
</ul>
<h3 id="d-4-Provide-Precomputed-Shading"><a href="#d-4-Provide-Precomputed-Shading" class="headerlink" title="d.4). Provide Precomputed Shading"></a>d.4). Provide Precomputed Shading</h3><p><img src="/2022/10/02/Games101_07_09_Shading/ProvidePrecomputedShading.png" alt="ProvidePrecomputedShading"></p>
<ul>
<li>使用Baking的AO等（也可记录其他信息，如SP中的ID、Position、Curvature等）；</li>
</ul>
<h3 id="d-5-3D-Textures-and-Volume-Rendering"><a href="#d-5-3D-Textures-and-Volume-Rendering" class="headerlink" title="d.5). 3D Textures and Volume Rendering"></a>d.5). 3D Textures and Volume Rendering</h3><ul>
<li>体渲染</li>
</ul>
<p><img src="/2022/10/02/Games101_07_09_Shading/3DTexturesAndVolumeRendering.png" alt="3DTexturesAndVolumeRendering"></p>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101-5-6 Rasterization</title>
    <url>/2022/10/02/Games101_05_06_Rasterization/</url>
    <content><![CDATA[<h1 id="Lecture-05-Rasterization-Triangles"><a href="#Lecture-05-Rasterization-Triangles" class="headerlink" title="Lecture 05 Rasterization(Triangles)"></a>Lecture 05 Rasterization(Triangles)</h1><h2 id="a-Perspective-Projection"><a href="#a-Perspective-Projection" class="headerlink" title="a). Perspective Projection"></a>a). Perspective Projection</h2><ul>
<li><p>如何定义一个<strong>frustum</strong>：</p>
<p><img src="/2022/10/02/Games101_05_06_Rasterization/Frustum.png" alt="Frustum"></p>
<ul>
<li>近平面宽度、高度（得到宽高比）</li>
<li>FOV(Field of View)</li>
</ul>
</li>
</ul>
<h2 id="b-Viewport-transformation"><a href="#b-Viewport-transformation" class="headerlink" title="b). Viewport transformation"></a>b). Viewport transformation</h2><ul>
<li><p>经过MVP后，模型空间中点变换到标准立方体（canonical cube, x,y,z[-1, 1]）中。之后就需要进行视口变换（Viewport transformation）</p>
</li>
<li><p><strong>定义屏幕空间</strong></p>
<p><img src="/2022/10/02/Games101_05_06_Rasterization/Difine_the_screen_space.png" alt="Difine_the_screen_space"></p>
<ul>
<li>OpenGL屏幕空间坐标原点为左下（上图），DX坐标原点为左上</li>
<li>像素位置该像素（方块）左下角的坐标，如左下角像素坐标为$(0, 0)$，但像素中心为$(0.5, 0.5)$</li>
</ul>
</li>
<li><p><strong>Viewport transformation</strong></p>
<p><img src="/2022/10/02/Games101_05_06_Rasterization/ScreenSpace_transformation.png" alt="ScreenSpace_transformation"></p>
</li>
</ul>
<h2 id="c-Rasterization"><a href="#c-Rasterization" class="headerlink" title="c). Rasterization"></a>c). Rasterization</h2><ul>
<li><p><strong>Frame Buffer</strong>: Memory for a Raster Display</p>
<ul>
<li><p>显存中的一块区域</p>
</li>
<li><p>补充：Render texture（详情见Other/Note）</p>
<ul>
<li><blockquote>
<p>以下以Unity为例：</p>
<p>渲染过程中，贴图最开始在CPU内存，这时的贴图被称为client-side的texture，最后被送到GPU，这时叫server-side的texture；</p>
<p>Render texture是将FrameBufferObject连接到一个server-side的texture；</p>
<ul>
<li>注意：FrameBufferObject不一定只有一个，也不一定连接屏幕；</li>
</ul>
<p>详情：<a href="http://t.csdn.cn/3JHqA">http://t.csdn.cn/3JHqA</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Triangles - Fundamental Shape Primitives</strong></p>
<ul>
<li>无法分割为其他多边形</li>
<li>保证是一个平面</li>
<li>容易区分内部和外部</li>
<li>内部插值方便</li>
<li><img src="/2022/10/02/Games101_05_06_Rasterization/Triangles.png" alt="Triangles"></li>
</ul>
</li>
<li><p><strong>Fundament：</strong> <em>What Pixel Values Approximate a Triangle?<img src="/2022/10/02/Games101_05_06_Rasterization/T2PV.png" alt="T2PV"></em></p>
<ul>
<li><p>Sampling（采样）：逐像素中心采样，判断像素是否在三角形内</p>
<ul>
<li><pre><code>for (int x = 0; x &lt; xmax; ++x)
 output[x] = f(x);
</code></pre></li>
<li><p><img src="/2022/10/02/Games101_05_06_Rasterization/if_PinT.png" alt="if_PinT"></p>
</li>
</ul>
</li>
<li><p><strong>判断$(x,y)$是否在三角形内：</strong>做三次叉乘，看正负符号是否相同，相同则在三角形内；</p>
</li>
<li><p>Edge Cases：要么不做处理，要么特殊处理（OpenGL，DX里规定落于左边和上边算三角形中的点，而落于右边和下边的不算<strong>“<em>Top</em>-<em>Left</em> <em>Rule</em>“</strong>）<img src="/2022/10/02/Games101_05_06_Rasterization/Top_left_rule.png" alt="Top_left_rule"></p>
</li>
</ul>
</li>
<li><p><strong>光栅化加速</strong></p>
<ul>
<li>光栅化中，对每一个像素都判断是否在三角形中性能浪费过大。因此，加入<strong>Bounding Box（包围盒）</strong>来限定需要进行判断的区域<img src="/2022/10/02/Games101_05_06_Rasterization/BoundingBox.png" alt="BoundingBox"></li>
<li>Incremental Triangle Traversal（找到三角形中每一行最左和最右的像素，但实际上没那么容易，是用于细长并旋转的三角形）<img src="/2022/10/02/Games101_05_06_Rasterization/Incremental_Triangle_Traversal.png" alt="Incremental_Triangle_Traversal"></li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Lecture-6-Rasterization-2-Antialiasing-and-Z-Buffering"><a href="#Lecture-6-Rasterization-2-Antialiasing-and-Z-Buffering" class="headerlink" title="Lecture 6: Rasterization 2(Antialiasing and Z-Buffering)"></a>Lecture 6: Rasterization 2(Antialiasing and Z-Buffering)</h1><h2 id="a-Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics"><a href="#a-Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics" class="headerlink" title="a). Sampling Artifacts(Errors / Mistakes / Inaccuracies) in Computer Graphics"></a>a). Sampling Artifacts(Errors / Mistakes / Inaccuracies) in Computer Graphics</h2><ul>
<li>由于采样造成的“Artifacts“<ul>
<li>锯齿（ <em>Jaggies</em>）——空间上采样</li>
<li>摩尔纹（<em>Moire</em>）——欠采样图像</li>
<li>车轮错觉（<em>Wagon wheel effect</em>）——时间上采样</li>
<li>……</li>
</ul>
</li>
<li><strong>造成错误的原因：</strong>信号频率高，而采样频率低（可联系<strong>奈奎斯特定理：</strong>当采样频率大于信号中最高频率的2倍时(fs&gt;2f)，采样之后的数字信号完整地保留了原始信号中的信息）</li>
</ul>
<h2 id="b-Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling"><a href="#b-Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling" class="headerlink" title="b). Antialiasing Idea:Blurring (Pre-Filtering) Before Sampling"></a>b). Antialiasing Idea:Blurring (Pre-Filtering) Before Sampling</h2><ul>
<li><p>抗锯齿的思路就是在采样前”模糊“；</p>
<p><img src="/2022/10/02/Games101_05_06_Rasterization/AS.png" alt="AS"></p>
<ul>
<li><strong>注意：</strong>先模糊，后采样。对应频域上先低通滤波（或其他操作，如卷积、超采样，FSAA那种图像层面的抗锯齿暂不考虑），后采样（<strong>卷积定理：</strong>时域信号与冲激信号相乘，等于两者对应的频域信号卷积。反之，也成立）；</li>
</ul>
</li>
</ul>
<h2 id="c-Frequency-Domain"><a href="#c-Frequency-Domain" class="headerlink" title="c). Frequency Domain"></a>c). Frequency Domain</h2><h3 id="c-1-Fundamental"><a href="#c-1-Fundamental" class="headerlink" title="c.1). Fundamental"></a>c.1). Fundamental</h3><ul>
<li><p>傅里叶变换</p>
</li>
<li><p><strong>卷积定理：</strong>时域中乘积等于频域上卷积，反之也成立。（时域信号与冲激信号相乘，等于两者对应的频域信号卷积。反之，也成立。）</p>
</li>
<li><p><strong>Aliases:</strong> 在给定的采样率下，无法区分两个不同频率<img src="/2022/10/02/Games101_05_06_Rasterization/Aliases.png" alt="Aliases"></p>
</li>
</ul>
<h3 id="c-2-Filtering-Getting-rid-of-certain-frequency-contents"><a href="#c-2-Filtering-Getting-rid-of-certain-frequency-contents" class="headerlink" title="c.2). Filtering: Getting rid of certain frequency contents"></a>c.2). Filtering: Getting rid of certain frequency contents</h3><ul>
<li>K空间：反应图像进过二维傅里叶变换后的结果，越靠中间，频率越小；<img src="/2022/10/02/Games101_05_06_Rasterization/K_space.png" alt="K_space"><ul>
<li>出现十字星的原因：把图像看成类似Wrap Mode的Repeat，即重复的图像。使得其四个方向的高频内容增加，形成十字星；</li>
</ul>
</li>
<li><strong>Filter（滤波器）：</strong><ul>
<li><strong>High-pass filter</strong><img src="/2022/10/02/Games101_05_06_Rasterization/High_pass filter.png" alt="High_pass filter"></li>
<li><strong>Low-pass filter</strong><img src="/2022/10/02/Games101_05_06_Rasterization/Low_pass_filter.png" alt="Low_pass_filter"></li>
<li>Filter Out Low and High Frequencies<img src="/2022/10/02/Games101_05_06_Rasterization/F_Low_and_high.png" alt="F_Low_and_high"></li>
</ul>
</li>
</ul>
<h3 id="c-3-Convolution"><a href="#c-3-Convolution" class="headerlink" title="c.3). Convolution"></a>c.3). Convolution</h3><ul>
<li><strong>Filtering = Convolution (= Averaging)</strong><ul>
<li>注意：只是在这里相等，而滤波和卷积概念上不相同；</li>
</ul>
</li>
<li><strong>对信号进行滤波，就是用卷积核和信号做卷积；</strong><ul>
<li>Point-wise local averaging in a “sliding window”<img src="/2022/10/02/Games101_05_06_Rasterization/convolution.png" alt="convolution"></li>
</ul>
</li>
</ul>
<ul>
<li><strong>卷积定理：</strong>在空域（时域）做卷积，等于在频域做乘积；反之亦然。<ul>
<li>因此，对图像滤波有两种处理方法；<ul>
<li><strong>Option 1: </strong>在空域上与滤波器（卷积核）做卷积；</li>
<li><strong>Option 2: </strong><ol>
<li>将图像和滤波器（卷积核）转换到频域（傅里叶变换）；</li>
<li>两者在频域相乘；</li>
<li>将得到的结果重新变换到空域（逆傅里叶变换）；<img src="/2022/10/02/Games101_05_06_Rasterization/Convolution_Theorem.png" alt="Convolution_Theorem"></li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>Box Filter</strong><img src="/2022/10/02/Games101_05_06_Rasterization/BoxFilter.png" alt="BoxFilter"><ul>
<li>箱式滤波类似于低通滤波<img src="/2022/10/02/Games101_05_06_Rasterization/BoxF_LP.png" alt="BoxF_LP"></li>
<li>更大的卷积核意味着更低的频率<img src="/2022/10/02/Games101_05_06_Rasterization/WiderFK.png" alt="WiderFK"></li>
</ul>
</li>
</ul>
<h3 id="c-4-Sampling-Repeating-Frequency-Contents"><a href="#c-4-Sampling-Repeating-Frequency-Contents" class="headerlink" title="c.4). Sampling = Repeating Frequency Contents"></a>c.4). Sampling = Repeating Frequency Contents</h3><p><img src="/2022/10/02/Games101_05_06_Rasterization/Sampling.png" alt="Sampling"></p>
<ul>
<li>锯齿=混叠<img src="/2022/10/02/Games101_05_06_Rasterization/MixedFrequencyContents.png" alt="MixedFrequencyContents"></li>
</ul>
<h2 id="d-Antialiasing"><a href="#d-Antialiasing" class="headerlink" title="d). Antialiasing"></a>d). Antialiasing</h2><ul>
<li>解决锯齿的选择：<ul>
<li>提高采样率<ul>
<li>增大冲激信号在频域的距离；</li>
<li>更高分辨率的显示器；</li>
<li>缺点：成本高，且需要很高的分辨率</li>
</ul>
</li>
<li><strong>抗锯齿</strong><ul>
<li>让信号在采样（重复，Repeat）前变“窄”，即<strong>在采样前过滤掉高频部分</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>Antialiasing = Limiting, then repeating</strong><img src="/2022/10/02/Games101_05_06_Rasterization/AA.png" alt="AA"></li>
<li><img src="/2022/10/02/Games101_05_06_Rasterization/Pre-Filter.png" alt="Pre-Filter"><ul>
<li>Solution: <ul>
<li><strong>Convolve</strong> f(x,y) by a <strong>1-pixel box-blur</strong><ul>
<li>Recall: convolving = filtering = averaging </li>
</ul>
</li>
<li><strong>Then sample</strong> at every pixel’s center</li>
</ul>
</li>
</ul>
</li>
<li><strong>通过计算像素平均值来抗锯齿</strong><img src="/2022/10/02/Games101_05_06_Rasterization/Avertage_Pixel_Value.png" alt="Avertage_Pixel_Value"></li>
</ul>
<h2 id="e-SSAA-Super-Sampling-Antialiasing"><a href="#e-SSAA-Super-Sampling-Antialiasing" class="headerlink" title="e). SSAA(Super Sampling Antialiasing)"></a>e). SSAA(Super Sampling Antialiasing)</h2><ul>
<li>通过将一个像素分割成NxN个像素来进行采样和shading，最后将每个像素点内部所细分的采样点的颜色值全部加起来再求均值，作为该像素点的抗锯齿之后的颜色值<img src="/2022/10/02/Games101_05_06_Rasterization/SSAA.png" alt="SSAA"></li>
</ul>
<h2 id="f-MSAA-Multi-Sampling-Antialiasing"><a href="#f-MSAA-Multi-Sampling-Antialiasing" class="headerlink" title="f). MSAA(Multi-Sampling Antialiasing)"></a>f). MSAA(Multi-Sampling Antialiasing)</h2><ul>
<li>MSAA是对SSAA的改进。SSAA的计算量大，一个像素中会有多个点进行shading，而MSAA只是计算究竟有几个采样点会被三角形cover，计算颜色的时候只会利用像素中心坐标进行一次shading。<img src="/2022/10/02/Games101_05_06_Rasterization/MSAA.png" alt="MSAA"></li>
<li>如图中大点所在的像素块，三角形只覆盖了其中的三个点（左下，右上，右下），则该像素的颜色为$75\%Color_{origin}$，<strong>之后，再对像素中心进行采样</strong></li>
<li><strong>注意</strong>：MSAA只是近似Blur，而没提高采样率。要注意和SSAA以及高分辨率的区分</li>
<li><strong>在实际中</strong>，子像素的划分并不是均匀划分为NxN，而是通过其他更有效的方法，而且有些样本还会得到复用；</li>
</ul>
<blockquote>
<ul>
<li><strong>SSAA中每个像素点有4个子采样点，每个三角形对每个像素点的4个子采样点各着色1次（共4次）</strong>，再把计算结果根据深度和覆盖信息保存到对应的子采样点，最后对4个采样点取均值作为最终的像素颜色；</li>
<li><strong>MSAA中每个像素点有4个子采样点，每个三角形对每个像素点只在中心点着色1次</strong>，再把计算结果根据深度和覆盖信息保存到对应的子采样点，最后对4个采样点取均值作为最终的像素颜色；</li>
</ul>
</blockquote>
<h2 id="g-Other-AA"><a href="#g-Other-AA" class="headerlink" title="g). Other AA"></a>g). Other AA</h2><ul>
<li><strong>FXAA(Fast Approximate AA)</strong><ul>
<li><strong>图像层面</strong>上进行处理，是一个后期处理，先得到有锯齿的图像，再通过图像匹配找到有锯齿的边界，之后，替换为没有锯齿的边界；</li>
</ul>
</li>
<li><strong>TAA(Temporal AA)</strong><ul>
<li>可以联系UE_NOTE</li>
<li>将空域采样点，均匀分布到时域上；</li>
</ul>
</li>
</ul>
<h2 id="h-Z-buffer"><a href="#h-Z-buffer" class="headerlink" title="h). Z-buffer"></a>h). Z-buffer</h2><h3 id="h-0-Painter’s-Algorithm"><a href="#h-0-Painter’s-Algorithm" class="headerlink" title="h.0). Painter’s Algorithm"></a>h.0). Painter’s Algorithm</h3><ul>
<li>画家算法：<ul>
<li>对三角形进行排序，先画远的，再画近的；</li>
<li>不能解决相互遮挡问题，因此采用Z-buffer<img src="/2022/10/02/Games101_05_06_Rasterization/Painters_Algorithm.png" alt="Painters_Algorithm"></li>
</ul>
</li>
</ul>
<h3 id="h-1-Z-buffer"><a href="#h-1-Z-buffer" class="headerlink" title="h.1). Z-buffer"></a>h.1). Z-buffer</h3><ul>
<li><strong>Idea：</strong><ul>
<li>储存<strong>每个采样（像素）</strong>中最小的深度值；</li>
<li>储存深度值到缓存区（buffer）中；</li>
</ul>
</li>
<li>为了简单起见，我们看作z是正数(smaller z -&gt; closer, larger z -&gt; further)；<img src="/2022/10/02/Games101_05_06_Rasterization/Z-Buffer.png" alt="Z-Buffer"></li>
<li>深度缓存步骤：<ol>
<li><strong>初始化深度缓存，将其中每个值初始化为∞</strong></li>
<li><strong>遍历每个三角形面上的每一个像素点[x,y]，如果该像素点的深度值z，小于Z-buffer[x,y]中的值，则更新zbuffer[x,y]值为该点深度值z，并同时更新该像素点[x,y]的颜色为该三角形面上的该点的颜色。</strong><ul>
<li>伪代码：<img src="/2022/10/02/Games101_05_06_Rasterization/PCode.png" alt="PCode"></li>
</ul>
</li>
</ol>
</li>
</ul>
<p><img src="/2022/10/02/Games101_05_06_Rasterization/Z-Buffer_Algorithm.png" alt="Z-Buffer_Algorithm"></p>
<ul>
<li>时间复杂度$O(n)$。Z-buffer并没有进行排序，只是求得最小（深度）值，因此时间复杂度为线性；</li>
<li>三角形的绘制顺序并不影响最终结果（不考虑不透明等情况）；</li>
</ul>
]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101-2-4 Math</title>
    <url>/2022/10/02/Games101_02_04_Math/</url>
    <content><![CDATA[<h1 id="Lecture-02-Review-of-Linear-Algebra"><a href="#Lecture-02-Review-of-Linear-Algebra" class="headerlink" title="Lecture 02 Review of Linear Algebra"></a>Lecture 02 Review of Linear Algebra</h1><h2 id="a-Cross-Product"><a href="#a-Cross-Product" class="headerlink" title="a). Cross Product"></a>a). Cross Product</h2><p><img src="/2022/10/02/Games101_02_04_Math/cross.png" alt="cross"></p>
<ul>
<li><p>判断相对的左右、前后、内外</p>
<p><img src="/2022/10/02/Games101_02_04_Math/cross.png" alt="cross"></p>
</li>
<li><p><strong>判断左右：</strong>如$ \vec{a} \cdot \vec{b} &gt; 0$那 $\vec{b}$ 就在 $\vec{a}$ 的左侧（按图中的右手坐标系）</p>
</li>
<li><p><strong>判断内外：</strong>判断 $\vec{AB}$  和 $\vec{AP}$ 的关系，可判断$P$ 点的在 $\vec{AB}$ 的左侧，同理可判断$P$ 在 $\vec{BC}$ 和 $\vec{CA}$ 的左侧，即均在向量<strong>同侧</strong>。由此，可判断$P$ 点的在 $ABC$ 的内部</p>
</li>
</ul>
<h2 id="b-Orthonormal-Coordinate-Frames-正交直角坐标系"><a href="#b-Orthonormal-Coordinate-Frames-正交直角坐标系" class="headerlink" title="b). Orthonormal Coordinate Frames(正交直角坐标系)"></a>b). Orthonormal Coordinate Frames(正交直角坐标系)</h2><p><img src="/2022/10/02/Games101_02_04_Math/OCF.png" alt="OCF"></p>
<span id="more"></span>
<h1 id="Lecture-03-Transformation"><a href="#Lecture-03-Transformation" class="headerlink" title="Lecture 03 Transformation"></a>Lecture 03 Transformation</h1><h2 id="a-2D-Transformation"><a href="#a-2D-Transformation" class="headerlink" title="a). 2D Transformation"></a>a). 2D Transformation</h2><ul>
<li><p><strong>Scale Matrix</strong> </p>
</li>
<li><p><strong>Reflection Matrix</strong></p>
</li>
<li><p><strong>Shear Matrix(切变矩阵)</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/ShearMatrix.png" alt="ShearMatrix"></p>
</li>
<li><p><strong>Rotation matrix(默认原点(0, 0), CCW/逆时针旋转)</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/RotationMatrix.png" alt="RotationMatrix"></p>
</li>
</ul>
<h2 id="b-Homogeneous-coordinates-齐次坐标"><a href="#b-Homogeneous-coordinates-齐次坐标" class="headerlink" title="b). Homogeneous coordinates(齐次坐标)"></a>b). Homogeneous coordinates(齐次坐标)</h2><ul>
<li><p><strong>To solve:</strong> 平移不是线性变换，无法用2*2矩阵表示（2D）</p>
</li>
<li><p><img src="/2022/10/02/Games101_02_04_Math/HomogenousCoord.png" alt="HomogenousCoord"></p>
<ul>
<li><strong>为什么点和向量的其次项不同？</strong><ol>
<li>向量具有平移不变性，齐次项为0可使其不受$t_x$、$t_y$的影响</li>
<li>考虑向量与点、向量/点之间的运算<img src="/2022/10/02/Games101_02_04_Math/HomogenousCoord01.png" alt="HomogenousCoord01"><ul>
<li>point + point得到<strong>两点的中点</strong></li>
</ul>
</li>
</ol>
</li>
<li>所有的<strong>仿射变换（Affine Transformation）</strong>都可以用<strong>齐次坐标系</strong>表示<img src="/2022/10/02/Games101_02_04_Math/AT2HC.png" alt="AT2HC"></li>
</ul>
</li>
<li><p><strong>复杂变换</strong>，如</p>
<p><img src="/2022/10/02/Games101_02_04_Math/ComplexTransforms.png" alt="ComplexTransforms"></p>
</li>
</ul>
<h2 id="c-3D-Transformation"><a href="#c-3D-Transformation" class="headerlink" title="c). 3D Transformation"></a>c). 3D Transformation</h2><p><img src="/2022/10/02/Games101_02_04_Math/3D_Transformations.png" alt="3D_Transformations"></p>
<ul>
<li>三维空间中使用齐次坐标的变换</li>
</ul>
<script type="math/tex; mode=display">
\left(\begin{array}{l}
x^{\prime} \\
y^{\prime} \\
z^{\prime} \\
1
\end{array}\right)=\left(\begin{array}{lllc}
a & b & c & t_{x} \\
d & e & f & t_{y} \\
g & h & i & t_{z} \\
0 & 0 & 0 & 1
\end{array}\right) \cdot\left(\begin{array}{l}
x \\
y \\
z \\
1
\end{array}\right)</script><script type="math/tex; mode=display">
\left(\begin{array}{l}
x^{\prime} \\
y^{\prime} \\
z^{\prime} \\
1
\end{array}\right)=\left(\begin{array}{lllc}
1 & 0 & 0 & t_{x} \\
0 & 1 & 0 & t_{y} \\
0 & 0 & 1 & t_{z} \\
0 & 0 & 0 & 1
\end{array}\right) \cdot\left(\begin{array}{lllc}
a & b & c & 0 \\
d & e & f & 0 \\
g & h & i & 0 \\
0 & 0 & 0 & 1
\end{array}\right) \cdot\left(\begin{array}{l}
x \\
y \\
z \\
1
\end{array}\right)</script><p><strong>上述矩阵先线性变换再平移</strong>，相当于：</p>
<script type="math/tex; mode=display">
\left(\begin{array}{l}x^{\prime} \\y^{\prime} \\z^{\prime} \\1\end{array}\right)=\left(\begin{array}{lllc}1 & 0 & 0 & t_{x} \\0 & 1 & 0 & t_{y} \\0 & 0 & 1 & t_{z} \\0 & 0 & 0 & 1\end{array}\right) \cdot\left(\begin{array}{lllc}a & b & c & 0 \\d & e & f & 0 \\g & h & i & 0 \\0 & 0 & 0 & 1\end{array}\right) \cdot\left(\begin{array}{l}x \\y \\z \\1\end{array}\right)</script><hr>
<ul>
<li>补充知识：正交矩阵</li>
</ul>
<h1 id="Lecture-04-Transformation-Cont"><a href="#Lecture-04-Transformation-Cont" class="headerlink" title="Lecture 04 Transformation Cont."></a>Lecture 04 Transformation Cont.</h1><h2 id="a-3D变换"><a href="#a-3D变换" class="headerlink" title="a). 3D变换"></a>a). 3D变换</h2><h3 id="a-1-Scale、Translation"><a href="#a-1-Scale、Translation" class="headerlink" title="a.1) Scale、Translation"></a>a.1) Scale、Translation</h3><p><img src="/2022/10/02/Games101_02_04_Math/3d01.png" alt="3d01"></p>
<h3 id="a-2-3D-Rotations"><a href="#a-2-3D-Rotations" class="headerlink" title="a.2) 3D Rotations"></a>a.2) 3D Rotations</h3><ul>
<li><p><strong>旋转矩阵：</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/3d_rotation.png" alt="3d_rotation"></p>
<ul>
<li><p><strong>注意绕y轴旋转和其他的区别</strong>（$y=cross(z, x)$）</p>
</li>
<li><p>三轴旋转可以表示3D空间的所有旋转变换，例如飞机（<strong>Roll、Pitch、Yaw</strong>）</p>
<p><img src="/2022/10/02/Games101_02_04_Math/RPY.png" alt="RPY"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>罗德里格旋转公式</strong>（表示绕任意<strong>经过原点</strong>轴的任意旋转）</p>
<p><img src="/2022/10/02/Games101_02_04_Math/Rodrigues_Rotation.png" alt="Rodrigues_Rotation"></p>
<ul>
<li>默认旋转轴经过原点</li>
<li>$\left(\begin{array}{ccc}<br>0 &amp; -n_{z} &amp; n_{y} \\<br>n_{z} &amp; 0 &amp; -n_{x} \\<br>-n_{y} &amp; n_{x} &amp; 0<br>\end{array}\right)$是叉乘向量的矩阵形式</li>
<li>四元数多是为了旋转之间的插值用的</li>
</ul>
</li>
<li><font color="red">四元数待课后补充</font>



</li>
</ul>
<h2 id="b-Viewing-Transformation"><a href="#b-Viewing-Transformation" class="headerlink" title="b). Viewing Transformation"></a>b). Viewing Transformation</h2><ul>
<li><strong>概念：</strong>Viewing Transformation（观测矩阵）相当于MVP中的VP<ul>
<li>View/Camera transformation</li>
<li>Projection transformation<ul>
<li>Orthographic projection</li>
<li>Perspective projection</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b-1-View-Transformaiton"><a href="#b-1-View-Transformaiton" class="headerlink" title="b.1) View Transformaiton"></a>b.1) View Transformaiton</h3><ul>
<li><p><img src="/2022/10/02/Games101_02_04_Math/MVP_VP.png" alt="MVP_VP"></p>
</li>
<li><p><strong>Difine the camera:</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/Difine_cam.png" alt="Difine_cam"></p>
</li>
<li><p><strong>View Space:</strong></p>
<ul>
<li>相机位于原点，上是$Y$，看向$-Z$</li>
<li>看成所有相机不动，全是其他物体动</li>
</ul>
</li>
</ul>
<ul>
<li>$M_{view}$：<ul>
<li>in math:<ul>
<li><img src="/2022/10/02/Games101_02_04_Math/M_in_math01.png" alt="M_in_math01"></li>
<li><img src="/2022/10/02/Games101_02_04_Math/M_in_math02.png" alt="M_in_math02"></li>
<li>直接应用矩阵空间变换</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b-2-Projection-transformation"><a href="#b-2-Projection-transformation" class="headerlink" title="b.2) Projection transformation"></a>b.2) Projection transformation</h3><p><strong>这里的投影变换中对xyzw都乘了z，因此最后需要齐次除法（透视除法），转换到NDC(Normalized Device Coordinates)</strong></p>
<h4 id="b-2-1-Orthographic-Projection"><a href="#b-2-1-Orthographic-Projection" class="headerlink" title="b.2.1 Orthographic Projection"></a>b.2.1 <strong>Orthographic Projection</strong></h4><ul>
<li><p><strong>简易理解：</strong><img src="/2022/10/02/Games101_02_04_Math/Orthographic Projection.png" alt="Orthographic Projection"></p>
<ul>
<li>注意$[-1, 1]$</li>
</ul>
</li>
<li><p><strong>图形学中的做法：</strong><img src="/2022/10/02/Games101_02_04_Math/Orthographic Projection In general.png" alt="Orthographic Projection In general"></p>
<ul>
<li>通过平移将立方体中心化</li>
<li>缩放成标准立方体（“canonical” cube）</li>
<li>这里采用右手坐标系，缺点是$f&lt;n$，远的z值小于近的z值</li>
</ul>
</li>
<li><p><strong>矩阵形式：</strong></p>
<script type="math/tex; mode=display">
M_{\text {ortho }}=\left[\begin{array}{cccc}
\frac{2}{r-l} & 0 & 0 & 0 \\
0 & \frac{2}{t-b} & 0 & 0 \\
0 & 0 & \frac{2}{n-f} & 0 \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
1 & 0 & 0 & -\frac{r+l}{2} \\
0 & 1 & 0 & -\frac{t+b}{2} \\
0 & 0 & 1 & -\frac{n+f}{2} \\
0 & 0 & 0 & 1
\end{array}\right]</script></li>
<li><p><strong><font color="red">Caveat:</font></strong></p>
<ul>
<li>（使用右手坐标系）看向 $-Z$ 使得$f&lt;n$，远的z值小于近的z值</li>
<li>这也是为什么OpenGL使用左手坐标系（但也会造成其他问题）</li>
</ul>
</li>
</ul>
<h4 id="b-2-2-Perspective-Projection"><a href="#b-2-2-Perspective-Projection" class="headerlink" title="b.2.2 Perspective Projection"></a>b.2.2 Perspective Projection</h4><ul>
<li><p><strong>前置知识：</strong><img src="/2022/10/02/Games101_02_04_Math/Recall_P_M.png" alt="Recall_P_M"></p>
</li>
<li><p><strong>How to do perspective projection</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/how_to_perspective_projection.png" alt="how_to_perspective_projection"></p>
</li>
<li><p><strong>挤压（squish）</strong></p>
<p><img src="/2022/10/02/Games101_02_04_Math/squish.png" alt="squish"></p>
<p><img src="/2022/10/02/Games101_02_04_Math/squish02.png" alt="squish02"></p>
<ul>
<li>$M_{\text {persp } \rightarrow \text { ortho }}=\left(\begin{array}{cccc}<br>n &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; n &amp; 0 &amp; 0 \\<br>? &amp; ? &amp; ? &amp; ? \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{array}\right)$</li>
<li>不知道经过挤压后$z$的变化（即第三行乘以$\left(\begin{array}{l}<br>x \\<br>y \\<br>n \\<br>1<br>\end{array}\right)$未知），但知道：<ul>
<li>在近平面的点不会变化</li>
<li>在远平面的中点不会变化</li>
</ul>
</li>
<li>$z=n$时，$\left(\begin{array}{l}<br>x \\<br>y \\<br>n \\<br>1<br>\end{array}\right) \Rightarrow\left(\begin{array}{l}<br>x \\<br>y \\<br>n \\<br>1<br>\end{array}\right)==\left(\begin{array}{c}<br>n x^{n} \\<br>n y \\<br>n^{2} \\<br>n<br>\end{array}\right)$<ul>
<li>易得$\left(\begin{array}{llll}<br>0 &amp; 0 &amp; A &amp; B<br>\end{array}\right)\left(\begin{array}{l}<br>x \\<br>y \\<br>n \\<br>1<br>\end{array}\right)=n^{2}$</li>
<li>$An+B=n^2$</li>
</ul>
</li>
<li>$z=f$时，对于远平面中点，$\left(\begin{array}{l}<br>0 \\<br>0 \\<br>f \\<br>1<br>\end{array}\right) \Rightarrow\left(\begin{array}{l}<br>0 \\<br>0 \\<br>f \\<br>1<br>\end{array}\right)==\left(\begin{array}{c}<br>0 \\<br>0 \\<br>f^{2} \\<br>f<br>\end{array}\right)$<ul>
<li>易得$\left(\begin{array}{llll}<br>0 &amp; 0 &amp; A &amp; B<br>\end{array}\right)\left(\begin{array}{l}<br>0 \\<br>0 \\<br>f \\<br>1<br>\end{array}\right)=f^{2}$</li>
<li>$Af+B=f^2$</li>
</ul>
</li>
<li><p>得$A=n+f$，$B=-nf$</p>
</li>
<li><p>$M_{\text {persp } \rightarrow \text { ortho }}=\left(\begin{array}{cccc}<br>n &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; n &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; n+f &amp; -nf \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{array}\right)$</p>
</li>
<li><p>之后进行平行投影的变换，得</p>
<p>$\mathbf{M}_{\text {per }}=\left[\begin{array}{cccc}<br>\frac{2 n}{r-l} &amp; 0 &amp; \frac{l+r}{l-r} &amp; 0 \\<br>0 &amp; \frac{2 n}{t-b} &amp; \frac{b+t}{b-t} &amp; 0 \\<br>0 &amp; 0 &amp; \frac{f+n}{n-f} &amp; \frac{2 f n}{f-n} \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{array}\right]$</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>【补充】</p>
<p>作业1中用到的<a href="https://www.cnblogs.com/graphics/archive/2012/08/10/2627458.html">绕任意轴旋转</a>：</p>
<p><img src="/2022/10/02/Games101_02_04_Math/rotation.jpg" alt="rotation"></p>
<ul>
<li><strong>步骤：</strong><ol>
<li>将旋转轴平移至原点</li>
<li>将旋转轴旋转至YOZ平面</li>
<li>将旋转轴旋转至于Z轴重合</li>
<li>绕Z轴旋转θ度</li>
<li>执行步骤3的逆过程</li>
<li>执行步骤2的逆过程</li>
<li>执行步骤1的逆过程</li>
</ol>
</li>
</ul>
<p><img src="/2022/10/02/Games101_02_04_Math/rotation02.jpg" alt="rotation02"></p>
<p>如果旋转轴是过原点的，那么第一步和最后一步的平移操作可以省略，也就是把中间五个矩阵连乘起来，再转置一下，得到下面的绕任意轴旋转的矩阵</p>
<script type="math/tex; mode=display">
\left[\begin{array}{cccc}
a^{2}+\left(1-a^{2}\right) \cos \theta & a b(1-\cos \theta)+\operatorname{csin} \theta & a c(1-\cos \theta)-b \sin \theta & 0 \\
a b(1-\cos \theta)-c \sin \theta & b^{2}+\left(1-b^{2}\right) \cos \theta & b c(1-\cos \theta)+a \sin \theta & 0 \\
a c(1-\cos \theta)+b \sin \theta & b c(1-\cos \theta)-a \sin \theta & c^{2}+\left(1-c^{2}\right) \cos \theta & 0 \\
0 & 0 & 0 & 1
\end{array}\right]</script>]]></content>
      <categories>
        <category>Games101</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Games101</tag>
      </tags>
  </entry>
</search>
